package com.oblivm.backend.generated.stack;

#define PUSH 0
#define POP 1

typedef intp_ = public int;
typedef NonRecursiveORAM@m<T> = native CircuitOram(m, sizeof(T));

rnd@m RND(intp_32 m) = native intLib.randBools;

phantom StackNode@m<T> NonRecursiveORAM@m<T>.readAndRemove(int@m id, rnd@m pos) = native conditionalReadAndRemove;
phantom void NonRecursiveORAM@m<T>.add(int@m id, int@m pos, StackNode@m<T> node) = native conditionalPutBack;
 
struct StackNode@m<T> {
   rnd@m next;
   T data;
};
 
struct Stack@m<T> {
   rnd@m root;
   int@m size;
   NonRecursiveORAM@(1 << m)< StackNode@m<T> > oram;
};

phantom void Stack@m<T>.push(T operand) {
      StackNode@m<T> node = 
         StackNode@m{T} ( next = this.root,
               data = operand);
      this.root = RND(m);
      this.size  = this.size + 1;
      this.oram.add(this.size, this.root, node);
}

phantom T Stack@m<T>.pop() {
   T ret;
   rnd@m next;
   StackNode@m<T> r = this.oram.readAndRemove(this.size, this.root);
   ret, this.root = r.(data, next);
   this.size = this.size - 1;
   return ret;
}

T Stack@m<T>.op(int operand, T value) {
  T ret;
  if (operand == PUSH) {
     this.push(value);
  } else {
     ret = this.pop();
  }
  return ret;
}

int main@n(int[n] x, int[n] y) {
  Stack@9<int> stack;
  for(intp_ i=0; i<n; i=i+1) {
     stack.op(y[i], x[i]);
  }
  return stack.pop();
}
