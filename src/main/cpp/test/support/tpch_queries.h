#ifndef _TPCH_QUERIES_H
#define _TPCH_QUERIES_H

#include <emp-tool/utils/constants.h>
#include <map>


using namespace std;


namespace vaultdb {

    std::map<int, std::string> tpch_queries = {
            {1, "SELECT  l_returnflag,  l_linestatus,  SUM(l_quantity) as sum_qty, SUM(l_extendedprice) as sum_base_price, SUM(l_extendedprice * (1 - l_discount)) as sum_disc_price,  SUM(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, AVG(l_quantity) as avg_qty,  AVG(l_extendedprice) as avg_price,  AVG(l_discount) as avg_disc,   COUNT(*)::BIGINT as count_order \n"
                "FROM  lineitem \n"
                "WHERE  l_shipdate <= date '1998-08-03' \n"
                "GROUP BY  l_returnflag, l_linestatus \n"
                "ORDER BY  l_returnflag,  l_linestatus"},

            {3, "SELECT o_orderkey, o_orderdate, o_shippriority,  sum(l.l_extendedprice * (1 - l.l_discount)) as revenue "
                " FROM customer c JOIN orders o ON  c.c_custkey = o.o_custkey\n"
                "     JOIN lineitem l ON l.l_orderkey = o.o_orderkey\n"
                " WHERE  c.c_mktsegment = 'HOUSEHOLD'  AND o.o_orderdate < date '1995-03-25' AND l.l_shipdate > date '1995-03-25' "
                " GROUP BY  o_orderkey, o.o_orderdate,  o.o_shippriority\n"
                " ORDER BY  revenue DESC, o.o_orderdate\n"
                " limit 10"},
            {5, "select n.n_name, sum(l.l_extendedprice * (1 - l.l_discount)) as revenue\n"
                " from customer c JOIN orders o ON c.c_custkey = o.o_custkey\n"
                "     JOIN lineitem l ON l.l_orderkey = o.o_orderkey\n"
                "     JOIN supplier s ON l.l_suppkey = s.s_suppkey\n"
                "     JOIN nation n ON s.s_nationkey = n.n_nationkey\n"
                "     JOIN region r ON n.n_regionkey = r.r_regionkey\n"
                "where\n"
                "   c.c_nationkey = s.s_nationkey\n"
                "  and r.r_name = 'EUROPE'\n"
                "  and o.o_orderdate >= date '1993-01-01'\n"
                "  and o.o_orderdate < date '1994-01-01'\n"
                " group by\n"
                "  n.n_name\n"
                " order by\n"
                "  revenue desc"},
            {8,     "select\n"
                      "  o_year,\n"
                      "  sum(case\n"
                      "    when n_nation = 'KENYA' then volume\n"
                      "    else 0.0\n"
                      "  end) / sum(volume) as mkt_share\n"
                      "from\n"
                      "  (\n"
                      "    select\n"
                      "      extract(year from o.o_orderdate)::INT as o_year,\n"
                      "      l.l_extendedprice * (1 - l.l_discount) as volume,\n"
                      "      n2.n_name as n_nation\n"
                      "    from\n"
                      "      part p,\n"
                      "      supplier s,\n"
                      "      lineitem l,\n"
                      "      orders o,\n"
                      "      customer c,\n"
                      "      nation n1,\n"
                      "      nation n2,\n"
                      "      region r\n"
                      "    where\n"
                      "      p.p_partkey = l.l_partkey\n"
                      "      and s.s_suppkey = l.l_suppkey\n"
                      "      and l.l_orderkey = o.o_orderkey\n"
                      "      and o.o_custkey = c.c_custkey\n"
                      "      and c.c_nationkey = n1.n_nationkey\n"
                      "      and n1.n_regionkey = r.r_regionkey\n"
                      "      and r.r_name = 'AFRICA'\n"
                      "      and s.s_nationkey = n2.n_nationkey\n"
                      "      and o.o_orderdate between date '1995-01-01' and date '1996-12-31'\n"
                      "      and p.p_type = 'LARGE ANODIZED STEEL'\n"
                      "  ) as all_nations\n"
                      "group by\n"
                      "  o_year\n"
                      "order by\n"
                      "  o_year"},
            {9, "WITH order_years AS (\n"
                "     SELECT extract(year from o_orderdate)::INT as o_year, o.o_orderkey\n"
                "     FROM orders o),\n"
                "     yellow_parts AS (\n"
                "         SELECT p_partkey\n"
                "	 FROM part\n"
                "	 WHERE p_name like '%yellow%'),\n"
                "     profit AS (\n"
                "         select\n"
                "    	   n_name,\n"
                "     	    o_year,\n"
                "      	    l.l_extendedprice * (1 - l.l_discount) - ps.ps_supplycost * l.l_quantity as amount\n"
                "    	  from\n"
                "    	    yellow_parts p,\n"
                "      	    supplier s,\n"
                "      	    lineitem l,\n"
                "      	    partsupp ps,\n"
                "      	    order_years o,\n"
                "      	    nation n\n"
                "    where\n"
                "      s.s_suppkey = l.l_suppkey\n"
                "      and ps.ps_suppkey = l.l_suppkey\n"
                "      and ps.ps_partkey = l.l_partkey\n"
                "      and p.p_partkey = l.l_partkey\n"
                "      and o.o_orderkey = l.l_orderkey\n"
                "      and s.s_nationkey = n.n_nationkey)\n"
                " select\n"
                "  n_name,\n"
                "  o_year,\n"
                "  sum(amount) as sum_profit\n"
                " from profit\n"
                " group by\n"
                "  n_name,\n"
                "  o_year\n"
                " order by\n"
                "  n_name,\n"
                "  o_year desc\n"},
            {18, "WITH high_quantity AS (\n"
                 " SELECT l_orderkey\n"
                 " FROM lineitem\n"
                 " GROUP BY l_orderkey\n"
                 " HAVING SUM(l_quantity) > 7) \n"
                 " select c.c_name,\n"
                 "    c.c_custkey,\n"
                 "   o.o_orderkey,\n"
                 "   o.o_orderdate,\n"
                 "   o.o_totalprice,\n"
                 "   sum(l.l_quantity) sum_qty\n"
                 " from\n"
                 "   customer c,\n"
                 "   orders o,\n"
                 "   lineitem l\n"
                 " where\n"
                 "   o.o_orderkey in (\n"
                 "     select * FROM high_quantity)\n"
                 "   and c.c_custkey = o.o_custkey\n"
                 "   and o.o_orderkey = l.l_orderkey\n"
                 " group by\n"
                 "   c.c_name,\n"
                 "   c.c_custkey,\n"
                 "   o.o_orderkey,\n"
                 "   o.o_orderdate,\n"
                 "   o.o_totalprice\n"
                 " order by\n"
                 "   o.o_totalprice desc,\n"
                 "   o.o_orderdate\n"
                 " limit 100\n"}
    };


    // depends on conf/workload/tpch/setup-db-connections.sql
    std::map<int, std::string> truncated_tpch_queries = {
            {1, "select \n"
                "  l_returnflag, \n"
                "  l_linestatus, \n"
                "  sum(l_quantity) as sum_qty, \n"
                "  sum(l_extendedprice) as sum_base_price, \n"
                "  sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, \n"
                "  sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, \n"
                "  avg(l_quantity) as avg_qty, \n"
                "  avg(l_extendedprice) as avg_price, \n"
                "  avg(l_discount) as avg_disc, \n"
                "  count(*) as count_order \n"
                "from \n"
                // put primary key at end so that outputs are deterministic
                " ((SELECT * FROM  lineitem WHERE l_alice_store ORDER BY  l_returnflag, l_linestatus, l_orderkey, "
                "l_linenumber LIMIT $LIMIT) "
                "  UNION ALL"
                "(SELECT * FROM   lineitem WHERE NOT l_alice_store ORDER BY  l_returnflag, l_linestatus, l_orderkey, "
                "l_linenumber LIMIT $LIMIT)) t1 \n"
                " where \n"
                "  l_shipdate <= date '1998-08-03' \n"
                "group by \n"
                "  l_returnflag, \n"
                "  l_linestatus \n"
                " \n"
                "order by \n"
                "  l_returnflag, \n"
                "  l_linestatus"},

            {3, "select\n"
                "  l.l_orderkey,\n"
                "  sum(l.l_extendedprice * (1 - l.l_discount)) as revenue,\n"
                "  o.o_orderdate,\n"
                "  o.o_shippriority\n"
                " from\n"
                "   ((SELECT * FROM  customer  WHERE c_alice_store ORDER BY c_custkey LIMIT $LIMIT) UNION ALL (SELECT"
                " * "
                "FROM  "
                "customer  WHERE NOT c_alice_store ORDER BY c_custkey LIMIT $LIMIT))  c "
                "  JOIN  ((SELECT * FROM  orders  WHERE o_alice_store ORDER BY o_orderkey LIMIT $LIMIT) UNION ALL "
                "(SELECT * FROM  orders  WHERE NOT o_alice_store ORDER BY o_orderkey LIMIT $LIMIT))  o ON  c.c_custkey"
                " = o.o_custkey\n"
                "     JOIN ((SELECT * FROM  lineitem  WHERE l_alice_store ORDER BY l_orderkey, l_linenumber LIMIT $LIMIT) UNION ALL (SELECT * FROM  lineitem  WHERE NOT l_alice_store ORDER BY l_orderkey, l_linenumber LIMIT $LIMIT)) l ON l.l_orderkey = o.o_orderkey\n"
                " where\n"
                "  c.c_mktsegment = 'HOUSEHOLD'\n"
                "  and o.o_orderdate < date '1995-03-25'\n"
                "  and l.l_shipdate > date '1995-03-25'\n"
                "\n"
                " group by\n"
                "  l.l_orderkey,\n"
                "  o.o_orderdate,\n"
                "  o.o_shippriority\n"
                " order by\n"
                "  revenue desc,\n"
                "  o.o_orderdate\n"
                " limit 10"},
            {5, "select\n"
                "  n.n_name,\n"
                "  sum(l.l_extendedprice * (1 - l.l_discount)) as revenue\n"
                " from\n"
                "   ((SELECT * FROM  customer  WHERE c_alice_store ORDER BY c_custkey LIMIT $LIMIT) UNION ALL (SELECT "
                "* FROM  customer  WHERE NOT c_alice_store ORDER BY c_custkey LIMIT $LIMIT)) c "
                "     JOIN  ((SELECT * FROM  orders  WHERE o_alice_store ORDER BY o_orderkey LIMIT $LIMIT) UNION ALL "
                "(SELECT * FROM  orders  WHERE NOT o_alice_store ORDER BY o_orderkey LIMIT $LIMIT)) o ON c.c_custkey ="
                " o.o_custkey\n"
                "     JOIN ((SELECT * FROM  lineitem  WHERE l_alice_store ORDER BY l_orderkey, l_linenumber LIMIT $LIMIT) UNION ALL (SELECT * FROM  lineitem  WHERE NOT l_alice_store ORDER BY l_orderkey, l_linenumber LIMIT $LIMIT)) l ON l.l_orderkey = o.o_orderkey\n"
                "     JOIN  ((SELECT * FROM  supplier  WHERE s_alice_store ORDER BY s_suppkey LIMIT $LIMIT) UNION ALL "
                "(SELECT * FROM  supplier  WHERE NOT s_alice_store ORDER BY s_suppkey LIMIT $LIMIT))  s ON l.l_suppkey"
                " = s.s_suppkey\n"
                "     JOIN nation n ON s.s_nationkey = n.n_nationkey\n"
                "     JOIN region r ON n.n_regionkey = r.r_regionkey\n"
                "where\n"
                "   c.c_nationkey = s.s_nationkey\n"
                "  and r.r_name = 'EUROPE'\n"
                "  and o.o_orderdate >= date '1993-01-01'\n"
                "  and o.o_orderdate < date '1994-01-01'\n"
                " group by\n"
                "  n.n_name\n"
                " order by\n"
                "  revenue desc"},
                // joins are reordered to mirror their computation in a more MPC-friendly plan
            {8, "WITH  supplier_nation AS (\n"
                "		(SELECT s_suppkey, n_nationkey, n_name, n_name = 'KENYA' nation_check\n"
                "		FROM nation JOIN supplier  ON n_nationkey = s_nationkey\n"
                "       WHERE s_alice_store ORDER BY s_suppkey LIMIT $LIMIT) UNION ALL"
                "     (SELECT s_suppkey, n_nationkey, n_name, n_name = 'KENYA' nation_check \n"
                "            FROM nation JOIN supplier  ON n_nationkey = s_nationkey \n"
                "             WHERE NOT s_alice_store"
                "              ORDER BY s_suppkey LIMIT $LIMIT)),\n"
                " customer_region AS (SELECT c_nationkey, c_custkey\n"
                "      FROM ((SELECT * FROM  customer  JOIN nation ON c_nationkey = n_nationkey \n"
                "           JOIN region on r_regionkey = n_regionkey WHERE c_alice_store AND r_name='AFRICA' ORDER BY "
                "c_custkey "
                "LIMIT $LIMIT) \n"
                "      UNION ALL (SELECT * FROM  customer    JOIN nation ON c_nationkey = n_nationkey\n"
                "                        JOIN region on r_regionkey = n_regionkey WHERE NOT c_alice_store AND  "
                "r_name='AFRICA' ORDER BY "
                "c_custkey LIMIT $LIMIT)  ) c) , \n"
                "  lineitem_part AS ((SELECT l_partkey, l_orderkey, l_suppkey, l_extendedprice * (1.0 - l_discount) volume\n"
                "                    FROM part JOIN lineitem    ON p_partkey = l_partkey\n"
                "                    WHERE p_type = 'LARGE ANODIZED STEEL' AND l_alice_store\n"
                "                    ORDER BY l_orderkey, l_linenumber LIMIT $LIMIT) "
                "   UNION ALL "
                "               (SELECT l_partkey, l_orderkey, l_suppkey, l_extendedprice * (1.0 - l_discount) volume\n"
                "                FROM part JOIN lineitem    ON p_partkey = l_partkey\n"
                "                WHERE p_type = 'LARGE ANODIZED STEEL' AND NOT l_alice_store\n"
                "                ORDER BY l_orderkey, l_linenumber LIMIT $LIMIT)  ),"
                " all_nations AS (\n"
                "    select\n"
                "      o_orderyear,\n"
                "      volume,\n"
                "      s.n_name as nation,\n"
                "      nation_check\n"
                "    from\n"
                "       supplier_nation s,\n"
                "       lineitem_part l, "
                "       ((SELECT * FROM  orders  WHERE o_alice_store ORDER BY o_custkey, o_orderkey LIMIT $LIMIT) "
                "UNION ALL (SELECT * FROM  orders  WHERE NOT o_alice_store ORDER BY o_custkey, o_orderkey LIMIT "
                "$LIMIT)) o,\n"
                "       customer_region  c\n"
                "    where\n"
                "       s.s_suppkey = l.l_suppkey\n"
                "      and l.l_orderkey = o.o_orderkey\n"
                "      and o.o_custkey = c.c_custkey\n"
                "      and o.o_orderdate >= date '1995-01-01'\n"
                "      and o.o_orderdate < date '1996-12-31') \n"
                " select\n"
                "  o_orderyear,\n"
                "  sum(case\n"
                "    when nation_check then volume\n"
                "    else 0\n"
                "  end) / sum(volume) as mkt_share\n"
                " from all_nations\n"
                " group by\n"
                "  o_orderyear\n"
                " order by\n"
                "  o_orderyear\n"},

            {9, "WITH  yellow_parts_alice AS (\n"
                "        SELECT n_name,  ps_suppkey, ps_partkey, ps_supplycost\n"
                "FROM nation JOIN supplier  ON s_nationkey = n_nationkey\n"
                "    JOIN partsupp ON s_suppkey = ps_suppkey\n"
                "    JOIN part ON ps_partkey = p_partkey\n"
                "WHERE p_name LIKE '%yellow%' AND ps_alice_store AND s_alice_store\n"
                "ORDER BY ps_suppkey, ps_partkey LIMIT $LIMIT),\n"
                "  yellow_parts_bob AS (\n"
                    "        SELECT n_name,  ps_suppkey, ps_partkey, ps_supplycost\n"
                    "FROM nation   JOIN supplier  ON s_nationkey = n_nationkey\n"
                    "    JOIN partsupp ON s_suppkey = ps_suppkey\n"
                    "    JOIN part  ON ps_partkey = p_partkey\n"
                    "WHERE p_name LIKE '%yellow%' AND NOT ps_alice_store AND NOT s_alice_store\n"
                    "ORDER BY ps_suppkey, ps_partkey LIMIT $LIMIT), "
                    " yellow_parts AS ((SELECT * FROM yellow_parts_alice) UNION ALL (SELECT * FROM yellow_parts_bob)), "
                "     profit AS (\n"
                "         select\n"
                "    	   n_name,\n"
                "     	    o_orderyear,\n"
                "      	    l.l_extendedprice * (1.0 - l.l_discount) - ps_supplycost * l.l_quantity as amount\n"
                "    	  from\n"
                "    	    yellow_parts p,\n"
                "      	    ((SELECT * FROM  lineitem  WHERE l_alice_store ORDER BY l_orderkey, l_linenumber LIMIT "
                "$LIMIT) UNION ALL (SELECT * FROM  lineitem  WHERE NOT l_alice_store ORDER BY l_orderkey, "
                "l_linenumber LIMIT $LIMIT)) l,\n"
                "      	     ((SELECT * FROM  orders  WHERE o_alice_store ORDER BY o_orderkey LIMIT $LIMIT) UNION ALL "
                "(SELECT * FROM  orders  WHERE NOT o_alice_store ORDER BY o_orderkey LIMIT $LIMIT)) o "
                "    where\n"
                "      ps_suppkey = l.l_suppkey\n"
                "      and ps_partkey = l.l_partkey\n"
                "      and o.o_orderkey = l.l_orderkey)\n"
                " select\n"
                "  n_name,\n"
                "  o_orderyear,\n"
                "  sum(amount) as sum_profit\n"
                " from profit\n"
                " group by\n"
                "  n_name,\n"
                "  o_orderyear\n"
                " order by\n"
                "  n_name,\n"
                "  o_orderyear desc\n"},
            {18, "WITH high_quantity AS (\n"
                 " SELECT l_orderkey\n"
                 " FROM ((SELECT * FROM  lineitem  WHERE l_alice_store ORDER BY l_quantity, l_orderkey LIMIT $LIMIT) "
                 "UNION ALL (SELECT * FROM  lineitem  WHERE NOT l_alice_store ORDER BY l_quantity, l_orderkey LIMIT "
                 "$LIMIT)) l\n"
                 " GROUP BY l_orderkey\n"
                 " HAVING SUM(l_quantity) > 7) \n" // was 300 (validation) or 312...315 (test) but these always produce empty set with smaller workload
                 " select c.c_name,\n"
                 "    c.c_custkey,\n"
                 "   o.o_orderkey,\n"
                 "   o.o_orderdate,\n"
                 "   o.o_totalprice,\n"
                 "   sum(l.l_quantity) sum_qty\n"
                 " from\n"
                 "    ((SELECT * FROM  customer  WHERE c_alice_store ORDER BY c_custkey LIMIT $LIMIT) UNION ALL "
                 "(SELECT * FROM  customer  WHERE NOT c_alice_store ORDER BY c_custkey LIMIT $LIMIT))  c,\n"
                 "    ((SELECT * FROM  orders  WHERE o_alice_store ORDER BY o_orderkey LIMIT $LIMIT) UNION ALL (SELECT"
                 " * FROM  orders  WHERE NOT o_alice_store ORDER BY o_orderkey LIMIT $LIMIT)) o,\n"
                 "    ((SELECT * FROM  lineitem  WHERE l_alice_store ORDER BY l_quantity, l_orderkey LIMIT $LIMIT) "
                 "UNION ALL (SELECT * FROM  lineitem  WHERE NOT l_alice_store ORDER BY l_quantity, l_orderkey LIMIT "
                 "$LIMIT)) l\n"
                 " where\n"
                 "   o.o_orderkey in (\n"
                 "     select * FROM high_quantity)\n"
                 "   and c.c_custkey = o.o_custkey\n"
                 "   and o.o_orderkey = l.l_orderkey\n"
                 " group by\n"
                 "   c.c_name,\n"
                 "   c.c_custkey,\n"
                 "   o.o_orderkey,\n"
                 "   o.o_orderdate,\n"
                 "   o.o_totalprice\n"
                 " order by\n"
                 "   o.o_totalprice desc,\n"
                 "   o.o_orderdate\n"
                 " limit 100\n"}
    };

}

#endif // TESTING_DEFS_H