[==========] Running 12 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 12 tests from GeneralizedComparisonTest
[ RUN      ] GeneralizedComparisonTest.baseline_tpch_q1
Connecting to 127.0.0.1 on ports 7654, 65482 as 1
party 1 connected to TP
GB connected to 2
GB connected to 3
party 1 connected to TP
GB connected to 2
GB connected to 3
initializing cot
setup finished! takes 1239.25ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 1411383296 bytes, current memory size: 1366974464 bytes.
1411383296
EMP mode: outsourced, storage mode: column store
Code version: 1acad5e9b300370ee59a2ce455a9fbf7c0094e4e
GFlags: --flagfile=	--alice_db=tpch_alice_150	--alice_host=127.0.0.1	--bob_db=tpch_bob_150	--ctrl_port=65482	--cutoff=100	--filter=*	--party=1	--port=7654	--storage=column	--unioned_db=tpch_unioned_150	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 1411383296 bytes, current memory size: 1367629824 bytes.
Original Tree : 
#3: Sort<Bit> ({<0, ASC> , <1, ASC> }) : (#0 shared-varchar(1) lineitem.l_returnflag, #1 shared-varchar(1) lineitem.l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty, #7 shared-float avg_price, #8 shared-float avg_disc, #9 shared-int64(11) count_order) order by: {<0, ASC> , <1, ASC> }, cost est: 12522041, output card: 1500
    #2: SortMergeAggregate<Bit> (group-by: (0, 1) aggs: (SUM($2) sum_qty, SUM($3) sum_base_price, SUM($5) sum_disc_price, SUM($6) sum_charge, AVG($2) avg_qty, AVG($3) avg_price, AVG($4) avg_disc, COUNT(*) count_order)) : (#0 shared-varchar(1) lineitem.l_returnflag, #1 shared-varchar(1) lineitem.l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty, #7 shared-float avg_price, #8 shared-float avg_disc, #9 shared-int64(11) count_order) order by: {<0, ASC> , <1, ASC> }, cost est: 33405000, output card: 1500
        #-1: Sort<Bit> ({<0, ASC> , <1, ASC> }) : (#0 shared-varchar(1) lineitem.l_returnflag, #1 shared-varchar(1) lineitem.l_linestatus, #2 shared-float lineitem.l_quantity, #3 shared-float lineitem.l_extendedprice, #4 shared-float lineitem.l_discount, #5 shared-float disc_price, #6 shared-float charge) order by: {<0, ASC> , <1, ASC> }, cost est: 9094475, output card: 1500
            #1: Project<Bit> ((<0, P$4(8) shared-varchar>, <1, P$5(8) shared-varchar>, <2, P$0(32) shared-float>, <3, P$1(32) shared-float>, <4, P$2(32) shared-float>, <5, $1 * (SECRET FLOAT - $2) shared-float>, <6, ($1 * (SECRET FLOAT - $2)) * (SECRET FLOAT + $3) shared-float>)) : (#0 shared-varchar(1) lineitem.l_returnflag, #1 shared-varchar(1) lineitem.l_linestatus, #2 shared-float lineitem.l_quantity, #3 shared-float lineitem.l_extendedprice, #4 shared-float lineitem.l_discount, #5 shared-float disc_price, #6 shared-float charge) order by: {}, cost est: 34177500, output card: 1500
                #0: SecureSqlInput<Bit> ("SELECT l_quantity, l_extendedprice, l_discount, l_tax, l_returnflag, l_linestatus, NOT l_shipdate <= DATE '1998-08-03' AS dummy_tag FROM lineitem", tuple_count=1500) : (#0 shared-float lineitem.l_quantity, #1 shared-float lineitem.l_extendedprice, #2 shared-float lineitem.l_discount, #3 shared-float lineitem.l_tax, #4 shared-varchar(1) lineitem.l_returnflag, #5 shared-varchar(1) lineitem.l_linestatus) order by: {}, cost est: 0, output card: 1500

Operator #0 SecureSqlInput ran for 808.613000 ms, gate count: 0 output cardinality: 1500, row width=145
extension finished! takes 941.556ms to extend lpn
extension finished! takes 894.995ms to extend lpn
extension finished! takes 870.865ms to extend lpn
extension finished! takes 857.223ms to extend lpn
Operator #1 Project ran for 14401.808000 ms, gate count: 20506500 output cardinality: 1500, row width=177
extension finished! takes 887.499ms to extend lpn
Operator #-1 Sort ran for 7105.256000 ms, gate count: 9279558 output cardinality: 1500, row width=177
extension finished! takes 864.935ms to extend lpn
extension finished! takes 862.827ms to extend lpn
extension finished! takes 849.904ms to extend lpn
extension finished! takes 862.663ms to extend lpn
extension finished! takes 853.317ms to extend lpn
extension finished! takes 854.615ms to extend lpn
extension finished! takes 859.762ms to extend lpn
Operator #2 SortMergeAggregate ran for 24533.796000 ms, gate count: 32971759 output cardinality: 1500, row width=252
extension finished! takes 856.991ms to extend lpn
extension finished! takes 861.201ms to extend lpn
extension finished! takes 861.046ms to extend lpn
Operator #3 Sort ran for 11944.154000 ms, gate count: 12547008 output cardinality: 1500, row width=252
Runtime: 58.8225 sec, CPU Time: 60.3158 sec, CPU clock ticks: 6.03158e+07, CPU clock ticks per second: 1000000
End-to-end estimated gates: 8.9199e+07. observed gates: 75304825 gates, relative error (%)=18.4506
[Linux]Peak resident set size: 1863495680 bytes, current memory size: 1814056960 bytes.
Initial Memory: 1411383296 bytes, Peak Memory After Execution: 1863495680 bytes, Memory Usage: 452112384 bytes
Bandwidth: 0 Bps
party 1 send 0 bytes to party 2
party 1 send 0 bytes to party 3
party 1 send 0 bytes to TP 
total AND gate: 75304825
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.baseline_tpch_q1 (71496 ms)
[ RUN      ] GeneralizedComparisonTest.baseline_tpch_q3
Connecting to 127.0.0.1 on ports 7654, 65482 as 1
party 1 connected to TP
GB connected to 2
GB connected to 3
party 1 connected to TP
GB connected to 2
GB connected to 3
initializing cot
setup finished! takes 949.386ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 1863495680 bytes, current memory size: 1807679488 bytes.
1863495680
EMP mode: outsourced, storage mode: column store
Code version: 1acad5e9b300370ee59a2ce455a9fbf7c0094e4e
GFlags: --flagfile=	--alice_db=tpch_alice_150	--alice_host=127.0.0.1	--bob_db=tpch_bob_150	--ctrl_port=65482	--cutoff=100	--filter=*	--party=1	--port=7654	--storage=column	--unioned_db=tpch_unioned_150	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 1863495680 bytes, current memory size: 1807679488 bytes.
Original Tree : 
#10: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$3(32) shared-float>, <2, P$1(28) shared-int64>, <3, P$2(32) shared-int32>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-float revenue, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32 orders.o_shippriority) order by: {<-1, ASC> , <1, DESC> , <2, ASC> }, cost est: 0, output card: 10
    #9: Sort<Bit> ({<-1, ASC> , <3, DESC> , <1, ASC> }) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<-1, ASC> , <3, DESC> , <1, ASC> }, cost est: 6317, output card: 10
        #8: SortMergeAggregate<Bit> (group-by: (0, 1, 2) aggs: (SUM($3) revenue)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<0, ASC> , <1, ASC> , <2, ASC> }, cost est: 1854000, output card: 1500
            #-1: Sort<Bit> ({<0, ASC> , <1, ASC> , <2, ASC> }) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<0, ASC> , <1, ASC> , <2, ASC> }, cost est: 8591765, output card: 1500
                #7: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$1(28) shared-int64>, <2, P$2(32) shared-int32>, <3, P$4(32) shared-float>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {}, cost est: 0, output card: 1500
                    #6: KeyedJoin<Bit> (P$0(13) == P$3(13)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-int32(13) lineitem.l_orderkey, #4 shared-float revenue) order by: {}, cost est: 202500000, output card: 1500
                        #3: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$2(28) shared-int64>, <2, P$3(32) shared-int32>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority) order by: {}, cost est: 0, output card: 1500
                            #2: KeyedJoin<Bit> (P$1(8) == P$4(8)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32 orders.o_shippriority, #4 shared-int32(8) customer.c_custkey) order by: {}, cost est: 4500000, output card: 1500
                                #0: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_orderdate, o_shippriority, NOT o_orderdate < DATE '1995-03-25' AS dummy_tag FROM orders", tuple_count=1500) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32 orders.o_shippriority) order by: {}, cost est: 0, output card: 1500
                                #1: SecureSqlInput<Bit> ("SELECT c_custkey, NOT c_mktsegment = 'HOUSEHOLD' AS dummy_tag FROM customer", tuple_count=150) : (#0 shared-int32(8) customer.c_custkey) order by: {}, cost est: 0, output card: 150
                        #5: Project<Bit> ((<0, P$0(13) shared-int32>, <1, $1 * (SECRET FLOAT - $2) shared-float>)) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-float revenue) order by: {}, cost est: 6835500, output card: 1500
                            #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_extendedprice, l_discount, NOT l_shipdate > DATE '1995-03-25' AS dummy_tag FROM lineitem", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-float lineitem.l_extendedprice, #2 shared-float lineitem.l_discount) order by: {}, cost est: 0, output card: 1500

Operator #0 SecureSqlInput ran for 13.344000 ms, gate count: 0 output cardinality: 1500, row width=82
Operator #1 SecureSqlInput ran for 0.167000 ms, gate count: 0 output cardinality: 150, row width=9
Operator #2 KeyedJoin ran for 3693.403000 ms, gate count: 4725000 output cardinality: 1500, row width=90
Operator #3 Project ran for 3.500000 ms, gate count: 0 output cardinality: 1500, row width=74
Operator #4 SecureSqlInput ran for 13.074000 ms, gate count: 0 output cardinality: 1500, row width=78
extension finished! takes 865.164ms to extend lpn
extension finished! takes 866.602ms to extend lpn
Operator #5 Project ran for 5658.988000 ms, gate count: 6835500 output cardinality: 1500, row width=46
extension finished! takes 868.884ms to extend lpn
extension finished! takes 869.968ms to extend lpn
extension finished! takes 872.911ms to extend lpn
extension finished! takes 890.559ms to extend lpn
extension finished! takes 890.921ms to extend lpn
extension finished! takes 869.054ms to extend lpn
extension finished! takes 858.314ms to extend lpn
extension finished! takes 866.311ms to extend lpn
extension finished! takes 883.986ms to extend lpn
extension finished! takes 874.776ms to extend lpn
extension finished! takes 860.586ms to extend lpn
extension finished! takes 865.268ms to extend lpn
extension finished! takes 865.281ms to extend lpn
extension finished! takes 875.763ms to extend lpn
extension finished! takes 872.666ms to extend lpn
extension finished! takes 874.563ms to extend lpn
extension finished! takes 872.369ms to extend lpn
extension finished! takes 875.745ms to extend lpn
extension finished! takes 876.307ms to extend lpn
extension finished! takes 877.233ms to extend lpn
extension finished! takes 863.113ms to extend lpn
extension finished! takes 871.327ms to extend lpn
extension finished! takes 883.794ms to extend lpn
extension finished! takes 888.095ms to extend lpn
extension finished! takes 873.972ms to extend lpn
extension finished! takes 865.886ms to extend lpn
extension finished! takes 873.379ms to extend lpn
extension finished! takes 871.005ms to extend lpn
extension finished! takes 870.082ms to extend lpn
extension finished! takes 865.757ms to extend lpn
extension finished! takes 863.52ms to extend lpn
extension finished! takes 882.832ms to extend lpn
extension finished! takes 866.795ms to extend lpn
extension finished! takes 866.597ms to extend lpn
extension finished! takes 868.15ms to extend lpn
extension finished! takes 872.307ms to extend lpn
extension finished! takes 876.686ms to extend lpn
extension finished! takes 894.873ms to extend lpn
extension finished! takes 875.598ms to extend lpn
extension finished! takes 865.093ms to extend lpn
extension finished! takes 866.85ms to extend lpn
Operator #6 KeyedJoin ran for 158607.034000 ms, gate count: 204750000 output cardinality: 1500, row width=119
Operator #7 Project ran for 4.785000 ms, gate count: 0 output cardinality: 1500, row width=106
extension finished! takes 865.367ms to extend lpn
extension finished! takes 870.689ms to extend lpn
Operator #-1 Sort ran for 9427.977000 ms, gate count: 11414292 output cardinality: 1500, row width=106
Operator #8 SortMergeAggregate ran for 1078.939000 ms, gate count: 1809325 output cardinality: 1500, row width=106
extension finished! takes 878.677ms to extend lpn
extension finished! takes 896.033ms to extend lpn
extension finished! takes 886.79ms to extend lpn
extension finished! takes 867.893ms to extend lpn
extension finished! takes 860.391ms to extend lpn
Operator #9 Sort ran for 20076.241000 ms, gate count: 26008902 output cardinality: 10, row width=106
Operator #10 Project ran for 0.057000 ms, gate count: 0 output cardinality: 10, row width=106
Runtime: 198.606 sec, CPU Time: 211.829 sec, CPU clock ticks: 2.11829e+08, CPU clock ticks per second: 1000000
End-to-end estimated gates: 2.24288e+08. observed gates: 255543019 gates, relative error (%)=12.231
[Linux]Peak resident set size: 1863495680 bytes, current memory size: 1802752000 bytes.
Initial Memory: 1863495680 bytes, Peak Memory After Execution: 1863495680 bytes, Memory Usage: 0 bytes
Bandwidth: 0 Bps
party 1 send 0 bytes to party 2
party 1 send 0 bytes to party 3
party 1 send 0 bytes to TP 
total AND gate: 255543019
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.baseline_tpch_q3 (199677 ms)
[ RUN      ] GeneralizedComparisonTest.baseline_tpch_q5
Connecting to 127.0.0.1 on ports 7654, 65482 as 1
party 1 connected to TP
GB connected to 2
GB connected to 3
party 1 connected to TP
GB connected to 2
GB connected to 3
initializing cot
setup finished! takes 931.404ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 1863495680 bytes, current memory size: 1802727424 bytes.
1863495680
EMP mode: outsourced, storage mode: column store
Code version: 1acad5e9b300370ee59a2ce455a9fbf7c0094e4e
GFlags: --flagfile=	--alice_db=tpch_alice_150	--alice_host=127.0.0.1	--bob_db=tpch_bob_150	--ctrl_port=65482	--cutoff=100	--filter=*	--party=1	--port=7654	--storage=column	--unioned_db=tpch_unioned_150	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 1863495680 bytes, current memory size: 1802727424 bytes.
Original Tree : 
#12: Sort<Bit> ({<1, DESC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<1, DESC> }, cost est: 12247836, output card: 1500
    #11: SortMergeAggregate<Bit> (group-by: (0) aggs: (SUM($1) revenue)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 2229000, output card: 1500
        #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 19925584, output card: 1500
            #10: Project<Bit> ((<0, P$5(200) shared-varchar>, <1, P$1(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {}, cost est: 0, output card: 1500
                #9: KeyedJoin<Bit> (($0 == $4) AND (P$2(8) == P$3(8))) : (#0 shared-int32(5) supplier.c_nationkey, #1 shared-float revenue, #2 shared-int32(8) orders.o_custkey, #3 shared-int32(8) customer.c_custkey, #4 shared-int32(5) customer.c_nationkey, #5 shared-varchar(25) nation.n_name) order by: {}, cost est: 9882000, output card: 1500
                    #7: Project<Bit> ((<0, P$0(5) shared-int32>, <1, P$2(32) shared-float>, <2, P$4(8) shared-int32>)) : (#0 shared-int32(5) supplier.c_nationkey, #1 shared-float revenue, #2 shared-int32(8) orders.o_custkey) order by: {}, cost est: 0, output card: 1500
                        #6: KeyedJoin<Bit> (P$1(13) == P$3(13)) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(13) lineitem.l_orderkey, #2 shared-float revenue, #3 shared-int32(13) orders.o_orderkey, #4 shared-int32(8) orders.o_custkey) order by: {}, cost est: 85500000, output card: 1500
                            #4: Project<Bit> ((<0, P$1(5) shared-int32>, <1, P$2(13) shared-int32>, <2, P$4(32) shared-float>)) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(13) lineitem.l_orderkey, #2 shared-float revenue) order by: {}, cost est: 0, output card: 1500
                                #3: KeyedJoin<Bit> (P$0(4) == P$3(4)) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey, #2 shared-int32(13) lineitem.l_orderkey, #3 shared-int32(4) lineitem.l_suppkey, #4 shared-float revenue) order by: {}, cost est: 51000, output card: 1500
                                    #0: SecureSqlInput<Bit> ("SELECT s_suppkey, s_nationkey FROM supplier JOIN nation ON s_nationkey = n_nationkey JOIN region ON n_regionkey = r_regionkey WHERE r_name = 'MIDDLE EAST '", tuple_count=2) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey) order by: {}, cost est: 0, output card: 2
                                    #2: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$1(4) shared-int32>, <2, $2 * (SECRET FLOAT - $3) shared-float>)) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float revenue) order by: {}, cost est: 6835500, output card: 1500
                                        #1: SecureSqlInput<Bit> ("SELECT l_orderkey, l_suppkey, l_extendedprice, l_discount FROM lineitem", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float lineitem.l_extendedprice, #3 shared-float lineitem.l_discount) order by: {}, cost est: 0, output card: 1500
                            #5: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, NOT (o_orderdate >= DATE '1993-01-01' AND o_orderdate < DATE '1994-01-01') AS dummy_tag FROM orders", tuple_count=1500) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey) order by: {}, cost est: 0, output card: 1500
                    #8: SecureSqlInput<Bit> ("SELECT t2.c_custkey, t2.c_nationkey, t1.n_name FROM (SELECT r_regionkey, r_name FROM region WHERE r_name = 'MIDDLE EAST ') AS t0 INNER JOIN (SELECT n_nationkey, n_name, n_regionkey FROM nation) AS t1 ON t0.r_regionkey = t1.n_regionkey INNER JOIN (SELECT c_custkey, c_nationkey FROM customer) AS t2 ON t1.n_nationkey = t2.c_nationkey ORDER BY t2.c_custkey ASC", tuple_count=27) : (#0 shared-int32(8) customer.c_custkey, #1 shared-int32(5) customer.c_nationkey, #2 shared-varchar(25) nation.n_name) order by: {}, cost est: 0, output card: 27

Operator #0 SecureSqlInput ran for 0.494000 ms, gate count: 0 output cardinality: 2, row width=10
Operator #1 SecureSqlInput ran for 13.011000 ms, gate count: 0 output cardinality: 1500, row width=82
extension finished! takes 866.896ms to extend lpn
Operator #2 Project ran for 4746.707000 ms, gate count: 6835500 output cardinality: 1500, row width=50
Operator #3 KeyedJoin ran for 38.323000 ms, gate count: 54000 output cardinality: 1500, row width=59
Operator #4 Project ran for 2.513000 ms, gate count: 0 output cardinality: 1500, row width=51
Operator #5 SecureSqlInput ran for 3.592000 ms, gate count: 0 output cardinality: 1500, row width=22
extension finished! takes 851.562ms to extend lpn
extension finished! takes 848.805ms to extend lpn
extension finished! takes 862.042ms to extend lpn
extension finished! takes 864.161ms to extend lpn
extension finished! takes 852.402ms to extend lpn
extension finished! takes 846.111ms to extend lpn
extension finished! takes 856.399ms to extend lpn
extension finished! takes 855.433ms to extend lpn
extension finished! takes 859.462ms to extend lpn
extension finished! takes 847.767ms to extend lpn
extension finished! takes 853.913ms to extend lpn
extension finished! takes 845.755ms to extend lpn
extension finished! takes 858.799ms to extend lpn
extension finished! takes 861.345ms to extend lpn
extension finished! takes 850.449ms to extend lpn
extension finished! takes 849.845ms to extend lpn
extension finished! takes 847.876ms to extend lpn
Operator #6 KeyedJoin ran for 71480.314000 ms, gate count: 87750000 output cardinality: 1500, row width=72
Operator #7 Project ran for 2.378000 ms, gate count: 0 output cardinality: 1500, row width=46
Operator #8 SecureSqlInput ran for 0.595000 ms, gate count: 0 output cardinality: 27, row width=214
extension finished! takes 863.517ms to extend lpn
extension finished! takes 867.677ms to extend lpn
extension finished! takes 870.292ms to extend lpn
Operator #9 KeyedJoin ran for 9632.060000 ms, gate count: 11745000 output cardinality: 1500, row width=259
Operator #10 Project ran for 12.737000 ms, gate count: 0 output cardinality: 1500, row width=233
extension finished! takes 876.909ms to extend lpn
extension finished! takes 882.149ms to extend lpn
extension finished! takes 894.714ms to extend lpn
extension finished! takes 887.164ms to extend lpn
extension finished! takes 890.315ms to extend lpn
Operator #-1 Sort ran for 22884.079000 ms, gate count: 27664410 output cardinality: 1500, row width=233
extension finished! takes 903.166ms to extend lpn
Operator #11 SortMergeAggregate ran for 2262.040000 ms, gate count: 2181077 output cardinality: 1500, row width=233
extension finished! takes 886.666ms to extend lpn
extension finished! takes 888.227ms to extend lpn
extension finished! takes 900.825ms to extend lpn
extension finished! takes 876.502ms to extend lpn
extension finished! takes 879.166ms to extend lpn
Operator #12 Sort ran for 21341.969000 ms, gate count: 28753560 output cardinality: 1500, row width=233
Runtime: 132.464 sec, CPU Time: 135.083 sec, CPU clock ticks: 1.35083e+08, CPU clock ticks per second: 1000000
End-to-end estimated gates: 1.36671e+08. observed gates: 164983547 gates, relative error (%)=17.1609
[Linux]Peak resident set size: 1901342720 bytes, current memory size: 1822941184 bytes.
Initial Memory: 1863495680 bytes, Peak Memory After Execution: 1901342720 bytes, Memory Usage: 37847040 bytes
Bandwidth: 0 Bps
party 1 send 0 bytes to party 2
party 1 send 0 bytes to party 3
party 1 send 0 bytes to TP 
total AND gate: 164983547
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.baseline_tpch_q5 (133520 ms)
[ RUN      ] GeneralizedComparisonTest.baseline_tpch_q8
Connecting to 127.0.0.1 on ports 7654, 65482 as 1
party 1 connected to TP
GB connected to 2
GB connected to 3
party 1 connected to TP
GB connected to 2
GB connected to 3
initializing cot
setup finished! takes 953.445ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 1901342720 bytes, current memory size: 1855590400 bytes.
1901342720
EMP mode: outsourced, storage mode: column store
Code version: 1acad5e9b300370ee59a2ce455a9fbf7c0094e4e
GFlags: --flagfile=	--alice_db=tpch_alice_150	--alice_host=127.0.0.1	--bob_db=tpch_bob_150	--ctrl_port=65482	--cutoff=100	--filter=*	--party=1	--port=7654	--storage=column	--unioned_db=tpch_unioned_150	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 1901342720 bytes, current memory size: 1855590400 bytes.
Original Tree : 
#13: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32 orders.o_year, #1 shared-float mkt_share) order by: {<0, ASC> }, cost est: 4570088, output card: 1500
    #12: Project<Bit> ((<0, P$0(32) shared-int32>, <1, $2 / $1 shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float mkt_share) order by: {<0, ASC> }, cost est: 5713500, output card: 1500
        #11: SortMergeAggregate<Bit> (group-by: (0) aggs: (SUM($1) null, SUM($2) null)) : (#0 shared-int32 orders.o_year, #1 shared-float null, #2 shared-float null) order by: {<0, ASC> }, cost est: 3450000, output card: 1500
            #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32 orders.o_year, #1 shared-float volume, #2 shared-float selected_volume) order by: {<0, ASC> }, cost est: 6032516, output card: 1500
                #10: Project<Bit> ((<0, P$0(32) shared-int32>, <1, P$2(32) shared-float>, <2, CASE($4, $2, SECRET FLOAT) shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float volume, #2 shared-float selected_volume) order by: {}, cost est: 0, output card: 1500
                    #9: KeyedJoin<Bit> (P$1(4) == P$3(4)) : (#0 shared-int32 orders.o_year, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float volume, #3 shared-int32(4) supplier.s_suppkey, #4 shared-bool nation_check) order by: {}, cost est: 195000, output card: 1500
                        #7: Project<Bit> ((<0, P$1(32) shared-int32>, <1, P$3(4) shared-int32>, <2, P$4(32) shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float volume) order by: {}, cost est: 0, output card: 1500
                            #6: KeyedJoin<Bit> (P$0(13) == P$2(13)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32 orders.o_year, #2 shared-int32(13) lineitem.l_orderkey, #3 shared-int32(4) lineitem.l_suppkey, #4 shared-float revenue) order by: {}, cost est: 148500000, output card: 1500
                                #3: Project<Bit> ((<0, P$1(13) shared-int32>, <1, P$3(32) shared-int32>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32 orders.o_year) order by: {}, cost est: 0, output card: 1500
                                    #2: KeyedJoin<Bit> (P$0(8) == P$2(8)) : (#0 shared-int32(8) customer.c_custkey, #1 shared-int32(13) orders.o_orderkey, #2 shared-int32(8) orders.o_custkey, #3 shared-int32 orders.o_year) order by: {}, cost est: 870000, output card: 1500
                                        #0: SecureSqlInput<Bit> ("SELECT c_custkey FROM customer c JOIN nation n1 ON c_nationkey = n_nationkey JOIN region ON r_regionkey = n_regionkey WHERE r_name = 'AFRICA'", tuple_count=29) : (#0 shared-int32(8) customer.c_custkey) order by: {}, cost est: 0, output card: 29
                                        #1: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_orderyear::INT AS o_year, NOT (o_orderdate >= date '1995-01-01' and o_orderdate < date '1996-12-31') dummy_tag FROM orders", tuple_count=1500) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-int32 orders.o_year) order by: {}, cost est: 0, output card: 1500
                                #5: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$1(4) shared-int32>, <2, $2 * (SECRET FLOAT - $3) shared-float>)) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float revenue) order by: {}, cost est: 6835500, output card: 1500
                                    #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_suppkey, l_extendedprice, l_discount,        CASE            WHEN p_type = 'LARGE ANODIZED STEEL' AND p_partkey = l_partkey THEN FALSE            ELSE TRUE            END AS dummy_tag FROM lineitem LEFT JOIN part ON p_partkey = l_partkey", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float lineitem.l_extendedprice, #3 shared-float lineitem.l_discount) order by: {}, cost est: 0, output card: 1500
                        #8: SecureSqlInput<Bit> ("SELECT s_suppkey, CASE WHEN n_name = 'KENYA' THEN true ELSE false END AS nation_check FROM supplier JOIN nation ON n_nationkey = s_nationkey", tuple_count=10) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-bool nation_check) order by: {}, cost est: 0, output card: 10

Operator #0 SecureSqlInput ran for 0.527000 ms, gate count: 0 output cardinality: 29, row width=9
Operator #1 SecureSqlInput ran for 10.836000 ms, gate count: 0 output cardinality: 1500, row width=54
Operator #2 KeyedJoin ran for 1001.250000 ms, gate count: 913500 output cardinality: 1500, row width=62
Operator #3 Project ran for 3.258000 ms, gate count: 0 output cardinality: 1500, row width=46
Operator #4 SecureSqlInput ran for 13.973000 ms, gate count: 0 output cardinality: 1500, row width=82
extension finished! takes 870.066ms to extend lpn
Operator #5 Project ran for 4714.508000 ms, gate count: 6835500 output cardinality: 1500, row width=50
extension finished! takes 868.074ms to extend lpn
extension finished! takes 864.12ms to extend lpn
extension finished! takes 880.022ms to extend lpn
extension finished! takes 861.574ms to extend lpn
extension finished! takes 877.863ms to extend lpn
extension finished! takes 861.296ms to extend lpn
extension finished! takes 872.336ms to extend lpn
extension finished! takes 860.141ms to extend lpn
extension finished! takes 859.956ms to extend lpn
extension finished! takes 874.621ms to extend lpn
extension finished! takes 859.908ms to extend lpn
extension finished! takes 861.598ms to extend lpn
extension finished! takes 860.317ms to extend lpn
extension finished! takes 875.214ms to extend lpn
extension finished! takes 859.878ms to extend lpn
extension finished! takes 859.572ms to extend lpn
extension finished! takes 878.791ms to extend lpn
extension finished! takes 862.064ms to extend lpn
extension finished! takes 1031ms to extend lpn
extension finished! takes 859.515ms to extend lpn
extension finished! takes 873.579ms to extend lpn
extension finished! takes 859.79ms to extend lpn
extension finished! takes 855.728ms to extend lpn
extension finished! takes 872.678ms to extend lpn
extension finished! takes 862.348ms to extend lpn
extension finished! takes 859.838ms to extend lpn
extension finished! takes 861.902ms to extend lpn
extension finished! takes 864.949ms to extend lpn
extension finished! takes 863.306ms to extend lpn
extension finished! takes 864.08ms to extend lpn
Operator #6 KeyedJoin ran for 594889.364000 ms, gate count: 150750000 output cardinality: 1500, row width=95
Operator #7 Project ran for 3.578000 ms, gate count: 0 output cardinality: 1500, row width=69
Operator #8 SecureSqlInput ran for 0.034000 ms, gate count: 0 output cardinality: 10, row width=6
Operator #9 KeyedJoin ran for 890.476000 ms, gate count: 210000 output cardinality: 1500, row width=74
Operator #10 Project ran for 204.372000 ms, gate count: 48000 output cardinality: 1500, row width=97
extension finished! takes 858.866ms to extend lpn
extension finished! takes 861.538ms to extend lpn
Operator #-1 Sort ran for 30249.214000 ms, gate count: 7101258 output cardinality: 1500, row width=97
Operator #11 SortMergeAggregate ran for 13850.289000 ms, gate count: 3251395 output cardinality: 1500, row width=97
extension finished! takes 870.561ms to extend lpn
Operator #12 Project ran for 24337.945000 ms, gate count: 5713500 output cardinality: 1500, row width=65
extension finished! takes 854.243ms to extend lpn
extension finished! takes 841.06ms to extend lpn
Operator #13 Sort ran for 24859.661000 ms, gate count: 5707146 output cardinality: 1500, row width=65
Runtime: 695.068 sec, CPU Time: 224.542 sec, CPU clock ticks: 2.24542e+08, CPU clock ticks per second: 1000000
End-to-end estimated gates: 1.76167e+08. observed gates: 180530299 gates, relative error (%)=2.41715
[Linux]Peak resident set size: 1903198208 bytes, current memory size: 1889120256 bytes.
Initial Memory: 1901342720 bytes, Peak Memory After Execution: 1903198208 bytes, Memory Usage: 1855488 bytes
Bandwidth: 0 Bps
party 1 send 0 bytes to party 2
party 1 send 0 bytes to party 3
party 1 send 0 bytes to TP 
total AND gate: 180530299
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.baseline_tpch_q8 (696143 ms)
[ RUN      ] GeneralizedComparisonTest.baseline_tpch_q9
Connecting to 127.0.0.1 on ports 7654, 65482 as 1
party 1 connected to TP
GB connected to 2
GB connected to 3
party 1 connected to TP
GB connected to 2
GB connected to 3
initializing cot
setup finished! takes 969.945ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 1903198208 bytes, current memory size: 1855115264 bytes.
1903198208
EMP mode: outsourced, storage mode: column store
Code version: 1acad5e9b300370ee59a2ce455a9fbf7c0094e4e
GFlags: --flagfile=	--alice_db=tpch_alice_150	--alice_host=127.0.0.1	--bob_db=tpch_bob_150	--ctrl_port=65482	--cutoff=100	--filter=*	--party=1	--port=7654	--storage=column	--unioned_db=tpch_unioned_150	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 1903198208 bytes, current memory size: 1855115264 bytes.
Original Tree : 
#12: Sort<Bit> ({<0, ASC> , <1, DESC> }) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 amount, #2 shared-float sum_profit) order by: {<0, ASC> , <1, DESC> }, cost est: 22987542, output card: 1500
    #11: SortMergeAggregate<Bit> (group-by: (0, 1) aggs: (SUM($2) sum_profit)) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 amount, #2 shared-float sum_profit) order by: {<0, ASC> , <1, ASC> }, cost est: 2325000, output card: 1500
        #-1: Sort<Bit> ({<0, ASC> , <1, ASC> }) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 amount, #2 shared-float o_year) order by: {<0, ASC> , <1, ASC> }, cost est: 22987542, output card: 1500
            #10: Project<Bit> ((<0, P$0(200) shared-varchar>, <1, P$3(32) shared-int32>, <2, P$2(32) shared-float>)) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 amount, #2 shared-float o_year) order by: {}, cost est: 0, output card: 1500
                #9: KeyedJoin<Bit> (P$1(13) == P$4(13)) : (#0 shared-varchar(25) nation.nation, #1 shared-int32(13) lineitem.l_orderkey, #2 shared-float amount, #3 shared-int32 o_year, #4 shared-int32(13) orders.o_orderkey) order by: {}, cost est: 139500000, output card: 1500
                    #7: Project<Bit> ((<0, P$0(200) shared-varchar>, <1, P$4(13) shared-int32>, <2, $8 - ($3 * $7) shared-float>)) : (#0 shared-varchar(25) nation.nation, #1 shared-int32(13) lineitem.l_orderkey, #2 shared-float amount) order by: {}, cost est: 6835500, output card: 1500
                        #6: KeyedJoin<Bit> ((P$2(4) == P$6(4)) AND (P$1(8) == P$5(8))) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32(8) partsupp.ps_partkey, #2 shared-int32(4) partsupp.ps_suppkey, #3 shared-float partsupp.ps_supplycost, #4 shared-int32(13) lineitem.l_orderkey, #5 shared-int32(8) lineitem.l_partkey, #6 shared-int32(4) lineitem.l_suppkey, #7 shared-float l_quantity, #8 shared-float revenue) order by: {}, cost est: 22848000, output card: 1500
                            #3: Project<Bit> ((<0, P$1(200) shared-varchar>, <1, P$2(8) shared-int32>, <2, P$3(4) shared-int32>, <3, P$4(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32(8) partsupp.ps_partkey, #2 shared-int32(4) partsupp.ps_suppkey, #3 shared-float partsupp.ps_supplycost) order by: {}, cost est: 0, output card: 56
                                #2: KeyedJoin<Bit> (P$0(4) == P$3(4)) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(8) partsupp.ps_partkey, #3 shared-int32(4) partsupp.ps_suppkey, #4 shared-float partsupp.ps_supplycost) order by: {}, cost est: 118720, output card: 56
                                    #0: SecureSqlInput<Bit> ("SELECT s_suppkey, n_name FROM supplier JOIN nation ON s_nationkey = n_nationkey", tuple_count=10) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-varchar(25) nation.n_name) order by: {}, cost est: 0, output card: 10
                                    #1: SecureSqlInput<Bit> ("SELECT ps_partkey, ps_suppkey, ps_supplycost FROM partsupp JOIN part ON ps_partkey = p_partkey WHERE p_name LIKE '%yellow%'", tuple_count=56) : (#0 shared-int32(8) partsupp.ps_partkey, #1 shared-int32(4) partsupp.ps_suppkey, #2 shared-float partsupp.ps_supplycost) order by: {}, cost est: 0, output card: 56
                            #5: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$1(8) shared-int32>, <2, P$2(4) shared-int32>, <3, P$3(32) shared-float>, <4, $4 * (SECRET FLOAT - $5) shared-float>)) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(8) lineitem.l_partkey, #2 shared-int32(4) lineitem.l_suppkey, #3 shared-float l_quantity, #4 shared-float revenue) order by: {}, cost est: 6835500, output card: 1500
                                #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_partkey, l_suppkey, l_quantity::float4, l_extendedprice, l_discount FROM lineitem", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(8) lineitem.l_partkey, #2 shared-int32(4) lineitem.l_suppkey, #3 shared-float l_quantity, #4 shared-float lineitem.l_extendedprice, #5 shared-float lineitem.l_discount) order by: {}, cost est: 0, output card: 1500
                    #8: SecureSqlInput<Bit> ("SELECT EXTRACT('year' FROM o_orderdate)::INT AS o_year, o_orderkey FROM orders", tuple_count=1500) : (#0 shared-int32 o_year, #1 shared-int32(13) orders.o_orderkey) order by: {}, cost est: 0, output card: 1500

Operator #0 SecureSqlInput ran for 0.716000 ms, gate count: 0 output cardinality: 10, row width=205
Operator #1 SecureSqlInput ran for 0.290000 ms, gate count: 0 output cardinality: 56, row width=45
Operator #2 KeyedJoin ran for 308.301000 ms, gate count: 119280 output cardinality: 56, row width=249
Operator #3 Project ran for 0.494000 ms, gate count: 0 output cardinality: 56, row width=245
Operator #4 SecureSqlInput ran for 23.431000 ms, gate count: 0 output cardinality: 1500, row width=122
extension finished! takes 885.271ms to extend lpn
Operator #5 Project ran for 4826.044000 ms, gate count: 6835500 output cardinality: 1500, row width=90
extension finished! takes 897.514ms to extend lpn
extension finished! takes 896.066ms to extend lpn
extension finished! takes 905.882ms to extend lpn
extension finished! takes 884.729ms to extend lpn
Operator #6 KeyedJoin ran for 53061.894000 ms, gate count: 22092000 output cardinality: 1500, row width=334
extension finished! takes 896.162ms to extend lpn
extension finished! takes 901.344ms to extend lpn
Operator #7 Project ran for 29116.880000 ms, gate count: 6835500 output cardinality: 1500, row width=246
Operator #8 SecureSqlInput ran for 7.772000 ms, gate count: 0 output cardinality: 1500, row width=46
extension finished! takes 910.864ms to extend lpn
extension finished! takes 896.293ms to extend lpn
extension finished! takes 898.28ms to extend lpn
extension finished! takes 908.913ms to extend lpn
extension finished! takes 897.036ms to extend lpn
extension finished! takes 897.397ms to extend lpn
extension finished! takes 892.866ms to extend lpn
extension finished! takes 893.101ms to extend lpn
extension finished! takes 902.517ms to extend lpn
extension finished! takes 896.448ms to extend lpn
extension finished! takes 895.562ms to extend lpn
extension finished! takes 894.486ms to extend lpn
extension finished! takes 908.106ms to extend lpn
extension finished! takes 895.763ms to extend lpn
extension finished! takes 895.875ms to extend lpn
extension finished! takes 900.579ms to extend lpn
extension finished! takes 893.391ms to extend lpn
extension finished! takes 909.469ms to extend lpn
extension finished! takes 896.055ms to extend lpn
extension finished! takes 893.861ms to extend lpn
extension finished! takes 905.848ms to extend lpn
extension finished! takes 892.579ms to extend lpn
extension finished! takes 895.242ms to extend lpn
extension finished! takes 895.739ms to extend lpn
extension finished! takes 893.637ms to extend lpn
extension finished! takes 911.889ms to extend lpn
extension finished! takes 894.651ms to extend lpn
extension finished! takes 892.748ms to extend lpn
Operator #9 KeyedJoin ran for 603806.792000 ms, gate count: 141750000 output cardinality: 1500, row width=291
Operator #10 Project ran for 14.107000 ms, gate count: 0 output cardinality: 1500, row width=265
extension finished! takes 889.426ms to extend lpn
extension finished! takes 892.879ms to extend lpn
extension finished! takes 901.288ms to extend lpn
extension finished! takes 893.027ms to extend lpn
extension finished! takes 891.421ms to extend lpn
extension finished! takes 890.282ms to extend lpn
Operator #-1 Sort ran for 136013.415000 ms, gate count: 31933878 output cardinality: 1500, row width=265
extension finished! takes 891.946ms to extend lpn
Operator #11 SortMergeAggregate ran for 9705.910000 ms, gate count: 2278512 output cardinality: 1500, row width=265
extension finished! takes 907.898ms to extend lpn
extension finished! takes 897.685ms to extend lpn
extension finished! takes 893.622ms to extend lpn
extension finished! takes 893.716ms to extend lpn
extension finished! takes 894.371ms to extend lpn
extension finished! takes 905.477ms to extend lpn
Operator #12 Sort ran for 136073.816000 ms, gate count: 31933878 output cardinality: 1500, row width=265
Runtime: 973.01 sec, CPU Time: 340.916 sec, CPU clock ticks: 3.40916e+08, CPU clock ticks per second: 1000000
End-to-end estimated gates: 2.24438e+08. observed gates: 243778548 gates, relative error (%)=7.93373
[Linux]Peak resident set size: 2003509248 bytes, current memory size: 1873678336 bytes.
Initial Memory: 1903198208 bytes, Peak Memory After Execution: 2003509248 bytes, Memory Usage: 100311040 bytes
Bandwidth: 0 Bps
party 1 send 0 bytes to party 2
party 1 send 0 bytes to party 3
party 1 send 0 bytes to TP 
total AND gate: 243778548
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.baseline_tpch_q9 (974108 ms)
[ RUN      ] GeneralizedComparisonTest.baseline_tpch_q18
Connecting to 127.0.0.1 on ports 7654, 65482 as 1
party 1 connected to TP
GB connected to 2
GB connected to 3
party 1 connected to TP
GB connected to 2
GB connected to 3
initializing cot
setup finished! takes 993.656ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 2003509248 bytes, current memory size: 1936830464 bytes.
2003509248
EMP mode: outsourced, storage mode: column store
Code version: 1acad5e9b300370ee59a2ce455a9fbf7c0094e4e
GFlags: --flagfile=	--alice_db=tpch_alice_150	--alice_host=127.0.0.1	--bob_db=tpch_bob_150	--ctrl_port=65482	--cutoff=100	--filter=*	--party=1	--port=7654	--storage=column	--unioned_db=tpch_unioned_150	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 2003509248 bytes, current memory size: 1936830464 bytes.
Original Tree : 
#14: Sort<Bit> ({<-1, ASC> , <4, DESC> , <3, ASC> }) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32(8) customer.c_custkey, #2 shared-int32(13) orders.o_orderkey, #3 shared-int64(28) orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float sum_qty) order by: {<-1, ASC> , <4, DESC> , <3, ASC> }, cost est: 487532, output card: 100
    #13: SortMergeAggregate<Bit> (group-by: (0, 1, 2, 3, 4) aggs: (SUM($5) sum_qty)) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32(8) customer.c_custkey, #2 shared-int32(13) orders.o_orderkey, #3 shared-int64(28) orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float sum_qty) order by: {<0, ASC> , <1, ASC> , <2, ASC> , <3, ASC> , <4, ASC> }, cost est: 2481000, output card: 1500
        #-1: Sort<Bit> ({<0, ASC> , <1, ASC> , <2, ASC> , <3, ASC> , <4, ASC> }) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32(8) customer.c_custkey, #2 shared-int32(13) orders.o_orderkey, #3 shared-int64(28) orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float l_quantity) order by: {<0, ASC> , <1, ASC> , <2, ASC> , <3, ASC> , <4, ASC> }, cost est: 27877536, output card: 1500
            #12: Project<Bit> ((<0, P$6(200) shared-varchar>, <1, P$5(8) shared-int32>, <2, P$0(13) shared-int32>, <3, P$3(28) shared-int64>, <4, P$2(32) shared-float>, <5, P$4(32) shared-float>)) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32(8) customer.c_custkey, #2 shared-int32(13) orders.o_orderkey, #3 shared-int64(28) orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float l_quantity) order by: {}, cost est: 0, output card: 1500
                #11: KeyedJoin<Bit> (P$1(8) == P$5(8)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate, #4 shared-float l_quantity, #5 shared-int32(8) customer.c_custkey, #6 shared-varchar(25) customer.c_name) order by: {}, cost est: 49500000, output card: 1500
                    #9: Project<Bit> ((<0, P$2(13) shared-int32>, <1, P$3(8) shared-int32>, <2, P$4(32) shared-float>, <3, P$5(28) shared-int64>, <4, P$1(32) shared-float>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate, #4 shared-float l_quantity) order by: {}, cost est: 0, output card: 1500
                        #8: KeyedJoin<Bit> (P$0(13) == P$2(13)) : (#0 shared-int32(13) lineitem.L2.l_orderkey, #1 shared-float sum_qty, #2 shared-int32(13) orders.o_orderkey, #3 shared-int32(8) orders.o_custkey, #4 shared-float orders.o_totalprice, #5 shared-int64(28) orders.o_orderdate) order by: {<0, ASC> }, cost est: 220500000, output card: 1500
                            #6: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$1(32) shared-float>)) : (#0 shared-int32(13) lineitem.L2.l_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 0, output card: 1500
                                #5: KeyedJoin<Bit> (P$0(13) == P$2(13)) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-float sum_qty, #2 shared-int32(13) lineitem.l_orderkey) order by: {<0, ASC> }, cost est: 67500000, output card: 1500
                                    #3: Filter<Bit> (P$1(32) > SECRET FLOAT) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 319500, output card: 1500
                                        #2: SortMergeAggregate<Bit> (group-by: (0) aggs: (SUM($1) sum_qty)) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 1671000, output card: 1500
                                            #1: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-float lineitem.l_quantity) order by: {<0, ASC> }, cost est: 2833454, output card: 1500
                                                #0: SecureSqlInput<Bit> ("SELECT l_orderkey, l_quantity FROM lineitem", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-float lineitem.l_quantity) order by: {}, cost est: 0, output card: 1500
                                    #4: SecureSqlInput<Bit> ("SELECT L2.l_orderkey FROM lineitem L2", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey) order by: {}, cost est: 0, output card: 1500
                            #7: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_totalprice, o_orderdate FROM orders", tuple_count=1500) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate) order by: {}, cost est: 0, output card: 1500
                    #10: SecureSqlInput<Bit> ("SELECT c_custkey, c_name FROM customer", tuple_count=150) : (#0 shared-int32(8) customer.c_custkey, #1 shared-varchar(25) customer.c_name) order by: {}, cost est: 0, output card: 150

Operator #0 SecureSqlInput ran for 410.311000 ms, gate count: 0 output cardinality: 1500, row width=46
Operator #1 Sort ran for 5444.918000 ms, gate count: 3311016 output cardinality: 1500, row width=46
Operator #2 SortMergeAggregate ran for 3457.622000 ms, gate count: 1623449 output cardinality: 1500, row width=46
extension finished! takes 873.296ms to extend lpn
Operator #3 Filter ran for 1178.363000 ms, gate count: 321000 output cardinality: 1500, row width=46
Operator #4 SecureSqlInput ran for 1.946000 ms, gate count: 0 output cardinality: 1500, row width=14
extension finished! takes 854.13ms to extend lpn
extension finished! takes 843.45ms to extend lpn
extension finished! takes 846.729ms to extend lpn
extension finished! takes 852.246ms to extend lpn
extension finished! takes 847.764ms to extend lpn
extension finished! takes 848.006ms to extend lpn
extension finished! takes 848.574ms to extend lpn
extension finished! takes 845.865ms to extend lpn
extension finished! takes 850.166ms to extend lpn
extension finished! takes 857.018ms to extend lpn
extension finished! takes 847.245ms to extend lpn
extension finished! takes 862.53ms to extend lpn
extension finished! takes 852.586ms to extend lpn
Operator #5 KeyedJoin ran for 289304.109000 ms, gate count: 69750000 output cardinality: 1500, row width=59
Operator #6 Project ran for 2.619000 ms, gate count: 0 output cardinality: 1500, row width=46
Operator #7 SecureSqlInput ran for 12.994000 ms, gate count: 0 output cardinality: 1500, row width=82
extension finished! takes 874.031ms to extend lpn
extension finished! takes 868.108ms to extend lpn
extension finished! takes 864.35ms to extend lpn
extension finished! takes 869.698ms to extend lpn
extension finished! takes 863.943ms to extend lpn
extension finished! takes 861.562ms to extend lpn
extension finished! takes 874.497ms to extend lpn
extension finished! takes 869.863ms to extend lpn
extension finished! takes 863.684ms to extend lpn
extension finished! takes 877.908ms to extend lpn
extension finished! takes 866.568ms to extend lpn
extension finished! takes 862.979ms to extend lpn
extension finished! takes 876.527ms to extend lpn
extension finished! takes 870.677ms to extend lpn
extension finished! takes 862.385ms to extend lpn
extension finished! takes 880.272ms to extend lpn
extension finished! takes 875.945ms to extend lpn
extension finished! takes 865.005ms to extend lpn
extension finished! takes 878.86ms to extend lpn
extension finished! takes 878.178ms to extend lpn
extension finished! takes 864.545ms to extend lpn
extension finished! takes 880.808ms to extend lpn
extension finished! takes 879.127ms to extend lpn
extension finished! takes 862.182ms to extend lpn
extension finished! takes 878.683ms to extend lpn
extension finished! takes 869.636ms to extend lpn
extension finished! takes 865.468ms to extend lpn
extension finished! takes 865.94ms to extend lpn
extension finished! takes 873.776ms to extend lpn
extension finished! takes 864.7ms to extend lpn
extension finished! takes 862.08ms to extend lpn
extension finished! takes 861.149ms to extend lpn
extension finished! takes 863.058ms to extend lpn
extension finished! takes 863.033ms to extend lpn
extension finished! takes 861.896ms to extend lpn
extension finished! takes 863.431ms to extend lpn
extension finished! takes 864.418ms to extend lpn
extension finished! takes 865.61ms to extend lpn
extension finished! takes 860.945ms to extend lpn
extension finished! takes 865.644ms to extend lpn
extension finished! takes 875.451ms to extend lpn
extension finished! takes 868.869ms to extend lpn
extension finished! takes 865.967ms to extend lpn
extension finished! takes 877.034ms to extend lpn
extension finished! takes 879.776ms to extend lpn
Operator #8 KeyedJoin ran for 948843.184000 ms, gate count: 222750000 output cardinality: 1500, row width=127
Operator #9 Project ran for 6.299000 ms, gate count: 0 output cardinality: 1500, row width=114
Operator #10 SecureSqlInput ran for 3.559000 ms, gate count: 0 output cardinality: 150, row width=209
extension finished! takes 879.715ms to extend lpn
extension finished! takes 880.609ms to extend lpn
extension finished! takes 878.84ms to extend lpn
extension finished! takes 877.287ms to extend lpn
extension finished! takes 895.808ms to extend lpn
extension finished! takes 885.022ms to extend lpn
extension finished! takes 878.245ms to extend lpn
extension finished! takes 885.179ms to extend lpn
extension finished! takes 892.256ms to extend lpn
extension finished! takes 881.184ms to extend lpn
Operator #11 KeyedJoin ran for 211804.151000 ms, gate count: 49725000 output cardinality: 1500, row width=322
Operator #12 Project ran for 16.756000 ms, gate count: 0 output cardinality: 1500, row width=314
extension finished! takes 892.901ms to extend lpn
extension finished! takes 894.608ms to extend lpn
extension finished! takes 892.511ms to extend lpn
extension finished! takes 896.263ms to extend lpn
extension finished! takes 908.621ms to extend lpn
extension finished! takes 900.114ms to extend lpn
extension finished! takes 899.06ms to extend lpn
extension finished! takes 909.114ms to extend lpn
extension finished! takes 909.636ms to extend lpn
extension finished! takes 894.559ms to extend lpn
extension finished! takes 889.616ms to extend lpn
Operator #-1 Sort ran for 232512.988000 ms, gate count: 54588198 output cardinality: 1500, row width=314
Operator #13 SortMergeAggregate ran for 11537.746000 ms, gate count: 2708725 output cardinality: 1500, row width=314
extension finished! takes 892.55ms to extend lpn
extension finished! takes 890.905ms to extend lpn
extension finished! takes 891.523ms to extend lpn
extension finished! takes 892.964ms to extend lpn
extension finished! takes 894.527ms to extend lpn
extension finished! takes 892.782ms to extend lpn
extension finished! takes 905.966ms to extend lpn
Operator #14 Sort ran for 149394.586000 ms, gate count: 35070630 output cardinality: 100, row width=314
Runtime: 1853.97 sec, CPU Time: 592.498 sec, CPU clock ticks: 5.92498e+08, CPU clock ticks per second: 1000000
End-to-end estimated gates: 3.7317e+08. observed gates: 439848018 gates, relative error (%)=15.1593
[Linux]Peak resident set size: 2092666880 bytes, current memory size: 1978732544 bytes.
Initial Memory: 2003509248 bytes, Peak Memory After Execution: 2092666880 bytes, Memory Usage: 89157632 bytes
Bandwidth: 0 Bps
party 1 send 0 bytes to party 2
party 1 send 0 bytes to party 3
party 1 send 0 bytes to TP 
total AND gate: 439848018
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.baseline_tpch_q18 (1855112 ms)
[ RUN      ] GeneralizedComparisonTest.cost_optimized_tpch_q1
Connecting to 127.0.0.1 on ports 7654, 65482 as 1
party 1 connected to TP
GB connected to 2
GB connected to 3
party 1 connected to TP
GB connected to 2
GB connected to 3
initializing cot
setup finished! takes 945.898ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 2092666880 bytes, current memory size: 2005995520 bytes.
2092666880
EMP mode: outsourced, storage mode: column store
Code version: 1acad5e9b300370ee59a2ce455a9fbf7c0094e4e
GFlags: --flagfile=	--alice_db=tpch_alice_150	--alice_host=127.0.0.1	--bob_db=tpch_bob_150	--ctrl_port=65482	--cutoff=100	--filter=*	--party=1	--port=7654	--storage=column	--unioned_db=tpch_unioned_150	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 2092666880 bytes, current memory size: 2005995520 bytes.
Original Tree : 
#4: Sort<Bit> ({<0, ASC> , <1, ASC> }) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty, #7 shared-float avg_price, #8 shared-float avg_disc, #9 shared-int64 count_order) order by: {<0, ASC> , <1, ASC> }, cost est: 4545, output card: 6
    #3: Project<Bit> ((<0, P$0(8) shared-varchar>, <1, P$1(8) shared-varchar>, <2, $2 + $15 shared-float>, <3, $3 + $16 shared-float>, <4, $4 + $17 shared-float>, <5, $5 + $18 shared-float>, <6, ($6 + $19) / ($7 + $20) shared-float>, <7, ($8 + $21) / ($9 + $22) shared-float>, <8, ($10 + $23) / ($11 + $24) shared-float>, <9, $12 + $25 shared-int64>)) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty, #7 shared-float avg_price, #8 shared-float avg_disc, #9 shared-int64 count_order) order by: {<0, ASC> , <1, ASC> }, cost est: 163596, output card: 6
        #2: MergeJoin<Bit> (no-op) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty_sum, #7 shared-float avg_qty_cnt, #8 shared-float avg_price_sum, #9 shared-float avg_price_cnt, #10 shared-float avg_discount_sum, #11 shared-float avg_discount_cnt, #12 shared-int64 cnt, #13 shared-varchar(1) l_returnflag, #14 shared-varchar(1) l_linestatus, #15 shared-float sum_qty, #16 shared-float sum_base_price, #17 shared-float sum_disc_price, #18 shared-float sum_charge, #19 shared-float avg_qty_sum, #20 shared-float avg_qty_cnt, #21 shared-float avg_price_sum, #22 shared-float avg_price_cnt, #23 shared-float avg_discount_sum, #24 shared-float avg_discount_cnt, #25 shared-int64 cnt) order by: {<0, ASC> , <1, ASC> }, cost est: 18, output card: 6
            #0: SecureSqlInput<Bit> ("WITH output_domain AS (
    SELECT  *
    FROM (VALUES('R'::char(1), 'F'::char(1)), ('A', 'F'), ('N', 'F'), ('R', 'O'), ('A', 'O'), ('N', 'O')) AS li(l_returnflag, l_linestatus)
    ORDER BY l_returnflag, l_linestatus),
     partial_aggs AS (
         SELECT l_returnflag, l_linestatus, SUM(l_quantity) sum_qty, SUM(l_extendedprice) sum_base_price,
                SUM(l_extendedprice*(1-l_discount)) sum_disc_price, SUM(l_extendedprice*(1-l_discount)*(1+l_tax)) sum_charge,
                SUM(l_quantity) avg_qty_sum, COUNT(l_quantity)::FLOAT4 avg_qty_cnt,
                 SUM(l_extendedprice) avg_price_sum, COUNT(l_extendedprice)::FLOAT4 avg_price_cnt,
                 SUM(l_discount) avg_discount_sum, COUNT(l_discount)::FLOAT4 avg_discount_cnt, COUNT(*) cnt
         FROM lineitem
         WHERE l_shipdate  <= date '1998-08-03'
         GROUP BY l_returnflag, l_linestatus
         ORDER BY l_returnflag, l_linestatus)
SELECT o.l_returnflag, o.l_linestatus, COALESCE(sum_qty, 0) sum_qty, COALESCE(sum_base_price, 0) sum_base_price, COALESCE(sum_disc_price, 0) sum_disc_price, COALESCE(sum_charge, 0) sum_charge, COALESCE(avg_qty_sum, 0) avg_qty_sum, COALESCE(avg_qty_cnt, 0) avg_qty_cnt,  COALESCE(avg_price_sum, 0) avg_price_sum, COALESCE(avg_price_cnt, 0) avg_price_cnt,  COALESCE(avg_discount_sum, 0) avg_discount_sum, COALESCE(avg_discount_cnt, 0) avg_discount_cnt,  COALESCE(cnt, 0)::BIGINT cnt, CASE WHEN p.l_returnflag IS NULL THEN true ELSE false END AS dummy_tag
FROM output_domain o LEFT JOIN partial_aggs p ON o.l_returnflag = p.l_returnflag AND o.l_linestatus = p.l_linestatus
ORDER BY o.l_returnflag, o.l_linestatus", tuple_count=6) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty_sum, #7 shared-float avg_qty_cnt, #8 shared-float avg_price_sum, #9 shared-float avg_price_cnt, #10 shared-float avg_discount_sum, #11 shared-float avg_discount_cnt, #12 shared-int64 cnt) order by: {<0, ASC> , <1, ASC> }, cost est: 0, output card: 6
            #1: SecureSqlInput<Bit> ("WITH output_domain AS (
    SELECT  *
    FROM (VALUES('R'::char(1), 'F'::char(1)), ('A', 'F'), ('N', 'F'), ('R', 'O'), ('A', 'O'), ('N', 'O')) AS li(l_returnflag, l_linestatus)
    ORDER BY l_returnflag, l_linestatus),
     partial_aggs AS (
         SELECT l_returnflag, l_linestatus, SUM(l_quantity) sum_qty, SUM(l_extendedprice) sum_base_price,
                SUM(l_extendedprice*(1-l_discount)) sum_disc_price, SUM(l_extendedprice*(1-l_discount)*(1+l_tax)) sum_charge,
                SUM(l_quantity) avg_qty_sum, COUNT(l_quantity)::FLOAT4 avg_qty_cnt,
                 SUM(l_extendedprice) avg_price_sum, COUNT(l_extendedprice)::FLOAT4 avg_price_cnt,
                 SUM(l_discount) avg_discount_sum, COUNT(l_discount)::FLOAT4 avg_discount_cnt, COUNT(*) cnt
         FROM lineitem
         WHERE l_shipdate  <= date '1998-08-03'
         GROUP BY l_returnflag, l_linestatus
         ORDER BY l_returnflag, l_linestatus)
SELECT o.l_returnflag, o.l_linestatus, COALESCE(sum_qty, 0) sum_qty, COALESCE(sum_base_price, 0) sum_base_price, COALESCE(sum_disc_price, 0) sum_disc_price, COALESCE(sum_charge, 0) sum_charge, COALESCE(avg_qty_sum, 0) avg_qty_sum, COALESCE(avg_qty_cnt, 0) avg_qty_cnt,  COALESCE(avg_price_sum, 0) avg_price_sum, COALESCE(avg_price_cnt, 0) avg_price_cnt,  COALESCE(avg_discount_sum, 0) avg_discount_sum, COALESCE(avg_discount_cnt, 0) avg_discount_cnt,  COALESCE(cnt, 0)::BIGINT cnt, CASE WHEN p.l_returnflag IS NULL THEN true ELSE false END AS dummy_tag
FROM output_domain o LEFT JOIN partial_aggs p ON o.l_returnflag = p.l_returnflag AND o.l_linestatus = p.l_linestatus
ORDER BY o.l_returnflag, o.l_linestatus", tuple_count=0) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty_sum, #7 shared-float avg_qty_cnt, #8 shared-float avg_price_sum, #9 shared-float avg_price_cnt, #10 shared-float avg_discount_sum, #11 shared-float avg_discount_cnt, #12 shared-int64 cnt) order by: {<0, ASC> , <1, ASC> }, cost est: 0, output card: 0

Total Plans : 1
Cost Optimized Plan : 
#3: Project<Bit> ((<0, P$0(8) shared-varchar>, <1, P$1(8) shared-varchar>, <2, $2 + $15 shared-float>, <3, $3 + $16 shared-float>, <4, $4 + $17 shared-float>, <5, $5 + $18 shared-float>, <6, ($6 + $19) / ($7 + $20) shared-float>, <7, ($8 + $21) / ($9 + $22) shared-float>, <8, ($10 + $23) / ($11 + $24) shared-float>, <9, $12 + $25 shared-int64>)) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float anonymous, #3 shared-float anonymous, #4 shared-float anonymous, #5 shared-float anonymous, #6 shared-float anonymous, #7 shared-float anonymous, #8 shared-float anonymous, #9 shared-int64 anonymous) order by: {<0, ASC> , <1, ASC> }, cost est: 163596, output card: 6
    #2: MergeJoin<Bit> (no-op) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty_sum, #7 shared-float avg_qty_cnt, #8 shared-float avg_price_sum, #9 shared-float avg_price_cnt, #10 shared-float avg_discount_sum, #11 shared-float avg_discount_cnt, #12 shared-int64 cnt, #13 shared-varchar(1) l_returnflag, #14 shared-varchar(1) l_linestatus, #15 shared-float sum_qty, #16 shared-float sum_base_price, #17 shared-float sum_disc_price, #18 shared-float sum_charge, #19 shared-float avg_qty_sum, #20 shared-float avg_qty_cnt, #21 shared-float avg_price_sum, #22 shared-float avg_price_cnt, #23 shared-float avg_discount_sum, #24 shared-float avg_discount_cnt, #25 shared-int64 cnt) order by: {<0, ASC> , <1, ASC> }, cost est: 18, output card: 6
        #0: SecureSqlInput<Bit> ("WITH output_domain AS (
    SELECT  *
    FROM (VALUES('R'::char(1), 'F'::char(1)), ('A', 'F'), ('N', 'F'), ('R', 'O'), ('A', 'O'), ('N', 'O')) AS li(l_returnflag, l_linestatus)
    ORDER BY l_returnflag, l_linestatus),
     partial_aggs AS (
         SELECT l_returnflag, l_linestatus, SUM(l_quantity) sum_qty, SUM(l_extendedprice) sum_base_price,
                SUM(l_extendedprice*(1-l_discount)) sum_disc_price, SUM(l_extendedprice*(1-l_discount)*(1+l_tax)) sum_charge,
                SUM(l_quantity) avg_qty_sum, COUNT(l_quantity)::FLOAT4 avg_qty_cnt,
                 SUM(l_extendedprice) avg_price_sum, COUNT(l_extendedprice)::FLOAT4 avg_price_cnt,
                 SUM(l_discount) avg_discount_sum, COUNT(l_discount)::FLOAT4 avg_discount_cnt, COUNT(*) cnt
         FROM lineitem
         WHERE l_shipdate  <= date '1998-08-03'
         GROUP BY l_returnflag, l_linestatus
         ORDER BY l_returnflag, l_linestatus)
SELECT o.l_returnflag, o.l_linestatus, COALESCE(sum_qty, 0) sum_qty, COALESCE(sum_base_price, 0) sum_base_price, COALESCE(sum_disc_price, 0) sum_disc_price, COALESCE(sum_charge, 0) sum_charge, COALESCE(avg_qty_sum, 0) avg_qty_sum, COALESCE(avg_qty_cnt, 0) avg_qty_cnt,  COALESCE(avg_price_sum, 0) avg_price_sum, COALESCE(avg_price_cnt, 0) avg_price_cnt,  COALESCE(avg_discount_sum, 0) avg_discount_sum, COALESCE(avg_discount_cnt, 0) avg_discount_cnt,  COALESCE(cnt, 0)::BIGINT cnt, CASE WHEN p.l_returnflag IS NULL THEN true ELSE false END AS dummy_tag
FROM output_domain o LEFT JOIN partial_aggs p ON o.l_returnflag = p.l_returnflag AND o.l_linestatus = p.l_linestatus
ORDER BY o.l_returnflag, o.l_linestatus", tuple_count=6) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty_sum, #7 shared-float avg_qty_cnt, #8 shared-float avg_price_sum, #9 shared-float avg_price_cnt, #10 shared-float avg_discount_sum, #11 shared-float avg_discount_cnt, #12 shared-int64 cnt) order by: {<0, ASC> , <1, ASC> }, cost est: 0, output card: 6
        #1: SecureSqlInput<Bit> ("WITH output_domain AS (
    SELECT  *
    FROM (VALUES('R'::char(1), 'F'::char(1)), ('A', 'F'), ('N', 'F'), ('R', 'O'), ('A', 'O'), ('N', 'O')) AS li(l_returnflag, l_linestatus)
    ORDER BY l_returnflag, l_linestatus),
     partial_aggs AS (
         SELECT l_returnflag, l_linestatus, SUM(l_quantity) sum_qty, SUM(l_extendedprice) sum_base_price,
                SUM(l_extendedprice*(1-l_discount)) sum_disc_price, SUM(l_extendedprice*(1-l_discount)*(1+l_tax)) sum_charge,
                SUM(l_quantity) avg_qty_sum, COUNT(l_quantity)::FLOAT4 avg_qty_cnt,
                 SUM(l_extendedprice) avg_price_sum, COUNT(l_extendedprice)::FLOAT4 avg_price_cnt,
                 SUM(l_discount) avg_discount_sum, COUNT(l_discount)::FLOAT4 avg_discount_cnt, COUNT(*) cnt
         FROM lineitem
         WHERE l_shipdate  <= date '1998-08-03'
         GROUP BY l_returnflag, l_linestatus
         ORDER BY l_returnflag, l_linestatus)
SELECT o.l_returnflag, o.l_linestatus, COALESCE(sum_qty, 0) sum_qty, COALESCE(sum_base_price, 0) sum_base_price, COALESCE(sum_disc_price, 0) sum_disc_price, COALESCE(sum_charge, 0) sum_charge, COALESCE(avg_qty_sum, 0) avg_qty_sum, COALESCE(avg_qty_cnt, 0) avg_qty_cnt,  COALESCE(avg_price_sum, 0) avg_price_sum, COALESCE(avg_price_cnt, 0) avg_price_cnt,  COALESCE(avg_discount_sum, 0) avg_discount_sum, COALESCE(avg_discount_cnt, 0) avg_discount_cnt,  COALESCE(cnt, 0)::BIGINT cnt, CASE WHEN p.l_returnflag IS NULL THEN true ELSE false END AS dummy_tag
FROM output_domain o LEFT JOIN partial_aggs p ON o.l_returnflag = p.l_returnflag AND o.l_linestatus = p.l_linestatus
ORDER BY o.l_returnflag, o.l_linestatus", tuple_count=0) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty_sum, #7 shared-float avg_qty_cnt, #8 shared-float avg_price_sum, #9 shared-float avg_price_cnt, #10 shared-float avg_discount_sum, #11 shared-float avg_discount_cnt, #12 shared-int64 cnt) order by: {<0, ASC> , <1, ASC> }, cost est: 0, output card: 0

Cost Optimization Time : 0.000313 sec
Operator #0 SecureSqlInput ran for 0.276000 ms, gate count: 0 output cardinality: 6, row width=401
Operator #1 SecureSqlInput ran for 0.014000 ms, gate count: 0 output cardinality: 0, row width=401
Operator #2 MergeJoin ran for 0.166000 ms, gate count: 0 output cardinality: 6, row width=801
Operator #3 Project ran for 107.524000 ms, gate count: 128100 output cardinality: 6, row width=305
Runtime: 0.195707 sec, CPU Time: 0.095999 sec, CPU clock ticks: 95999, CPU clock ticks per second: 1000000
End-to-end estimated gates: 163614. observed gates: 128100 gates, relative error (%)=27.7237
[Linux]Peak resident set size: 2092666880 bytes, current memory size: 2005995520 bytes.
Initial Memory: 2092666880 bytes, Peak Memory After Execution: 2092666880 bytes, Memory Usage: 0 bytes
Bandwidth: 0 Bps
party 1 send 0 bytes to party 2
party 1 send 0 bytes to party 3
party 1 send 0 bytes to TP 
total AND gate: 128100
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.cost_optimized_tpch_q1 (1312 ms)
[ RUN      ] GeneralizedComparisonTest.cost_optimized_tpch_q3
Connecting to 127.0.0.1 on ports 7654, 65482 as 1
party 1 connected to TP
GB connected to 2
GB connected to 3
party 1 connected to TP
GB connected to 2
GB connected to 3
initializing cot
setup finished! takes 1019.69ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 2092666880 bytes, current memory size: 2006421504 bytes.
2092666880
EMP mode: outsourced, storage mode: column store
Code version: 1acad5e9b300370ee59a2ce455a9fbf7c0094e4e
GFlags: --flagfile=	--alice_db=tpch_alice_150	--alice_host=127.0.0.1	--bob_db=tpch_bob_150	--ctrl_port=65482	--cutoff=100	--filter=*	--party=1	--port=7654	--storage=column	--unioned_db=tpch_unioned_150	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 2092666880 bytes, current memory size: 2006421504 bytes.
Original Tree : 
#9: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$3(32) shared-float>, <2, P$1(28) shared-int64>, <3, P$2(32) shared-int32>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-float revenue, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32 orders.o_shippriority) order by: {<-1, ASC> , <1, DESC> , <2, ASC> }, cost est: 0, output card: 10
    #8: Sort<Bit> ({<-1, ASC> , <3, DESC> , <1, ASC> }) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<-1, ASC> , <3, DESC> , <1, ASC> }, cost est: 6317, output card: 10
        #7: SortMergeAggregate<Bit> (group-by: (0, 1, 2) aggs: (SUM($3) revenue)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<0, ASC> , <1, ASC> , <2, ASC> }, cost est: 1854000, output card: 60175
            #6: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$1(28) shared-int64>, <2, P$2(32) shared-int32>, <3, P$4(32) shared-float>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<-1, ASC> , <0, ASC> }, cost est: 0, output card: 1500
                #5: KeyedSortMergeJoin<Bit> (P$0(13) == P$3(13) - sortCompatible) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-int32(13) lineitem.l_orderkey, #4 shared-float revenue) order by: {<-1, ASC> , <0, ASC> , <3, ASC> }, cost est: 40872566, output card: 1500
                    #3: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$2(28) shared-int64>, <2, P$3(32) shared-int32>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority) order by: {<0, ASC> }, cost est: 0, output card: 1500
                        #2: KeyedJoin<Bit> (P$1(8) == P$4(8)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32 orders.o_shippriority, #4 shared-int32(8) customer.c_custkey) order by: {<0, ASC> , <4, ASC> }, cost est: 4500000, output card: 1500
                            #0: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_orderdate, o_shippriority, NOT o_orderdate < DATE '1995-03-25' AS dummy_tag FROM orders ORDER BY o_orderkey, o_orderdate, o_shippriority", tuple_count=1500) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32 orders.o_shippriority) order by: {<0, ASC> }, cost est: 0, output card: 1500
                            #1: SecureSqlInput<Bit> ("SELECT c_custkey, NOT c_mktsegment = 'HOUSEHOLD' AS dummy_tag FROM customer ORDER BY c_custkey", tuple_count=150) : (#0 shared-int32(8) customer.c_custkey) order by: {<0, ASC> }, cost est: 0, output card: 150
                    #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_extendedprice * (1 - l_discount) AS revenue, NOT l_shipdate > DATE '1995-03-25' AS dummy_tag FROM lineitem ORDER BY l_orderkey", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 0, output card: 1500

Total Plans : 96
Cost Optimized Plan : 
#9: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$3(32) shared-float>, <2, P$1(28) shared-int64>, <3, P$2(32) shared-int32>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-float revenue, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32 orders.o_shippriority) order by: {<-1, ASC> , <1, DESC> , <2, ASC> }, cost est: 0, output card: 10
    #8: Sort<Bit> ({<-1, ASC> , <3, DESC> , <1, ASC> }) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<-1, ASC> , <3, DESC> , <1, ASC> }, cost est: 6317, output card: 10
        #7: SortMergeAggregate<Bit> (group-by: (0, 1, 2) aggs: (SUM($3) revenue)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<0, ASC> , <1, ASC> , <2, ASC> }, cost est: 1854000, output card: 60175
            #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<0, ASC> }, cost est: 5575507, output card: 1500
                #6: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$1(28) shared-int64>, <2, P$2(32) shared-int32>, <3, P$4(32) shared-float>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<-1, ASC> , <0, ASC> }, cost est: 0, output card: 1500
                    #5: KeyedSortMergeJoin<Bit> (P$0(13) == P$3(13) - sortCompatible) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-int32(13) lineitem.l_orderkey, #4 shared-float revenue) order by: {<-1, ASC> , <0, ASC> , <3, ASC> }, cost est: 40872566, output card: 1500
                        #3: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$2(28) shared-int64>, <2, P$3(32) shared-int32>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority) order by: {<0, ASC> }, cost est: 0, output card: 1500
                            #2: KeyedJoin<Bit> (P$1(8) == P$4(8)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32 orders.o_shippriority, #4 shared-int32(8) customer.c_custkey) order by: {<0, ASC> }, cost est: 4500000, output card: 1500
                                #0: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_orderdate, o_shippriority, NOT o_orderdate < DATE '1995-03-25' AS dummy_tag FROM orders ORDER BY o_orderkey, o_orderdate, o_shippriority", tuple_count=1500) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32 orders.o_shippriority) order by: {<0, ASC> }, cost est: 0, output card: 1500
                                #1: SecureSqlInput<Bit> ("SELECT c_custkey, NOT c_mktsegment = 'HOUSEHOLD' AS dummy_tag FROM customer ORDER BY c_custkey", tuple_count=150) : (#0 shared-int32(8) customer.c_custkey) order by: {}, cost est: 0, output card: 150
                        #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_extendedprice * (1 - l_discount) AS revenue, NOT l_shipdate > DATE '1995-03-25' AS dummy_tag FROM lineitem ORDER BY l_orderkey", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 0, output card: 1500

Cost Optimization Time : 0.011796 sec
Operator #0 SecureSqlInput ran for 14.018000 ms, gate count: 0 output cardinality: 1500, row width=82
Operator #1 SecureSqlInput ran for 0.189000 ms, gate count: 0 output cardinality: 150, row width=9
Operator #2 KeyedJoin ran for 18600.695000 ms, gate count: 4725000 output cardinality: 1500, row width=90
Operator #3 Project ran for 4.092000 ms, gate count: 0 output cardinality: 1500, row width=74
Operator #4 SecureSqlInput ran for 7.016000 ms, gate count: 0 output cardinality: 1500, row width=46
extension finished! takes 894.244ms to extend lpn
extension finished! takes 904.664ms to extend lpn
extension finished! takes 889.595ms to extend lpn
extension finished! takes 878.121ms to extend lpn
extension finished! takes 906.733ms to extend lpn
extension finished! takes 891.799ms to extend lpn
extension finished! takes 890.123ms to extend lpn
Operator #5 KeyedSortMergeJoin ran for 130197.659000 ms, gate count: 35140911 output cardinality: 1500, row width=119
Operator #6 Project ran for 5.369000 ms, gate count: 0 output cardinality: 1500, row width=106
extension finished! takes 865.218ms to extend lpn
Operator #-1 Sort ran for 24708.506000 ms, gate count: 5924976 output cardinality: 1500, row width=106
Operator #7 SortMergeAggregate ran for 7707.598000 ms, gate count: 1809325 output cardinality: 1500, row width=106
extension finished! takes 867.416ms to extend lpn
extension finished! takes 870.312ms to extend lpn
extension finished! takes 883.773ms to extend lpn
extension finished! takes 867.433ms to extend lpn
extension finished! takes 862.379ms to extend lpn
Operator #8 Sort ran for 110835.100000 ms, gate count: 26008902 output cardinality: 10, row width=106
Operator #9 Project ran for 0.059000 ms, gate count: 0 output cardinality: 10, row width=106
Runtime: 292.119 sec, CPU Time: 77.5592 sec, CPU clock ticks: 7.75592e+07, CPU clock ticks per second: 1000000
End-to-end estimated gates: 5.28084e+07. observed gates: 68884114 gates, relative error (%)=23.3373
[Linux]Peak resident set size: 2178342912 bytes, current memory size: 2059636736 bytes.
Initial Memory: 2092666880 bytes, Peak Memory After Execution: 2178342912 bytes, Memory Usage: 85676032 bytes
Bandwidth: 0 Bps
party 1 send 0 bytes to party 2
party 1 send 0 bytes to party 3
party 1 send 0 bytes to TP 
total AND gate: 68884114
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.cost_optimized_tpch_q3 (293265 ms)
[ RUN      ] GeneralizedComparisonTest.cost_optimized_tpch_q5
Connecting to 127.0.0.1 on ports 7654, 65482 as 1
party 1 connected to TP
GB connected to 2
GB connected to 3
party 1 connected to TP
GB connected to 2
GB connected to 3
initializing cot
setup finished! takes 956.717ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 2178342912 bytes, current memory size: 2059649024 bytes.
2178342912
EMP mode: outsourced, storage mode: column store
Code version: 1acad5e9b300370ee59a2ce455a9fbf7c0094e4e
GFlags: --flagfile=	--alice_db=tpch_alice_150	--alice_host=127.0.0.1	--bob_db=tpch_bob_150	--ctrl_port=65482	--cutoff=100	--filter=*	--party=1	--port=7654	--storage=column	--unioned_db=tpch_unioned_150	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 2178342912 bytes, current memory size: 2059649024 bytes.
Original Tree : 
#11: Sort<Bit> ({<1, DESC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<1, DESC> }, cost est: 2583, output card: 5
    #10: SortMergeAggregate<Bit> (group-by: (0) aggs: (SUM($1) revenue)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 2229000, output card: 5
        #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 19925584, output card: 1500
            #9: Project<Bit> ((<0, P$4(200) shared-varchar>, <1, P$2(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<-1, ASC> }, cost est: 0, output card: 1500
                #8: KeyedSortMergeJoin<Bit> ((P$1(13) == P$5(13)) AND ($0 == $3) - not sort compatible, need sort in smj) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(13) lineitem.l_orderkey, #2 shared-float revenue, #3 shared-int32(5) customer.c_nationkey, #4 shared-varchar(25) nation.n_name, #5 shared-int32(13) orders.o_orderkey) order by: {<-1, ASC> , <1, ASC> , <5, ASC> , <0, ASC> , <3, ASC> }, cost est: 101961540, output card: 1500
                    #-1: Sort<Bit> ({<1, ASC> , <0, ASC> }) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(13) lineitem.l_orderkey, #2 shared-float revenue) order by: {<1, ASC> , <0, ASC> }, cost est: 3427566, output card: 1500
                        #3: Project<Bit> ((<0, P$1(5) shared-int32>, <1, P$2(13) shared-int32>, <2, P$4(32) shared-float>)) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(13) lineitem.l_orderkey, #2 shared-float revenue) order by: {}, cost est: 0, output card: 1500
                            #2: KeyedJoin<Bit> (P$0(4) == P$3(4)) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey, #2 shared-int32(13) lineitem.l_orderkey, #3 shared-int32(4) lineitem.l_suppkey, #4 shared-float revenue) order by: {<3, ASC> , <0, ASC> }, cost est: 25500, output card: 1500
                                #0: SecureSqlInput<Bit> ("SELECT s_suppkey, s_nationkey FROM supplier JOIN nation ON s_nationkey = n_nationkey JOIN region ON n_regionkey = r_regionkey WHERE r_name = 'EUROPE' ORDER BY s_suppkey", tuple_count=1) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey) order by: {<0, ASC> }, cost est: 0, output card: 1
                                #1: SecureSqlInput<Bit> ("SELECT l_orderkey, l_suppkey, l_extendedprice * (1 - l_discount) AS revenue FROM lineitem ORDER BY l_suppkey", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float revenue) order by: {<1, ASC> }, cost est: 0, output card: 1500
                    #-1: Sort<Bit> ({}) : (#0 shared-int32(5) customer.c_nationkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(13) orders.o_orderkey) order by: {}, cost est: 10008492, output card: 1500
                        #7: Project<Bit> ((<0, P$1(5) shared-int32>, <1, P$2(200) shared-varchar>, <2, P$3(13) shared-int32>)) : (#0 shared-int32(5) customer.c_nationkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(13) orders.o_orderkey) order by: {}, cost est: 0, output card: 1500
                            #6: KeyedJoin<Bit> (P$0(8) == P$4(8)) : (#0 shared-int32(8) customer.c_custkey, #1 shared-int32(5) customer.c_nationkey, #2 shared-varchar(25) nation.n_name, #3 shared-int32(13) orders.o_orderkey, #4 shared-int32(8) orders.o_custkey) order by: {<4, ASC> , <0, ASC> }, cost est: 9112500, output card: 1500
                                #4: SecureSqlInput<Bit> ("SELECT t2.c_custkey, t2.c_nationkey, t1.n_name FROM (SELECT r_regionkey, r_name FROM region WHERE r_name = 'EUROPE') AS t0 INNER JOIN (SELECT n_nationkey, n_name, n_regionkey FROM nation) AS t1 ON t0.r_regionkey = t1.n_regionkey INNER JOIN (SELECT c_custkey, c_nationkey FROM customer) AS t2 ON t1.n_nationkey = t2.c_nationkey ORDER BY t2.c_custkey ASC", tuple_count=27) : (#0 shared-int32(8) customer.c_custkey, #1 shared-int32(5) customer.c_nationkey, #2 shared-varchar(25) nation.n_name) order by: {<0, ASC> }, cost est: 0, output card: 27
                                #5: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, NOT (o_orderdate >= DATE '1993-01-01' AND o_orderdate < DATE '1994-01-01') AS dummy_tag FROM orders ORDER BY o_custkey, o_orderdate", tuple_count=1500) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey) order by: {<1, ASC> }, cost est: 0, output card: 1500

Total Plans : 72
Cost Optimized Plan : 
#11: Sort<Bit> ({<1, DESC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<1, DESC> }, cost est: 2583, output card: 5
    #10: NestedLoopAggregate<Bit> (group-by: (0) aggs: (SUM($1) revenue)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {}, cost est: 11385000, output card: 5
        #9: Project<Bit> ((<0, P$4(200) shared-varchar>, <1, P$2(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<-1, ASC> }, cost est: 0, output card: 1500
            #8: KeyedSortMergeJoin<Bit> ((P$1(13) == P$5(13)) AND ($0 == $3) - sortCompatible) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(13) lineitem.l_orderkey, #2 shared-float revenue, #3 shared-int32(5) customer.c_nationkey, #4 shared-varchar(25) nation.n_name, #5 shared-int32(13) orders.o_orderkey) order by: {<-1, ASC> , <1, ASC> , <5, ASC> , <0, ASC> , <3, ASC> }, cost est: 78197083, output card: 1500
                #3: Project<Bit> ((<0, P$1(5) shared-int32>, <1, P$2(13) shared-int32>, <2, P$4(32) shared-float>)) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(13) lineitem.l_orderkey, #2 shared-float revenue) order by: {<1, ASC> , <0, ASC> }, cost est: 0, output card: 1500
                    #2: KeyedJoin<Bit> (P$0(4) == P$3(4)) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey, #2 shared-int32(13) lineitem.l_orderkey, #3 shared-int32(4) lineitem.l_suppkey, #4 shared-float revenue) order by: {<2, ASC> , <1, ASC> }, cost est: 25500, output card: 1500
                        #0: SecureSqlInput<Bit> ("SELECT * FROM (SELECT s_suppkey, s_nationkey FROM supplier JOIN nation ON s_nationkey = n_nationkey JOIN region ON n_regionkey = r_regionkey WHERE r_name = 'EUROPE' ORDER BY s_suppkey) to_sort ORDER BY (2)  ASC ", tuple_count=1) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey) order by: {<1, ASC> }, cost est: 0, output card: 1
                        #1: SecureSqlInput<Bit> ("SELECT * FROM (SELECT l_orderkey, l_suppkey, l_extendedprice * (1 - l_discount) AS revenue FROM lineitem ORDER BY l_suppkey) to_sort ORDER BY (1)  ASC ", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float revenue) order by: {<0, ASC> }, cost est: 522258, output card: 1500
                #-1: Sort<Bit> ({<2, ASC> , <0, ASC> }) : (#0 shared-int32(5) customer.c_nationkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(13) orders.o_orderkey) order by: {<2, ASC> , <0, ASC> }, cost est: 11105314, output card: 1500
                    #-1: Sort<Bit> ({}) : (#0 shared-int32(5) customer.c_nationkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(13) orders.o_orderkey) order by: {}, cost est: 10008492, output card: 1500
                        #7: Project<Bit> ((<0, P$1(5) shared-int32>, <1, P$2(200) shared-varchar>, <2, P$3(13) shared-int32>)) : (#0 shared-int32(5) customer.c_nationkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(13) orders.o_orderkey) order by: {}, cost est: 0, output card: 1500
                            #6: KeyedJoin<Bit> (P$0(8) == P$4(8)) : (#0 shared-int32(8) customer.c_custkey, #1 shared-int32(5) customer.c_nationkey, #2 shared-varchar(25) nation.n_name, #3 shared-int32(13) orders.o_orderkey, #4 shared-int32(8) orders.o_custkey) order by: {<4, ASC> , <0, ASC> }, cost est: 9112500, output card: 1500
                                #4: SecureSqlInput<Bit> ("SELECT t2.c_custkey, t2.c_nationkey, t1.n_name FROM (SELECT r_regionkey, r_name FROM region WHERE r_name = 'EUROPE') AS t0 INNER JOIN (SELECT n_nationkey, n_name, n_regionkey FROM nation) AS t1 ON t0.r_regionkey = t1.n_regionkey INNER JOIN (SELECT c_custkey, c_nationkey FROM customer) AS t2 ON t1.n_nationkey = t2.c_nationkey ORDER BY t2.c_custkey ASC", tuple_count=27) : (#0 shared-int32(8) customer.c_custkey, #1 shared-int32(5) customer.c_nationkey, #2 shared-varchar(25) nation.n_name) order by: {<0, ASC> }, cost est: 0, output card: 27
                                #5: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, NOT (o_orderdate >= DATE '1993-01-01' AND o_orderdate < DATE '1994-01-01') AS dummy_tag FROM orders ORDER BY o_custkey, o_orderdate", tuple_count=1500) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey) order by: {<1, ASC> }, cost est: 0, output card: 1500

Cost Optimization Time : 0.009203 sec
Operator #0 SecureSqlInput ran for 0.515000 ms, gate count: 0 output cardinality: 1, row width=10
Operator #1 SecureSqlInput ran for 8.416000 ms, gate count: 0 output cardinality: 1500, row width=50
Operator #2 KeyedJoin ran for 378.383000 ms, gate count: 27000 output cardinality: 1500, row width=59
Operator #3 Project ran for 3.112000 ms, gate count: 0 output cardinality: 1500, row width=51
Operator #4 SecureSqlInput ran for 0.627000 ms, gate count: 0 output cardinality: 27, row width=214
Operator #5 SecureSqlInput ran for 3.544000 ms, gate count: 0 output cardinality: 1500, row width=22
extension finished! takes 899.145ms to extend lpn
Operator #6 KeyedJoin ran for 16797.341000 ms, gate count: 9153000 output cardinality: 1500, row width=235
Operator #7 Project ran for 12.425000 ms, gate count: 0 output cardinality: 1500, row width=219
extension finished! takes 883.902ms to extend lpn
extension finished! takes 896.725ms to extend lpn
Operator #-1 Sort ran for 23324.194000 ms, gate count: 9540954 output cardinality: 1500, row width=219
extension finished! takes 883.066ms to extend lpn
extension finished! takes 882.101ms to extend lpn
extension finished! takes 887.453ms to extend lpn
Operator #-1 Sort ran for 49336.359000 ms, gate count: 11457858 output cardinality: 1500, row width=219
extension finished! takes 897.717ms to extend lpn
extension finished! takes 940.589ms to extend lpn
extension finished! takes 943.169ms to extend lpn
extension finished! takes 952.538ms to extend lpn
extension finished! takes 949.146ms to extend lpn
extension finished! takes 951.51ms to extend lpn
extension finished! takes 954.52ms to extend lpn
extension finished! takes 953.389ms to extend lpn
extension finished! takes 951.675ms to extend lpn
extension finished! takes 939.833ms to extend lpn
extension finished! takes 992.963ms to extend lpn
extension finished! takes 974.542ms to extend lpn
extension finished! takes 949.59ms to extend lpn
Operator #8 KeyedSortMergeJoin ran for 284952.802000 ms, gate count: 97102511 output cardinality: 1500, row width=269
Operator #9 Project ran for 12.453000 ms, gate count: 0 output cardinality: 1500, row width=233
extension finished! takes 888.583ms to extend lpn
extension finished! takes 888.874ms to extend lpn
Operator #10 NestedLoopAggregate ran for 46462.204000 ms, gate count: 10942500 output cardinality: 5, row width=233
Operator #11 Sort ran for 24.868000 ms, gate count: 5940 output cardinality: 5, row width=233
Runtime: 421.387 sec, CPU Time: 129.819 sec, CPU clock ticks: 1.29819e+08, CPU clock ticks per second: 1000000
End-to-end estimated gates: 1.19836e+08. observed gates: 108050951 gates, relative error (%)=10.9074
[Linux]Peak resident set size: 2352418816 bytes, current memory size: 2069184512 bytes.
Initial Memory: 2178342912 bytes, Peak Memory After Execution: 2352418816 bytes, Memory Usage: 174075904 bytes
Bandwidth: 0 Bps
party 1 send 0 bytes to party 2
party 1 send 0 bytes to party 3
party 1 send 0 bytes to TP 
total AND gate: 108050951
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.cost_optimized_tpch_q5 (422481 ms)
[ RUN      ] GeneralizedComparisonTest.cost_optimized_tpch_q8
Connecting to 127.0.0.1 on ports 7654, 65482 as 1
party 1 connected to TP
GB connected to 2
GB connected to 3
party 1 connected to TP
GB connected to 2
GB connected to 3
initializing cot
setup finished! takes 1051.27ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 2352418816 bytes, current memory size: 2069200896 bytes.
2352418816
EMP mode: outsourced, storage mode: column store
Code version: 1acad5e9b300370ee59a2ce455a9fbf7c0094e4e
GFlags: --flagfile=	--alice_db=tpch_alice_150	--alice_host=127.0.0.1	--bob_db=tpch_bob_150	--ctrl_port=65482	--cutoff=100	--filter=*	--party=1	--port=7654	--storage=column	--unioned_db=tpch_unioned_150	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 2352418816 bytes, current memory size: 2069200896 bytes.
Original Tree : 
#12: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32 orders.o_year, #1 shared-float mkt_share) order by: {<0, ASC> }, cost est: 100, output card: 2
    #11: Project<Bit> ((<0, P$0(32) shared-int32>, <1, $2 / $1 shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float mkt_share) order by: {<0, ASC> }, cost est: 7618, output card: 2
        #10: SortMergeAggregate<Bit> (group-by: (0) aggs: (SUM($1) null, SUM($2) null)) : (#0 shared-int32 orders.o_year, #1 shared-float null, #2 shared-float null) order by: {<0, ASC> }, cost est: 3450000, output card: 2
            #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32 orders.o_year, #1 shared-float volume, #2 shared-float selected_volume) order by: {<0, ASC> }, cost est: 6032516, output card: 1500
                #9: Project<Bit> ((<0, P$1(32) shared-int32>, <1, P$3(32) shared-float>, <2, CASE($4, $3, SECRET FLOAT) shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float volume, #2 shared-float selected_volume) order by: {}, cost est: 0, output card: 1500
                    #8: KeyedJoin<Bit> (P$0(13) == P$2(13)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32 orders.o_year, #2 shared-int32(13) lineitem.l_orderkey, #3 shared-float volume, #4 shared-bool nation_check) order by: {}, cost est: 139500000, output card: 1500
                        #3: Project<Bit> ((<0, P$1(13) shared-int32>, <1, P$3(32) shared-int32>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32 orders.o_year) order by: {}, cost est: 0, output card: 1500
                            #2: KeyedJoin<Bit> (P$0(8) == P$2(8)) : (#0 shared-int32(8) customer.c_custkey, #1 shared-int32(13) orders.o_orderkey, #2 shared-int32(8) orders.o_custkey, #3 shared-int32 orders.o_year) order by: {<2, ASC> , <0, ASC> }, cost est: 870000, output card: 1500
                                #0: SecureSqlInput<Bit> ("SELECT c_custkey FROM customer c JOIN nation n1 ON c_nationkey = n_nationkey JOIN region ON r_regionkey = n_regionkey WHERE r_name = 'AFRICA' ORDER BY c_custkey", tuple_count=29) : (#0 shared-int32(8) customer.c_custkey) order by: {<0, ASC> }, cost est: 0, output card: 29
                                #1: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_orderyear::INT AS o_year, NOT (o_orderdate >= date '1995-01-01' and o_orderdate < date '1996-12-31') dummy_tag FROM orders ORDER BY o_custkey", tuple_count=1500) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-int32 orders.o_year) order by: {<1, ASC> }, cost est: 0, output card: 1500
                        #7: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$2(32) shared-float>, <2, P$4(1) shared-bool>)) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-float volume, #2 shared-bool nation_check) order by: {}, cost est: 0, output card: 1500
                            #6: KeyedJoin<Bit> (P$1(4) == P$3(4)) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float volume, #3 shared-int32(4) supplier.s_suppkey, #4 shared-bool nation_check) order by: {<1, ASC> , <3, ASC> }, cost est: 195000, output card: 1500
                                #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_suppkey, l_extendedprice * (1.0 - l_discount) AS volume,        CASE            WHEN p_type = 'LARGE ANODIZED STEEL' AND p_partkey = l_partkey THEN FALSE            ELSE TRUE            END AS dummy_tag FROM lineitem LEFT JOIN part ON p_partkey = l_partkey ORDER BY l_suppkey", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float volume) order by: {<1, ASC> }, cost est: 0, output card: 1500
                                #5: SecureSqlInput<Bit> ("SELECT s_suppkey, CASE WHEN n_name = 'KENYA' THEN true ELSE false END AS nation_check FROM supplier JOIN nation ON n_nationkey = s_nationkey ORDER BY s_suppkey", tuple_count=10) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-bool nation_check) order by: {<0, ASC> }, cost est: 0, output card: 10

Total Plans : 576
Cost Optimized Plan : 
#12: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32 orders.o_year, #1 shared-float mkt_share) order by: {<0, ASC> }, cost est: 100, output card: 2
    #11: Project<Bit> ((<0, P$0(32) shared-int32>, <1, $2 / $1 shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float anonymous) order by: {}, cost est: 7618, output card: 2
        #10: NestedLoopAggregate<Bit> (group-by: (0) aggs: (SUM($1) null, SUM($2) null)) : (#0 shared-int32 orders.o_year, #1 shared-float null, #2 shared-float null) order by: {}, cost est: 7092000, output card: 2
            #9: Project<Bit> ((<0, P$1(32) shared-int32>, <1, P$3(32) shared-float>, <2, CASE($4, $3, SECRET FLOAT) shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float volume, #2 shared-float anonymous) order by: {<-1, ASC> }, cost est: 0, output card: 1500
                #8: KeyedSortMergeJoin<Bit> (P$0(13) == P$2(13) - sortCompatible) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32 orders.o_year, #2 shared-int32(13) lineitem.l_orderkey, #3 shared-float volume, #4 shared-bool nation_check) order by: {<-1, ASC> , <0, ASC> , <2, ASC> }, cost est: 34110261, output card: 1500
                    #3: Project<Bit> ((<0, P$1(13) shared-int32>, <1, P$3(32) shared-int32>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32 orders.o_year) order by: {<0, ASC> }, cost est: 0, output card: 1500
                        #2: KeyedJoin<Bit> (P$0(8) == P$2(8)) : (#0 shared-int32(8) customer.c_custkey, #1 shared-int32(13) orders.o_orderkey, #2 shared-int32(8) orders.o_custkey, #3 shared-int32 orders.o_year) order by: {<1, ASC> }, cost est: 870000, output card: 1500
                            #0: SecureSqlInput<Bit> ("SELECT c_custkey FROM customer c JOIN nation n1 ON c_nationkey = n_nationkey JOIN region ON r_regionkey = n_regionkey WHERE r_name = 'AFRICA' ORDER BY c_custkey", tuple_count=29) : (#0 shared-int32(8) customer.c_custkey) order by: {}, cost est: 0, output card: 29
                            #1: SecureSqlInput<Bit> ("SELECT * FROM (SELECT o_orderkey, o_custkey, o_orderyear::INT AS o_year, NOT (o_orderdate >= date '1995-01-01' and o_orderdate < date '1996-12-31') dummy_tag FROM orders ORDER BY o_custkey) to_sort ORDER BY (1)  ASC ", tuple_count=1500) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-int32 orders.o_year) order by: {<0, ASC> }, cost est: 553910, output card: 1500
                    #7: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$2(32) shared-float>, <2, P$4(1) shared-bool>)) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-float volume, #2 shared-bool nation_check) order by: {<0, ASC> }, cost est: 0, output card: 1500
                        #6: KeyedJoin<Bit> (P$1(4) == P$3(4)) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float volume, #3 shared-int32(4) supplier.s_suppkey, #4 shared-bool nation_check) order by: {<0, ASC> }, cost est: 195000, output card: 1500
                            #4: SecureSqlInput<Bit> ("SELECT * FROM (SELECT l_orderkey, l_suppkey, l_extendedprice * (1.0 - l_discount) AS volume,        CASE            WHEN p_type = 'LARGE ANODIZED STEEL' AND p_partkey = l_partkey THEN FALSE            ELSE TRUE            END AS dummy_tag FROM lineitem LEFT JOIN part ON p_partkey = l_partkey ORDER BY l_suppkey) to_sort ORDER BY (1)  ASC ", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float volume) order by: {<0, ASC> }, cost est: 522258, output card: 1500
                            #5: SecureSqlInput<Bit> ("SELECT s_suppkey, CASE WHEN n_name = 'KENYA' THEN true ELSE false END AS nation_check FROM supplier JOIN nation ON n_nationkey = s_nationkey ORDER BY s_suppkey", tuple_count=10) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-bool nation_check) order by: {}, cost est: 0, output card: 10

Cost Optimization Time : 0.088726 sec
Operator #0 SecureSqlInput ran for 0.559000 ms, gate count: 0 output cardinality: 29, row width=9
Operator #1 SecureSqlInput ran for 9.080000 ms, gate count: 0 output cardinality: 1500, row width=54
Operator #2 KeyedJoin ran for 2807.796000 ms, gate count: 913500 output cardinality: 1500, row width=62
Operator #3 Project ran for 2.781000 ms, gate count: 0 output cardinality: 1500, row width=46
Operator #4 SecureSqlInput ran for 9.193000 ms, gate count: 0 output cardinality: 1500, row width=50
Operator #5 SecureSqlInput ran for 0.145000 ms, gate count: 0 output cardinality: 10, row width=6
Operator #6 KeyedJoin ran for 873.962000 ms, gate count: 210000 output cardinality: 1500, row width=55
Operator #7 Project ran for 2.545000 ms, gate count: 0 output cardinality: 1500, row width=47
extension finished! takes 910.922ms to extend lpn
extension finished! takes 885.917ms to extend lpn
extension finished! takes 902.811ms to extend lpn
extension finished! takes 890.452ms to extend lpn
extension finished! takes 890.464ms to extend lpn
Operator #8 KeyedSortMergeJoin ran for 102776.602000 ms, gate count: 25064109 output cardinality: 1500, row width=92
Operator #9 Project ran for 31.475000 ms, gate count: 48000 output cardinality: 1500, row width=97
extension finished! takes 871.651ms to extend lpn
Operator #10 NestedLoopAggregate ran for 27252.260000 ms, gate count: 6528000 output cardinality: 2, row width=97
Operator #11 Project ran for 31.990000 ms, gate count: 7618 output cardinality: 2, row width=65
Operator #12 Sort ran for 0.220000 ms, gate count: 131 output cardinality: 2, row width=65
Runtime: 133.943 sec, CPU Time: 36.8031 sec, CPU clock ticks: 3.68031e+07, CPU clock ticks per second: 1000000
End-to-end estimated gates: 4.2275e+07. observed gates: 31647858 gates, relative error (%)=33.5793
[Linux]Peak resident set size: 2352418816 bytes, current memory size: 2078720000 bytes.
Initial Memory: 2352418816 bytes, Peak Memory After Execution: 2352418816 bytes, Memory Usage: 0 bytes
Bandwidth: 0 Bps
party 1 send 0 bytes to party 2
party 1 send 0 bytes to party 3
party 1 send 0 bytes to TP 
total AND gate: 31647858
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.cost_optimized_tpch_q8 (135121 ms)
[ RUN      ] GeneralizedComparisonTest.cost_optimized_tpch_q9
Connecting to 127.0.0.1 on ports 7654, 65482 as 1
party 1 connected to TP
GB connected to 2
GB connected to 3
party 1 connected to TP
GB connected to 2
GB connected to 3
initializing cot
setup finished! takes 1003.5ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 2352418816 bytes, current memory size: 2101239808 bytes.
2352418816
