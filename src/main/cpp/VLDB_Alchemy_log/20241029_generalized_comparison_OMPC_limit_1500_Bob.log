[==========] Running 12 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 12 tests from GeneralizedComparisonTest
[ RUN      ] GeneralizedComparisonTest.baseline_tpch_q1
Connecting to 127.0.0.1 on ports 7654, 65482 as 2
party 2 connected to TP
party 2 connected to GB
party 2 connected to TP
party 2 connected to GB
initializing cot
setup finished! takes 1179.98ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 1408892928 bytes, current memory size: 1364373504 bytes.
1408892928
EMP mode: outsourced, storage mode: column store
Code version: 1acad5e9b300370ee59a2ce455a9fbf7c0094e4e
GFlags: --flagfile=	--alice_db=tpch_alice_150	--alice_host=127.0.0.1	--bob_db=tpch_bob_150	--ctrl_port=65482	--cutoff=100	--filter=*	--party=2	--port=7654	--storage=column	--unioned_db=tpch_unioned_150	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 1408892928 bytes, current memory size: 1365291008 bytes.
Original Tree : 
#3: Sort<Bit> ({<0, ASC> , <1, ASC> }) : (#0 shared-varchar(1) lineitem.l_returnflag, #1 shared-varchar(1) lineitem.l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty, #7 shared-float avg_price, #8 shared-float avg_disc, #9 shared-int64(11) count_order) order by: {<0, ASC> , <1, ASC> }, cost est: 12522041, output card: 1500
    #2: SortMergeAggregate<Bit> (group-by: (0, 1) aggs: (SUM($2) sum_qty, SUM($3) sum_base_price, SUM($5) sum_disc_price, SUM($6) sum_charge, AVG($2) avg_qty, AVG($3) avg_price, AVG($4) avg_disc, COUNT(*) count_order)) : (#0 shared-varchar(1) lineitem.l_returnflag, #1 shared-varchar(1) lineitem.l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty, #7 shared-float avg_price, #8 shared-float avg_disc, #9 shared-int64(11) count_order) order by: {<0, ASC> , <1, ASC> }, cost est: 33405000, output card: 1500
        #-1: Sort<Bit> ({<0, ASC> , <1, ASC> }) : (#0 shared-varchar(1) lineitem.l_returnflag, #1 shared-varchar(1) lineitem.l_linestatus, #2 shared-float lineitem.l_quantity, #3 shared-float lineitem.l_extendedprice, #4 shared-float lineitem.l_discount, #5 shared-float disc_price, #6 shared-float charge) order by: {<0, ASC> , <1, ASC> }, cost est: 9094475, output card: 1500
            #1: Project<Bit> ((<0, P$4(8) shared-varchar>, <1, P$5(8) shared-varchar>, <2, P$0(32) shared-float>, <3, P$1(32) shared-float>, <4, P$2(32) shared-float>, <5, $1 * (SECRET FLOAT - $2) shared-float>, <6, ($1 * (SECRET FLOAT - $2)) * (SECRET FLOAT + $3) shared-float>)) : (#0 shared-varchar(1) lineitem.l_returnflag, #1 shared-varchar(1) lineitem.l_linestatus, #2 shared-float lineitem.l_quantity, #3 shared-float lineitem.l_extendedprice, #4 shared-float lineitem.l_discount, #5 shared-float disc_price, #6 shared-float charge) order by: {}, cost est: 34177500, output card: 1500
                #0: SecureSqlInput<Bit> ("SELECT l_quantity, l_extendedprice, l_discount, l_tax, l_returnflag, l_linestatus, NOT l_shipdate <= DATE '1998-08-03' AS dummy_tag FROM lineitem", tuple_count=1500) : (#0 shared-float lineitem.l_quantity, #1 shared-float lineitem.l_extendedprice, #2 shared-float lineitem.l_discount, #3 shared-float lineitem.l_tax, #4 shared-varchar(1) lineitem.l_returnflag, #5 shared-varchar(1) lineitem.l_linestatus) order by: {}, cost est: 0, output card: 1500

Operator #0 SecureSqlInput ran for 27.235000 ms, gate count: 0 output cardinality: 1500, row width=145
extension finished! takes 945.622ms to extend lpn
extension finished! takes 877.821ms to extend lpn
extension finished! takes 843.302ms to extend lpn
extension finished! takes 830.281ms to extend lpn
Operator #1 Project ran for 15160.248000 ms, gate count: 20506500 output cardinality: 1500, row width=177
extension finished! takes 885.585ms to extend lpn
Operator #-1 Sort ran for 7092.929000 ms, gate count: 9279558 output cardinality: 1500, row width=177
extension finished! takes 857.318ms to extend lpn
extension finished! takes 863.542ms to extend lpn
extension finished! takes 843.343ms to extend lpn
extension finished! takes 847.023ms to extend lpn
extension finished! takes 848.988ms to extend lpn
extension finished! takes 851.867ms to extend lpn
extension finished! takes 850.813ms to extend lpn
Operator #2 SortMergeAggregate ran for 24543.303000 ms, gate count: 32971759 output cardinality: 1500, row width=252
extension finished! takes 843.087ms to extend lpn
extension finished! takes 867.163ms to extend lpn
extension finished! takes 868.664ms to extend lpn
Operator #3 Sort ran for 11941.946000 ms, gate count: 12547008 output cardinality: 1500, row width=252
Runtime: 58.7938 sec, CPU Time: 50.4279 sec, CPU clock ticks: 5.04279e+07, CPU clock ticks per second: 1000000
End-to-end estimated gates: 8.9199e+07. observed gates: 75304825 gates, relative error (%)=18.4506
[Linux]Peak resident set size: 1859694592 bytes, current memory size: 1811845120 bytes.
Initial Memory: 1408892928 bytes, Peak Memory After Execution: 1859694592 bytes, Memory Usage: 450801664 bytes
Bandwidth: 2.45919e+08 Bps
party 2 send 14458526400 bytes to party 1
party 2 send 0 bytes to TP 
total AND gate: 75304825
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.baseline_tpch_q1 (67992 ms)
[ RUN      ] GeneralizedComparisonTest.baseline_tpch_q3
Connecting to 127.0.0.1 on ports 7654, 65482 as 2
party 2 connected to TP
party 2 connected to GB
party 2 connected to TP
party 2 connected to GB
initializing cot
setup finished! takes 919.75ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 1859694592 bytes, current memory size: 1807556608 bytes.
1859694592
EMP mode: outsourced, storage mode: column store
Code version: 1acad5e9b300370ee59a2ce455a9fbf7c0094e4e
GFlags: --flagfile=	--alice_db=tpch_alice_150	--alice_host=127.0.0.1	--bob_db=tpch_bob_150	--ctrl_port=65482	--cutoff=100	--filter=*	--party=2	--port=7654	--storage=column	--unioned_db=tpch_unioned_150	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 1859694592 bytes, current memory size: 1807556608 bytes.
Original Tree : 
#10: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$3(32) shared-float>, <2, P$1(28) shared-int64>, <3, P$2(32) shared-int32>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-float revenue, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32 orders.o_shippriority) order by: {<-1, ASC> , <1, DESC> , <2, ASC> }, cost est: 0, output card: 10
    #9: Sort<Bit> ({<-1, ASC> , <3, DESC> , <1, ASC> }) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<-1, ASC> , <3, DESC> , <1, ASC> }, cost est: 6317, output card: 10
        #8: SortMergeAggregate<Bit> (group-by: (0, 1, 2) aggs: (SUM($3) revenue)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<0, ASC> , <1, ASC> , <2, ASC> }, cost est: 1854000, output card: 1500
            #-1: Sort<Bit> ({<0, ASC> , <1, ASC> , <2, ASC> }) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<0, ASC> , <1, ASC> , <2, ASC> }, cost est: 8591765, output card: 1500
                #7: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$1(28) shared-int64>, <2, P$2(32) shared-int32>, <3, P$4(32) shared-float>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {}, cost est: 0, output card: 1500
                    #6: KeyedJoin<Bit> (P$0(13) == P$3(13)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-int32(13) lineitem.l_orderkey, #4 shared-float revenue) order by: {}, cost est: 202500000, output card: 1500
                        #3: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$2(28) shared-int64>, <2, P$3(32) shared-int32>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority) order by: {}, cost est: 0, output card: 1500
                            #2: KeyedJoin<Bit> (P$1(8) == P$4(8)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32 orders.o_shippriority, #4 shared-int32(8) customer.c_custkey) order by: {}, cost est: 4500000, output card: 1500
                                #0: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_orderdate, o_shippriority, NOT o_orderdate < DATE '1995-03-25' AS dummy_tag FROM orders", tuple_count=1500) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32 orders.o_shippriority) order by: {}, cost est: 0, output card: 1500
                                #1: SecureSqlInput<Bit> ("SELECT c_custkey, NOT c_mktsegment = 'HOUSEHOLD' AS dummy_tag FROM customer", tuple_count=150) : (#0 shared-int32(8) customer.c_custkey) order by: {}, cost est: 0, output card: 150
                        #5: Project<Bit> ((<0, P$0(13) shared-int32>, <1, $1 * (SECRET FLOAT - $2) shared-float>)) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-float revenue) order by: {}, cost est: 6835500, output card: 1500
                            #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_extendedprice, l_discount, NOT l_shipdate > DATE '1995-03-25' AS dummy_tag FROM lineitem", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-float lineitem.l_extendedprice, #2 shared-float lineitem.l_discount) order by: {}, cost est: 0, output card: 1500

Operator #0 SecureSqlInput ran for 11.361000 ms, gate count: 0 output cardinality: 1500, row width=82
Operator #1 SecureSqlInput ran for 0.155000 ms, gate count: 0 output cardinality: 150, row width=9
Operator #2 KeyedJoin ran for 3678.439000 ms, gate count: 4725000 output cardinality: 1500, row width=90
Operator #3 Project ran for 3.516000 ms, gate count: 0 output cardinality: 1500, row width=74
Operator #4 SecureSqlInput ran for 10.269000 ms, gate count: 0 output cardinality: 1500, row width=78
extension finished! takes 859.659ms to extend lpn
extension finished! takes 865.141ms to extend lpn
Operator #5 Project ran for 5664.177000 ms, gate count: 6835500 output cardinality: 1500, row width=46
extension finished! takes 877.303ms to extend lpn
extension finished! takes 876.097ms to extend lpn
extension finished! takes 891.727ms to extend lpn
extension finished! takes 897.77ms to extend lpn
extension finished! takes 885.285ms to extend lpn
extension finished! takes 886.562ms to extend lpn
extension finished! takes 891.583ms to extend lpn
extension finished! takes 897.341ms to extend lpn
extension finished! takes 884.577ms to extend lpn
extension finished! takes 879.251ms to extend lpn
extension finished! takes 880.639ms to extend lpn
extension finished! takes 895.65ms to extend lpn
extension finished! takes 884.587ms to extend lpn
extension finished! takes 885.116ms to extend lpn
extension finished! takes 885.33ms to extend lpn
extension finished! takes 892.074ms to extend lpn
extension finished! takes 888.244ms to extend lpn
extension finished! takes 884.034ms to extend lpn
extension finished! takes 883.334ms to extend lpn
extension finished! takes 887.229ms to extend lpn
extension finished! takes 883.868ms to extend lpn
extension finished! takes 900.412ms to extend lpn
extension finished! takes 899.601ms to extend lpn
extension finished! takes 887.764ms to extend lpn
extension finished! takes 884.524ms to extend lpn
extension finished! takes 899.411ms to extend lpn
extension finished! takes 896.428ms to extend lpn
extension finished! takes 883.457ms to extend lpn
extension finished! takes 882.01ms to extend lpn
extension finished! takes 882.326ms to extend lpn
extension finished! takes 895.269ms to extend lpn
extension finished! takes 885.415ms to extend lpn
extension finished! takes 885.075ms to extend lpn
extension finished! takes 889.797ms to extend lpn
extension finished! takes 891.226ms to extend lpn
extension finished! takes 872.28ms to extend lpn
extension finished! takes 875.626ms to extend lpn
extension finished! takes 880.432ms to extend lpn
extension finished! takes 880.887ms to extend lpn
extension finished! takes 885.61ms to extend lpn
extension finished! takes 885.54ms to extend lpn
Operator #6 KeyedJoin ran for 158608.149000 ms, gate count: 204750000 output cardinality: 1500, row width=119
Operator #7 Project ran for 4.626000 ms, gate count: 0 output cardinality: 1500, row width=106
extension finished! takes 881.38ms to extend lpn
extension finished! takes 885.59ms to extend lpn
Operator #-1 Sort ran for 9426.286000 ms, gate count: 11414292 output cardinality: 1500, row width=106
Operator #8 SortMergeAggregate ran for 1082.502000 ms, gate count: 1809325 output cardinality: 1500, row width=106
extension finished! takes 883.833ms to extend lpn
extension finished! takes 899.195ms to extend lpn
extension finished! takes 898.897ms to extend lpn
extension finished! takes 882.593ms to extend lpn
extension finished! takes 881.093ms to extend lpn
Operator #9 Sort ran for 20081.657000 ms, gate count: 26008902 output cardinality: 10, row width=106
Operator #10 Project ran for 0.056000 ms, gate count: 0 output cardinality: 10, row width=106
Runtime: 198.599 sec, CPU Time: 153.04 sec, CPU clock ticks: 1.5304e+08, CPU clock ticks per second: 1000000
End-to-end estimated gates: 2.24288e+08. observed gates: 255543019 gates, relative error (%)=12.231
[Linux]Peak resident set size: 1859694592 bytes, current memory size: 1800589312 bytes.
Initial Memory: 1859694592 bytes, Peak Memory After Execution: 1859694592 bytes, Memory Usage: 0 bytes
Bandwidth: 2.47051e+08 Bps
party 2 send 49064259648 bytes to party 1
party 2 send 0 bytes to TP 
total AND gate: 255543019
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.baseline_tpch_q3 (199688 ms)
[ RUN      ] GeneralizedComparisonTest.baseline_tpch_q5
Connecting to 127.0.0.1 on ports 7654, 65482 as 2
party 2 connected to TP
party 2 connected to GB
party 2 connected to TP
party 2 connected to GB
initializing cot
setup finished! takes 940.695ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 1859694592 bytes, current memory size: 1800605696 bytes.
1859694592
EMP mode: outsourced, storage mode: column store
Code version: 1acad5e9b300370ee59a2ce455a9fbf7c0094e4e
GFlags: --flagfile=	--alice_db=tpch_alice_150	--alice_host=127.0.0.1	--bob_db=tpch_bob_150	--ctrl_port=65482	--cutoff=100	--filter=*	--party=2	--port=7654	--storage=column	--unioned_db=tpch_unioned_150	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 1859694592 bytes, current memory size: 1800605696 bytes.
Original Tree : 
#12: Sort<Bit> ({<1, DESC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<1, DESC> }, cost est: 12247836, output card: 1500
    #11: SortMergeAggregate<Bit> (group-by: (0) aggs: (SUM($1) revenue)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 2229000, output card: 1500
        #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 19925584, output card: 1500
            #10: Project<Bit> ((<0, P$5(200) shared-varchar>, <1, P$1(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {}, cost est: 0, output card: 1500
                #9: KeyedJoin<Bit> (($0 == $4) AND (P$2(8) == P$3(8))) : (#0 shared-int32(5) supplier.c_nationkey, #1 shared-float revenue, #2 shared-int32(8) orders.o_custkey, #3 shared-int32(8) customer.c_custkey, #4 shared-int32(5) customer.c_nationkey, #5 shared-varchar(25) nation.n_name) order by: {}, cost est: 9882000, output card: 1500
                    #7: Project<Bit> ((<0, P$0(5) shared-int32>, <1, P$2(32) shared-float>, <2, P$4(8) shared-int32>)) : (#0 shared-int32(5) supplier.c_nationkey, #1 shared-float revenue, #2 shared-int32(8) orders.o_custkey) order by: {}, cost est: 0, output card: 1500
                        #6: KeyedJoin<Bit> (P$1(13) == P$3(13)) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(13) lineitem.l_orderkey, #2 shared-float revenue, #3 shared-int32(13) orders.o_orderkey, #4 shared-int32(8) orders.o_custkey) order by: {}, cost est: 85500000, output card: 1500
                            #4: Project<Bit> ((<0, P$1(5) shared-int32>, <1, P$2(13) shared-int32>, <2, P$4(32) shared-float>)) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(13) lineitem.l_orderkey, #2 shared-float revenue) order by: {}, cost est: 0, output card: 1500
                                #3: KeyedJoin<Bit> (P$0(4) == P$3(4)) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey, #2 shared-int32(13) lineitem.l_orderkey, #3 shared-int32(4) lineitem.l_suppkey, #4 shared-float revenue) order by: {}, cost est: 51000, output card: 1500
                                    #0: SecureSqlInput<Bit> ("SELECT s_suppkey, s_nationkey FROM supplier JOIN nation ON s_nationkey = n_nationkey JOIN region ON n_regionkey = r_regionkey WHERE r_name = 'MIDDLE EAST '", tuple_count=2) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey) order by: {}, cost est: 0, output card: 2
                                    #2: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$1(4) shared-int32>, <2, $2 * (SECRET FLOAT - $3) shared-float>)) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float revenue) order by: {}, cost est: 6835500, output card: 1500
                                        #1: SecureSqlInput<Bit> ("SELECT l_orderkey, l_suppkey, l_extendedprice, l_discount FROM lineitem", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float lineitem.l_extendedprice, #3 shared-float lineitem.l_discount) order by: {}, cost est: 0, output card: 1500
                            #5: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, NOT (o_orderdate >= DATE '1993-01-01' AND o_orderdate < DATE '1994-01-01') AS dummy_tag FROM orders", tuple_count=1500) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey) order by: {}, cost est: 0, output card: 1500
                    #8: SecureSqlInput<Bit> ("SELECT t2.c_custkey, t2.c_nationkey, t1.n_name FROM (SELECT r_regionkey, r_name FROM region WHERE r_name = 'MIDDLE EAST ') AS t0 INNER JOIN (SELECT n_nationkey, n_name, n_regionkey FROM nation) AS t1 ON t0.r_regionkey = t1.n_regionkey INNER JOIN (SELECT c_custkey, c_nationkey FROM customer) AS t2 ON t1.n_nationkey = t2.c_nationkey ORDER BY t2.c_custkey ASC", tuple_count=27) : (#0 shared-int32(8) customer.c_custkey, #1 shared-int32(5) customer.c_nationkey, #2 shared-varchar(25) nation.n_name) order by: {}, cost est: 0, output card: 27

Operator #0 SecureSqlInput ran for 0.020000 ms, gate count: 0 output cardinality: 2, row width=10
Operator #1 SecureSqlInput ran for 12.140000 ms, gate count: 0 output cardinality: 1500, row width=82
extension finished! takes 873.374ms to extend lpn
Operator #2 Project ran for 4725.705000 ms, gate count: 6835500 output cardinality: 1500, row width=50
Operator #3 KeyedJoin ran for 32.081000 ms, gate count: 54000 output cardinality: 1500, row width=59
Operator #4 Project ran for 2.434000 ms, gate count: 0 output cardinality: 1500, row width=51
Operator #5 SecureSqlInput ran for 2.916000 ms, gate count: 0 output cardinality: 1500, row width=22
extension finished! takes 842.93ms to extend lpn
extension finished! takes 835.7ms to extend lpn
extension finished! takes 841.561ms to extend lpn
extension finished! takes 856.849ms to extend lpn
extension finished! takes 839.348ms to extend lpn
extension finished! takes 837.885ms to extend lpn
extension finished! takes 837.321ms to extend lpn
extension finished! takes 842.181ms to extend lpn
extension finished! takes 837.223ms to extend lpn
extension finished! takes 837.648ms to extend lpn
extension finished! takes 836.454ms to extend lpn
extension finished! takes 854.799ms to extend lpn
extension finished! takes 837.769ms to extend lpn
extension finished! takes 838.513ms to extend lpn
extension finished! takes 852.286ms to extend lpn
extension finished! takes 842.631ms to extend lpn
extension finished! takes 853.317ms to extend lpn
Operator #6 KeyedJoin ran for 71479.386000 ms, gate count: 87750000 output cardinality: 1500, row width=72
Operator #7 Project ran for 2.317000 ms, gate count: 0 output cardinality: 1500, row width=46
Operator #8 SecureSqlInput ran for 0.574000 ms, gate count: 0 output cardinality: 27, row width=214
extension finished! takes 855.62ms to extend lpn
extension finished! takes 856.815ms to extend lpn
extension finished! takes 851.899ms to extend lpn
Operator #9 KeyedJoin ran for 9607.309000 ms, gate count: 11745000 output cardinality: 1500, row width=259
Operator #10 Project ran for 13.214000 ms, gate count: 0 output cardinality: 1500, row width=233
extension finished! takes 886.496ms to extend lpn
extension finished! takes 868.958ms to extend lpn
extension finished! takes 874.171ms to extend lpn
extension finished! takes 873.437ms to extend lpn
extension finished! takes 891.5ms to extend lpn
Operator #-1 Sort ran for 22912.215000 ms, gate count: 27664410 output cardinality: 1500, row width=233
extension finished! takes 873.706ms to extend lpn
Operator #11 SortMergeAggregate ran for 2265.953000 ms, gate count: 2181077 output cardinality: 1500, row width=233
extension finished! takes 904.899ms to extend lpn
extension finished! takes 881.198ms to extend lpn
extension finished! takes 885.882ms to extend lpn
extension finished! takes 874.606ms to extend lpn
extension finished! takes 874.581ms to extend lpn
Operator #12 Sort ran for 21348.343000 ms, gate count: 28753560 output cardinality: 1500, row width=233
Runtime: 132.449 sec, CPU Time: 115.857 sec, CPU clock ticks: 1.15857e+08, CPU clock ticks per second: 1000000
End-to-end estimated gates: 1.36671e+08. observed gates: 164983547 gates, relative error (%)=17.1609
[Linux]Peak resident set size: 1899184128 bytes, current memory size: 1820942336 bytes.
Initial Memory: 1859694592 bytes, Peak Memory After Execution: 1899184128 bytes, Memory Usage: 39489536 bytes
Bandwidth: 2.39162e+08 Bps
party 2 send 31676841024 bytes to party 1
party 2 send 0 bytes to TP 
total AND gate: 164983547
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.baseline_tpch_q5 (133530 ms)
[ RUN      ] GeneralizedComparisonTest.baseline_tpch_q8
Connecting to 127.0.0.1 on ports 7654, 65482 as 2
party 2 connected to TP
party 2 connected to GB
party 2 connected to TP
party 2 connected to GB
initializing cot
setup finished! takes 916.025ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 1899184128 bytes, current memory size: 1853554688 bytes.
1899184128
EMP mode: outsourced, storage mode: column store
Code version: 1acad5e9b300370ee59a2ce455a9fbf7c0094e4e
GFlags: --flagfile=	--alice_db=tpch_alice_150	--alice_host=127.0.0.1	--bob_db=tpch_bob_150	--ctrl_port=65482	--cutoff=100	--filter=*	--party=2	--port=7654	--storage=column	--unioned_db=tpch_unioned_150	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 1899184128 bytes, current memory size: 1853554688 bytes.
Original Tree : 
#13: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32 orders.o_year, #1 shared-float mkt_share) order by: {<0, ASC> }, cost est: 4570088, output card: 1500
    #12: Project<Bit> ((<0, P$0(32) shared-int32>, <1, $2 / $1 shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float mkt_share) order by: {<0, ASC> }, cost est: 5713500, output card: 1500
        #11: SortMergeAggregate<Bit> (group-by: (0) aggs: (SUM($1) null, SUM($2) null)) : (#0 shared-int32 orders.o_year, #1 shared-float null, #2 shared-float null) order by: {<0, ASC> }, cost est: 3450000, output card: 1500
            #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32 orders.o_year, #1 shared-float volume, #2 shared-float selected_volume) order by: {<0, ASC> }, cost est: 6032516, output card: 1500
                #10: Project<Bit> ((<0, P$0(32) shared-int32>, <1, P$2(32) shared-float>, <2, CASE($4, $2, SECRET FLOAT) shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float volume, #2 shared-float selected_volume) order by: {}, cost est: 0, output card: 1500
                    #9: KeyedJoin<Bit> (P$1(4) == P$3(4)) : (#0 shared-int32 orders.o_year, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float volume, #3 shared-int32(4) supplier.s_suppkey, #4 shared-bool nation_check) order by: {}, cost est: 195000, output card: 1500
                        #7: Project<Bit> ((<0, P$1(32) shared-int32>, <1, P$3(4) shared-int32>, <2, P$4(32) shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float volume) order by: {}, cost est: 0, output card: 1500
                            #6: KeyedJoin<Bit> (P$0(13) == P$2(13)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32 orders.o_year, #2 shared-int32(13) lineitem.l_orderkey, #3 shared-int32(4) lineitem.l_suppkey, #4 shared-float revenue) order by: {}, cost est: 148500000, output card: 1500
                                #3: Project<Bit> ((<0, P$1(13) shared-int32>, <1, P$3(32) shared-int32>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32 orders.o_year) order by: {}, cost est: 0, output card: 1500
                                    #2: KeyedJoin<Bit> (P$0(8) == P$2(8)) : (#0 shared-int32(8) customer.c_custkey, #1 shared-int32(13) orders.o_orderkey, #2 shared-int32(8) orders.o_custkey, #3 shared-int32 orders.o_year) order by: {}, cost est: 870000, output card: 1500
                                        #0: SecureSqlInput<Bit> ("SELECT c_custkey FROM customer c JOIN nation n1 ON c_nationkey = n_nationkey JOIN region ON r_regionkey = n_regionkey WHERE r_name = 'AFRICA'", tuple_count=29) : (#0 shared-int32(8) customer.c_custkey) order by: {}, cost est: 0, output card: 29
                                        #1: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_orderyear::INT AS o_year, NOT (o_orderdate >= date '1995-01-01' and o_orderdate < date '1996-12-31') dummy_tag FROM orders", tuple_count=1500) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-int32 orders.o_year) order by: {}, cost est: 0, output card: 1500
                                #5: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$1(4) shared-int32>, <2, $2 * (SECRET FLOAT - $3) shared-float>)) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float revenue) order by: {}, cost est: 6835500, output card: 1500
                                    #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_suppkey, l_extendedprice, l_discount,        CASE            WHEN p_type = 'LARGE ANODIZED STEEL' AND p_partkey = l_partkey THEN FALSE            ELSE TRUE            END AS dummy_tag FROM lineitem LEFT JOIN part ON p_partkey = l_partkey", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float lineitem.l_extendedprice, #3 shared-float lineitem.l_discount) order by: {}, cost est: 0, output card: 1500
                        #8: SecureSqlInput<Bit> ("SELECT s_suppkey, CASE WHEN n_name = 'KENYA' THEN true ELSE false END AS nation_check FROM supplier JOIN nation ON n_nationkey = s_nationkey", tuple_count=10) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-bool nation_check) order by: {}, cost est: 0, output card: 10

Operator #0 SecureSqlInput ran for 0.044000 ms, gate count: 0 output cardinality: 29, row width=9
Operator #1 SecureSqlInput ran for 7.236000 ms, gate count: 0 output cardinality: 1500, row width=54
Operator #2 KeyedJoin ran for 998.065000 ms, gate count: 913500 output cardinality: 1500, row width=62
Operator #3 Project ran for 2.055000 ms, gate count: 0 output cardinality: 1500, row width=46
Operator #4 SecureSqlInput ran for 10.918000 ms, gate count: 0 output cardinality: 1500, row width=82
extension finished! takes 870.964ms to extend lpn
Operator #5 Project ran for 4722.284000 ms, gate count: 6835500 output cardinality: 1500, row width=50
extension finished! takes 867.131ms to extend lpn
extension finished! takes 879.573ms to extend lpn
extension finished! takes 895.481ms to extend lpn
extension finished! takes 890.352ms to extend lpn
extension finished! takes 874.994ms to extend lpn
extension finished! takes 891.714ms to extend lpn
extension finished! takes 884.788ms to extend lpn
extension finished! takes 882.177ms to extend lpn
extension finished! takes 883.187ms to extend lpn
extension finished! takes 891.227ms to extend lpn
extension finished! takes 893.799ms to extend lpn
extension finished! takes 884.096ms to extend lpn
extension finished! takes 881.182ms to extend lpn
extension finished! takes 880.422ms to extend lpn
extension finished! takes 892.417ms to extend lpn
extension finished! takes 875.718ms to extend lpn
extension finished! takes 880.693ms to extend lpn
extension finished! takes 875.116ms to extend lpn
extension finished! takes 878.036ms to extend lpn
extension finished! takes 884.212ms to extend lpn
extension finished! takes 886.811ms to extend lpn
extension finished! takes 877.365ms to extend lpn
extension finished! takes 886.638ms to extend lpn
extension finished! takes 882.403ms to extend lpn
extension finished! takes 876.178ms to extend lpn
extension finished! takes 874.272ms to extend lpn
extension finished! takes 885.503ms to extend lpn
extension finished! takes 881.65ms to extend lpn
extension finished! takes 881.795ms to extend lpn
extension finished! takes 874.195ms to extend lpn
Operator #6 KeyedJoin ran for 594825.947000 ms, gate count: 150750000 output cardinality: 1500, row width=95
Operator #7 Project ran for 2.749000 ms, gate count: 0 output cardinality: 1500, row width=69
Operator #8 SecureSqlInput ran for 0.038000 ms, gate count: 0 output cardinality: 10, row width=6
Operator #9 KeyedJoin ran for 907.390000 ms, gate count: 210000 output cardinality: 1500, row width=74
Operator #10 Project ran for 188.461000 ms, gate count: 48000 output cardinality: 1500, row width=97
extension finished! takes 889.225ms to extend lpn
extension finished! takes 869.176ms to extend lpn
Operator #-1 Sort ran for 30228.863000 ms, gate count: 7101258 output cardinality: 1500, row width=97
Operator #11 SortMergeAggregate ran for 13876.694000 ms, gate count: 3251395 output cardinality: 1500, row width=97
extension finished! takes 867.993ms to extend lpn
Operator #12 Project ran for 24312.040000 ms, gate count: 5713500 output cardinality: 1500, row width=65
extension finished! takes 884.317ms to extend lpn
extension finished! takes 862.668ms to extend lpn
Operator #13 Sort ran for 24953.474000 ms, gate count: 5707146 output cardinality: 1500, row width=65
Runtime: 695.074 sec, CPU Time: 113.141 sec, CPU clock ticks: 1.13141e+08, CPU clock ticks per second: 1000000
End-to-end estimated gates: 1.76167e+08. observed gates: 180530299 gates, relative error (%)=2.41715
[Linux]Peak resident set size: 1901080576 bytes, current memory size: 1891762176 bytes.
Initial Memory: 1899184128 bytes, Peak Memory After Execution: 1901080576 bytes, Memory Usage: 1896448 bytes
Bandwidth: 4.98678e+07 Bps
party 2 send 34661817408 bytes to party 1
party 2 send 0 bytes to TP 
total AND gate: 180530299
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.baseline_tpch_q8 (696140 ms)
[ RUN      ] GeneralizedComparisonTest.baseline_tpch_q9
Connecting to 127.0.0.1 on ports 7654, 65482 as 2
party 2 connected to TP
party 2 connected to GB
party 2 connected to TP
party 2 connected to GB
initializing cot
setup finished! takes 941.761ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 1901080576 bytes, current memory size: 1853542400 bytes.
1901080576
EMP mode: outsourced, storage mode: column store
Code version: 1acad5e9b300370ee59a2ce455a9fbf7c0094e4e
GFlags: --flagfile=	--alice_db=tpch_alice_150	--alice_host=127.0.0.1	--bob_db=tpch_bob_150	--ctrl_port=65482	--cutoff=100	--filter=*	--party=2	--port=7654	--storage=column	--unioned_db=tpch_unioned_150	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 1901080576 bytes, current memory size: 1853542400 bytes.
Original Tree : 
#12: Sort<Bit> ({<0, ASC> , <1, DESC> }) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 amount, #2 shared-float sum_profit) order by: {<0, ASC> , <1, DESC> }, cost est: 22987542, output card: 1500
    #11: SortMergeAggregate<Bit> (group-by: (0, 1) aggs: (SUM($2) sum_profit)) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 amount, #2 shared-float sum_profit) order by: {<0, ASC> , <1, ASC> }, cost est: 2325000, output card: 1500
        #-1: Sort<Bit> ({<0, ASC> , <1, ASC> }) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 amount, #2 shared-float o_year) order by: {<0, ASC> , <1, ASC> }, cost est: 22987542, output card: 1500
            #10: Project<Bit> ((<0, P$0(200) shared-varchar>, <1, P$3(32) shared-int32>, <2, P$2(32) shared-float>)) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 amount, #2 shared-float o_year) order by: {}, cost est: 0, output card: 1500
                #9: KeyedJoin<Bit> (P$1(13) == P$4(13)) : (#0 shared-varchar(25) nation.nation, #1 shared-int32(13) lineitem.l_orderkey, #2 shared-float amount, #3 shared-int32 o_year, #4 shared-int32(13) orders.o_orderkey) order by: {}, cost est: 139500000, output card: 1500
                    #7: Project<Bit> ((<0, P$0(200) shared-varchar>, <1, P$4(13) shared-int32>, <2, $8 - ($3 * $7) shared-float>)) : (#0 shared-varchar(25) nation.nation, #1 shared-int32(13) lineitem.l_orderkey, #2 shared-float amount) order by: {}, cost est: 6835500, output card: 1500
                        #6: KeyedJoin<Bit> ((P$2(4) == P$6(4)) AND (P$1(8) == P$5(8))) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32(8) partsupp.ps_partkey, #2 shared-int32(4) partsupp.ps_suppkey, #3 shared-float partsupp.ps_supplycost, #4 shared-int32(13) lineitem.l_orderkey, #5 shared-int32(8) lineitem.l_partkey, #6 shared-int32(4) lineitem.l_suppkey, #7 shared-float l_quantity, #8 shared-float revenue) order by: {}, cost est: 22848000, output card: 1500
                            #3: Project<Bit> ((<0, P$1(200) shared-varchar>, <1, P$2(8) shared-int32>, <2, P$3(4) shared-int32>, <3, P$4(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32(8) partsupp.ps_partkey, #2 shared-int32(4) partsupp.ps_suppkey, #3 shared-float partsupp.ps_supplycost) order by: {}, cost est: 0, output card: 56
                                #2: KeyedJoin<Bit> (P$0(4) == P$3(4)) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(8) partsupp.ps_partkey, #3 shared-int32(4) partsupp.ps_suppkey, #4 shared-float partsupp.ps_supplycost) order by: {}, cost est: 118720, output card: 56
                                    #0: SecureSqlInput<Bit> ("SELECT s_suppkey, n_name FROM supplier JOIN nation ON s_nationkey = n_nationkey", tuple_count=10) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-varchar(25) nation.n_name) order by: {}, cost est: 0, output card: 10
                                    #1: SecureSqlInput<Bit> ("SELECT ps_partkey, ps_suppkey, ps_supplycost FROM partsupp JOIN part ON ps_partkey = p_partkey WHERE p_name LIKE '%yellow%'", tuple_count=56) : (#0 shared-int32(8) partsupp.ps_partkey, #1 shared-int32(4) partsupp.ps_suppkey, #2 shared-float partsupp.ps_supplycost) order by: {}, cost est: 0, output card: 56
                            #5: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$1(8) shared-int32>, <2, P$2(4) shared-int32>, <3, P$3(32) shared-float>, <4, $4 * (SECRET FLOAT - $5) shared-float>)) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(8) lineitem.l_partkey, #2 shared-int32(4) lineitem.l_suppkey, #3 shared-float l_quantity, #4 shared-float revenue) order by: {}, cost est: 6835500, output card: 1500
                                #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_partkey, l_suppkey, l_quantity::float4, l_extendedprice, l_discount FROM lineitem", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(8) lineitem.l_partkey, #2 shared-int32(4) lineitem.l_suppkey, #3 shared-float l_quantity, #4 shared-float lineitem.l_extendedprice, #5 shared-float lineitem.l_discount) order by: {}, cost est: 0, output card: 1500
                    #8: SecureSqlInput<Bit> ("SELECT EXTRACT('year' FROM o_orderdate)::INT AS o_year, o_orderkey FROM orders", tuple_count=1500) : (#0 shared-int32 o_year, #1 shared-int32(13) orders.o_orderkey) order by: {}, cost est: 0, output card: 1500

Operator #0 SecureSqlInput ran for 0.209000 ms, gate count: 0 output cardinality: 10, row width=205
Operator #1 SecureSqlInput ran for 0.237000 ms, gate count: 0 output cardinality: 56, row width=45
Operator #2 KeyedJoin ran for 291.750000 ms, gate count: 119280 output cardinality: 56, row width=249
Operator #3 Project ran for 0.478000 ms, gate count: 0 output cardinality: 56, row width=245
Operator #4 SecureSqlInput ran for 18.649000 ms, gate count: 0 output cardinality: 1500, row width=122
extension finished! takes 870.289ms to extend lpn
Operator #5 Project ran for 4836.193000 ms, gate count: 6835500 output cardinality: 1500, row width=90
extension finished! takes 883.093ms to extend lpn
extension finished! takes 901.331ms to extend lpn
extension finished! takes 899.137ms to extend lpn
extension finished! takes 899.419ms to extend lpn
Operator #6 KeyedJoin ran for 52996.551000 ms, gate count: 22092000 output cardinality: 1500, row width=334
extension finished! takes 922.737ms to extend lpn
extension finished! takes 918.055ms to extend lpn
Operator #7 Project ran for 29112.605000 ms, gate count: 6835500 output cardinality: 1500, row width=246
Operator #8 SecureSqlInput ran for 5.517000 ms, gate count: 0 output cardinality: 1500, row width=46
extension finished! takes 906.461ms to extend lpn
extension finished! takes 923.515ms to extend lpn
extension finished! takes 923.448ms to extend lpn
extension finished! takes 906.775ms to extend lpn
extension finished! takes 904.257ms to extend lpn
extension finished! takes 913.473ms to extend lpn
extension finished! takes 922.426ms to extend lpn
extension finished! takes 906.153ms to extend lpn
extension finished! takes 909.032ms to extend lpn
extension finished! takes 911.546ms to extend lpn
extension finished! takes 910.121ms to extend lpn
extension finished! takes 909.149ms to extend lpn
extension finished! takes 912.379ms to extend lpn
extension finished! takes 913.113ms to extend lpn
extension finished! takes 918.611ms to extend lpn
extension finished! takes 904.369ms to extend lpn
extension finished! takes 923.252ms to extend lpn
extension finished! takes 921.026ms to extend lpn
extension finished! takes 919.956ms to extend lpn
extension finished! takes 906.499ms to extend lpn
extension finished! takes 916.9ms to extend lpn
extension finished! takes 929.405ms to extend lpn
extension finished! takes 908.811ms to extend lpn
extension finished! takes 905.548ms to extend lpn
extension finished! takes 919.548ms to extend lpn
extension finished! takes 927.408ms to extend lpn
extension finished! takes 921.172ms to extend lpn
extension finished! takes 909.21ms to extend lpn
Operator #9 KeyedJoin ran for 603790.606000 ms, gate count: 141750000 output cardinality: 1500, row width=291
Operator #10 Project ran for 13.728000 ms, gate count: 0 output cardinality: 1500, row width=265
extension finished! takes 913.811ms to extend lpn
extension finished! takes 917.506ms to extend lpn
extension finished! takes 907.869ms to extend lpn
extension finished! takes 909.961ms to extend lpn
extension finished! takes 909.527ms to extend lpn
extension finished! takes 909.669ms to extend lpn
Operator #-1 Sort ran for 136041.481000 ms, gate count: 31933878 output cardinality: 1500, row width=265
extension finished! takes 906.01ms to extend lpn
Operator #11 SortMergeAggregate ran for 9701.200000 ms, gate count: 2278512 output cardinality: 1500, row width=265
extension finished! takes 913.797ms to extend lpn
extension finished! takes 904.026ms to extend lpn
extension finished! takes 908.675ms to extend lpn
extension finished! takes 911.007ms to extend lpn
extension finished! takes 910.221ms to extend lpn
extension finished! takes 909.285ms to extend lpn
Operator #12 Sort ran for 136068.037000 ms, gate count: 31933878 output cardinality: 1500, row width=265
Runtime: 972.925 sec, CPU Time: 156.74 sec, CPU clock ticks: 1.5674e+08, CPU clock ticks per second: 1000000
End-to-end estimated gates: 2.24438e+08. observed gates: 243778548 gates, relative error (%)=7.93373
[Linux]Peak resident set size: 2003156992 bytes, current memory size: 1871511552 bytes.
Initial Memory: 1901080576 bytes, Peak Memory After Execution: 2003156992 bytes, Memory Usage: 102076416 bytes
Bandwidth: 4.8108e+07 Bps
party 2 send 46805481216 bytes to party 1
party 2 send 0 bytes to TP 
total AND gate: 243778548
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.baseline_tpch_q9 (974059 ms)
[ RUN      ] GeneralizedComparisonTest.baseline_tpch_q18
Connecting to 127.0.0.1 on ports 7654, 65482 as 2
party 2 connected to TP
party 2 connected to GB
party 2 connected to TP
party 2 connected to GB
initializing cot
setup finished! takes 999.235ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 2003156992 bytes, current memory size: 1905958912 bytes.
2003156992
EMP mode: outsourced, storage mode: column store
Code version: 1acad5e9b300370ee59a2ce455a9fbf7c0094e4e
GFlags: --flagfile=	--alice_db=tpch_alice_150	--alice_host=127.0.0.1	--bob_db=tpch_bob_150	--ctrl_port=65482	--cutoff=100	--filter=*	--party=2	--port=7654	--storage=column	--unioned_db=tpch_unioned_150	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 2003156992 bytes, current memory size: 1905958912 bytes.
Original Tree : 
#14: Sort<Bit> ({<-1, ASC> , <4, DESC> , <3, ASC> }) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32(8) customer.c_custkey, #2 shared-int32(13) orders.o_orderkey, #3 shared-int64(28) orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float sum_qty) order by: {<-1, ASC> , <4, DESC> , <3, ASC> }, cost est: 487532, output card: 100
    #13: SortMergeAggregate<Bit> (group-by: (0, 1, 2, 3, 4) aggs: (SUM($5) sum_qty)) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32(8) customer.c_custkey, #2 shared-int32(13) orders.o_orderkey, #3 shared-int64(28) orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float sum_qty) order by: {<0, ASC> , <1, ASC> , <2, ASC> , <3, ASC> , <4, ASC> }, cost est: 2481000, output card: 1500
        #-1: Sort<Bit> ({<0, ASC> , <1, ASC> , <2, ASC> , <3, ASC> , <4, ASC> }) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32(8) customer.c_custkey, #2 shared-int32(13) orders.o_orderkey, #3 shared-int64(28) orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float l_quantity) order by: {<0, ASC> , <1, ASC> , <2, ASC> , <3, ASC> , <4, ASC> }, cost est: 27877536, output card: 1500
            #12: Project<Bit> ((<0, P$6(200) shared-varchar>, <1, P$5(8) shared-int32>, <2, P$0(13) shared-int32>, <3, P$3(28) shared-int64>, <4, P$2(32) shared-float>, <5, P$4(32) shared-float>)) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32(8) customer.c_custkey, #2 shared-int32(13) orders.o_orderkey, #3 shared-int64(28) orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float l_quantity) order by: {}, cost est: 0, output card: 1500
                #11: KeyedJoin<Bit> (P$1(8) == P$5(8)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate, #4 shared-float l_quantity, #5 shared-int32(8) customer.c_custkey, #6 shared-varchar(25) customer.c_name) order by: {}, cost est: 49500000, output card: 1500
                    #9: Project<Bit> ((<0, P$2(13) shared-int32>, <1, P$3(8) shared-int32>, <2, P$4(32) shared-float>, <3, P$5(28) shared-int64>, <4, P$1(32) shared-float>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate, #4 shared-float l_quantity) order by: {}, cost est: 0, output card: 1500
                        #8: KeyedJoin<Bit> (P$0(13) == P$2(13)) : (#0 shared-int32(13) lineitem.L2.l_orderkey, #1 shared-float sum_qty, #2 shared-int32(13) orders.o_orderkey, #3 shared-int32(8) orders.o_custkey, #4 shared-float orders.o_totalprice, #5 shared-int64(28) orders.o_orderdate) order by: {<0, ASC> }, cost est: 220500000, output card: 1500
                            #6: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$1(32) shared-float>)) : (#0 shared-int32(13) lineitem.L2.l_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 0, output card: 1500
                                #5: KeyedJoin<Bit> (P$0(13) == P$2(13)) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-float sum_qty, #2 shared-int32(13) lineitem.l_orderkey) order by: {<0, ASC> }, cost est: 67500000, output card: 1500
                                    #3: Filter<Bit> (P$1(32) > SECRET FLOAT) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 319500, output card: 1500
                                        #2: SortMergeAggregate<Bit> (group-by: (0) aggs: (SUM($1) sum_qty)) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 1671000, output card: 1500
                                            #1: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-float lineitem.l_quantity) order by: {<0, ASC> }, cost est: 2833454, output card: 1500
                                                #0: SecureSqlInput<Bit> ("SELECT l_orderkey, l_quantity FROM lineitem", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-float lineitem.l_quantity) order by: {}, cost est: 0, output card: 1500
                                    #4: SecureSqlInput<Bit> ("SELECT L2.l_orderkey FROM lineitem L2", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey) order by: {}, cost est: 0, output card: 1500
                            #7: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_totalprice, o_orderdate FROM orders", tuple_count=1500) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate) order by: {}, cost est: 0, output card: 1500
                    #10: SecureSqlInput<Bit> ("SELECT c_custkey, c_name FROM customer", tuple_count=150) : (#0 shared-int32(8) customer.c_custkey, #1 shared-varchar(25) customer.c_name) order by: {}, cost est: 0, output card: 150

Operator #0 SecureSqlInput ran for 6.530000 ms, gate count: 0 output cardinality: 1500, row width=46
Operator #1 Sort ran for 5797.843000 ms, gate count: 3311016 output cardinality: 1500, row width=46
Operator #2 SortMergeAggregate ran for 3416.552000 ms, gate count: 1623449 output cardinality: 1500, row width=46
extension finished! takes 880.502ms to extend lpn
Operator #3 Filter ran for 1232.114000 ms, gate count: 321000 output cardinality: 1500, row width=46
Operator #4 SecureSqlInput ran for 1.936000 ms, gate count: 0 output cardinality: 1500, row width=14
extension finished! takes 888.947ms to extend lpn
extension finished! takes 875.407ms to extend lpn
extension finished! takes 873.036ms to extend lpn
extension finished! takes 866.172ms to extend lpn
extension finished! takes 868.405ms to extend lpn
extension finished! takes 861.958ms to extend lpn
extension finished! takes 859.398ms to extend lpn
extension finished! takes 866.002ms to extend lpn
extension finished! takes 888.471ms to extend lpn
extension finished! takes 868.567ms to extend lpn
extension finished! takes 869.484ms to extend lpn
extension finished! takes 868.621ms to extend lpn
extension finished! takes 869.345ms to extend lpn
Operator #5 KeyedJoin ran for 289256.439000 ms, gate count: 69750000 output cardinality: 1500, row width=59
Operator #6 Project ran for 3.343000 ms, gate count: 0 output cardinality: 1500, row width=46
Operator #7 SecureSqlInput ran for 13.807000 ms, gate count: 0 output cardinality: 1500, row width=82
extension finished! takes 878.778ms to extend lpn
extension finished! takes 889.237ms to extend lpn
extension finished! takes 890.593ms to extend lpn
extension finished! takes 884.937ms to extend lpn
extension finished! takes 891.551ms to extend lpn
extension finished! takes 906.661ms to extend lpn
extension finished! takes 882.415ms to extend lpn
extension finished! takes 889.39ms to extend lpn
extension finished! takes 881.116ms to extend lpn
extension finished! takes 873.871ms to extend lpn
extension finished! takes 881.267ms to extend lpn
extension finished! takes 896.378ms to extend lpn
extension finished! takes 902.585ms to extend lpn
extension finished! takes 886.534ms to extend lpn
extension finished! takes 887.974ms to extend lpn
extension finished! takes 874.178ms to extend lpn
extension finished! takes 877.772ms to extend lpn
extension finished! takes 881.532ms to extend lpn
extension finished! takes 893.594ms to extend lpn
extension finished! takes 882.43ms to extend lpn
extension finished! takes 892.931ms to extend lpn
extension finished! takes 888.915ms to extend lpn
extension finished! takes 886.292ms to extend lpn
extension finished! takes 899.183ms to extend lpn
extension finished! takes 888.769ms to extend lpn
extension finished! takes 887.486ms to extend lpn
extension finished! takes 886.376ms to extend lpn
extension finished! takes 898.743ms to extend lpn
extension finished! takes 880.706ms to extend lpn
extension finished! takes 896.4ms to extend lpn
extension finished! takes 893.806ms to extend lpn
extension finished! takes 874.068ms to extend lpn
extension finished! takes 878.943ms to extend lpn
extension finished! takes 878.418ms to extend lpn
extension finished! takes 905.309ms to extend lpn
extension finished! takes 881.837ms to extend lpn
extension finished! takes 885.584ms to extend lpn
extension finished! takes 884.326ms to extend lpn
extension finished! takes 886.314ms to extend lpn
extension finished! takes 883.853ms to extend lpn
extension finished! takes 890.087ms to extend lpn
extension finished! takes 887.686ms to extend lpn
extension finished! takes 890.556ms to extend lpn
extension finished! takes 887.098ms to extend lpn
extension finished! takes 890.431ms to extend lpn
Operator #8 KeyedJoin ran for 948833.641000 ms, gate count: 222750000 output cardinality: 1500, row width=127
Operator #9 Project ran for 7.438000 ms, gate count: 0 output cardinality: 1500, row width=114
Operator #10 SecureSqlInput ran for 3.574000 ms, gate count: 0 output cardinality: 150, row width=209
extension finished! takes 897.062ms to extend lpn
extension finished! takes 907.597ms to extend lpn
extension finished! takes 896.658ms to extend lpn
extension finished! takes 902.571ms to extend lpn
extension finished! takes 910.208ms to extend lpn
extension finished! takes 922.416ms to extend lpn
extension finished! takes 899.832ms to extend lpn
extension finished! takes 891.869ms to extend lpn
extension finished! takes 901.109ms to extend lpn
extension finished! takes 902.428ms to extend lpn
Operator #11 KeyedJoin ran for 211797.472000 ms, gate count: 49725000 output cardinality: 1500, row width=322
Operator #12 Project ran for 20.704000 ms, gate count: 0 output cardinality: 1500, row width=314
extension finished! takes 916.73ms to extend lpn
extension finished! takes 926.945ms to extend lpn
extension finished! takes 910.886ms to extend lpn
extension finished! takes 924.669ms to extend lpn
extension finished! takes 905.257ms to extend lpn
extension finished! takes 914.224ms to extend lpn
extension finished! takes 941.062ms to extend lpn
extension finished! takes 928.212ms to extend lpn
extension finished! takes 912.415ms to extend lpn
extension finished! takes 908.298ms to extend lpn
extension finished! takes 907.753ms to extend lpn
Operator #-1 Sort ran for 232516.242000 ms, gate count: 54588198 output cardinality: 1500, row width=314
Operator #13 SortMergeAggregate ran for 11524.304000 ms, gate count: 2708725 output cardinality: 1500, row width=314
extension finished! takes 931.556ms to extend lpn
extension finished! takes 925.373ms to extend lpn
extension finished! takes 929.609ms to extend lpn
extension finished! takes 941.515ms to extend lpn
extension finished! takes 907.209ms to extend lpn
extension finished! takes 911.934ms to extend lpn
extension finished! takes 929.658ms to extend lpn
Operator #14 Sort ran for 149403.784000 ms, gate count: 35070630 output cardinality: 100, row width=314
Runtime: 1853.88 sec, CPU Time: 284.123 sec, CPU clock ticks: 2.84123e+08, CPU clock ticks per second: 1000000
End-to-end estimated gates: 3.7317e+08. observed gates: 439848018 gates, relative error (%)=15.1593
[Linux]Peak resident set size: 2090065920 bytes, current memory size: 1976418304 bytes.
Initial Memory: 2003156992 bytes, Peak Memory After Execution: 2090065920 bytes, Memory Usage: 86908928 bytes
Bandwidth: 4.55537e+07 Bps
party 2 send 84450819456 bytes to party 1
party 2 send 0 bytes to TP 
total AND gate: 439848018
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.baseline_tpch_q18 (1855085 ms)
[ RUN      ] GeneralizedComparisonTest.cost_optimized_tpch_q1
Connecting to 127.0.0.1 on ports 7654, 65482 as 2
party 2 connected to TP
party 2 connected to GB
party 2 connected to TP
party 2 connected to GB
initializing cot
setup finished! takes 957.078ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 2090065920 bytes, current memory size: 2004287488 bytes.
2090065920
EMP mode: outsourced, storage mode: column store
Code version: 1acad5e9b300370ee59a2ce455a9fbf7c0094e4e
GFlags: --flagfile=	--alice_db=tpch_alice_150	--alice_host=127.0.0.1	--bob_db=tpch_bob_150	--ctrl_port=65482	--cutoff=100	--filter=*	--party=2	--port=7654	--storage=column	--unioned_db=tpch_unioned_150	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 2090065920 bytes, current memory size: 2004287488 bytes.
Original Tree : 
#4: Sort<Bit> ({<0, ASC> , <1, ASC> }) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty, #7 shared-float avg_price, #8 shared-float avg_disc, #9 shared-int64 count_order) order by: {<0, ASC> , <1, ASC> }, cost est: 4545, output card: 6
    #3: Project<Bit> ((<0, P$0(8) shared-varchar>, <1, P$1(8) shared-varchar>, <2, $2 + $15 shared-float>, <3, $3 + $16 shared-float>, <4, $4 + $17 shared-float>, <5, $5 + $18 shared-float>, <6, ($6 + $19) / ($7 + $20) shared-float>, <7, ($8 + $21) / ($9 + $22) shared-float>, <8, ($10 + $23) / ($11 + $24) shared-float>, <9, $12 + $25 shared-int64>)) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty, #7 shared-float avg_price, #8 shared-float avg_disc, #9 shared-int64 count_order) order by: {<0, ASC> , <1, ASC> }, cost est: 163596, output card: 6
        #2: MergeJoin<Bit> (no-op) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty_sum, #7 shared-float avg_qty_cnt, #8 shared-float avg_price_sum, #9 shared-float avg_price_cnt, #10 shared-float avg_discount_sum, #11 shared-float avg_discount_cnt, #12 shared-int64 cnt, #13 shared-varchar(1) l_returnflag, #14 shared-varchar(1) l_linestatus, #15 shared-float sum_qty, #16 shared-float sum_base_price, #17 shared-float sum_disc_price, #18 shared-float sum_charge, #19 shared-float avg_qty_sum, #20 shared-float avg_qty_cnt, #21 shared-float avg_price_sum, #22 shared-float avg_price_cnt, #23 shared-float avg_discount_sum, #24 shared-float avg_discount_cnt, #25 shared-int64 cnt) order by: {<0, ASC> , <1, ASC> }, cost est: 18, output card: 6
            #0: SecureSqlInput<Bit> ("WITH output_domain AS (
    SELECT  *
    FROM (VALUES('R'::char(1), 'F'::char(1)), ('A', 'F'), ('N', 'F'), ('R', 'O'), ('A', 'O'), ('N', 'O')) AS li(l_returnflag, l_linestatus)
    ORDER BY l_returnflag, l_linestatus),
     partial_aggs AS (
         SELECT l_returnflag, l_linestatus, SUM(l_quantity) sum_qty, SUM(l_extendedprice) sum_base_price,
                SUM(l_extendedprice*(1-l_discount)) sum_disc_price, SUM(l_extendedprice*(1-l_discount)*(1+l_tax)) sum_charge,
                SUM(l_quantity) avg_qty_sum, COUNT(l_quantity)::FLOAT4 avg_qty_cnt,
                 SUM(l_extendedprice) avg_price_sum, COUNT(l_extendedprice)::FLOAT4 avg_price_cnt,
                 SUM(l_discount) avg_discount_sum, COUNT(l_discount)::FLOAT4 avg_discount_cnt, COUNT(*) cnt
         FROM lineitem
         WHERE l_shipdate  <= date '1998-08-03'
         GROUP BY l_returnflag, l_linestatus
         ORDER BY l_returnflag, l_linestatus)
SELECT o.l_returnflag, o.l_linestatus, COALESCE(sum_qty, 0) sum_qty, COALESCE(sum_base_price, 0) sum_base_price, COALESCE(sum_disc_price, 0) sum_disc_price, COALESCE(sum_charge, 0) sum_charge, COALESCE(avg_qty_sum, 0) avg_qty_sum, COALESCE(avg_qty_cnt, 0) avg_qty_cnt,  COALESCE(avg_price_sum, 0) avg_price_sum, COALESCE(avg_price_cnt, 0) avg_price_cnt,  COALESCE(avg_discount_sum, 0) avg_discount_sum, COALESCE(avg_discount_cnt, 0) avg_discount_cnt,  COALESCE(cnt, 0)::BIGINT cnt, CASE WHEN p.l_returnflag IS NULL THEN true ELSE false END AS dummy_tag
FROM output_domain o LEFT JOIN partial_aggs p ON o.l_returnflag = p.l_returnflag AND o.l_linestatus = p.l_linestatus
ORDER BY o.l_returnflag, o.l_linestatus", tuple_count=6) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty_sum, #7 shared-float avg_qty_cnt, #8 shared-float avg_price_sum, #9 shared-float avg_price_cnt, #10 shared-float avg_discount_sum, #11 shared-float avg_discount_cnt, #12 shared-int64 cnt) order by: {<0, ASC> , <1, ASC> }, cost est: 0, output card: 6
            #1: SecureSqlInput<Bit> ("WITH output_domain AS (
    SELECT  *
    FROM (VALUES('R'::char(1), 'F'::char(1)), ('A', 'F'), ('N', 'F'), ('R', 'O'), ('A', 'O'), ('N', 'O')) AS li(l_returnflag, l_linestatus)
    ORDER BY l_returnflag, l_linestatus),
     partial_aggs AS (
         SELECT l_returnflag, l_linestatus, SUM(l_quantity) sum_qty, SUM(l_extendedprice) sum_base_price,
                SUM(l_extendedprice*(1-l_discount)) sum_disc_price, SUM(l_extendedprice*(1-l_discount)*(1+l_tax)) sum_charge,
                SUM(l_quantity) avg_qty_sum, COUNT(l_quantity)::FLOAT4 avg_qty_cnt,
                 SUM(l_extendedprice) avg_price_sum, COUNT(l_extendedprice)::FLOAT4 avg_price_cnt,
                 SUM(l_discount) avg_discount_sum, COUNT(l_discount)::FLOAT4 avg_discount_cnt, COUNT(*) cnt
         FROM lineitem
         WHERE l_shipdate  <= date '1998-08-03'
         GROUP BY l_returnflag, l_linestatus
         ORDER BY l_returnflag, l_linestatus)
SELECT o.l_returnflag, o.l_linestatus, COALESCE(sum_qty, 0) sum_qty, COALESCE(sum_base_price, 0) sum_base_price, COALESCE(sum_disc_price, 0) sum_disc_price, COALESCE(sum_charge, 0) sum_charge, COALESCE(avg_qty_sum, 0) avg_qty_sum, COALESCE(avg_qty_cnt, 0) avg_qty_cnt,  COALESCE(avg_price_sum, 0) avg_price_sum, COALESCE(avg_price_cnt, 0) avg_price_cnt,  COALESCE(avg_discount_sum, 0) avg_discount_sum, COALESCE(avg_discount_cnt, 0) avg_discount_cnt,  COALESCE(cnt, 0)::BIGINT cnt, CASE WHEN p.l_returnflag IS NULL THEN true ELSE false END AS dummy_tag
FROM output_domain o LEFT JOIN partial_aggs p ON o.l_returnflag = p.l_returnflag AND o.l_linestatus = p.l_linestatus
ORDER BY o.l_returnflag, o.l_linestatus", tuple_count=0) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty_sum, #7 shared-float avg_qty_cnt, #8 shared-float avg_price_sum, #9 shared-float avg_price_cnt, #10 shared-float avg_discount_sum, #11 shared-float avg_discount_cnt, #12 shared-int64 cnt) order by: {<0, ASC> , <1, ASC> }, cost est: 18446744073709551193, output card: 0

Total Plans : 1
Cost Optimized Plan : 
#3: Project<Bit> ((<0, P$0(8) shared-varchar>, <1, P$1(8) shared-varchar>, <2, $2 + $15 shared-float>, <3, $3 + $16 shared-float>, <4, $4 + $17 shared-float>, <5, $5 + $18 shared-float>, <6, ($6 + $19) / ($7 + $20) shared-float>, <7, ($8 + $21) / ($9 + $22) shared-float>, <8, ($10 + $23) / ($11 + $24) shared-float>, <9, $12 + $25 shared-int64>)) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float anonymous, #3 shared-float anonymous, #4 shared-float anonymous, #5 shared-float anonymous, #6 shared-float anonymous, #7 shared-float anonymous, #8 shared-float anonymous, #9 shared-int64 anonymous) order by: {<0, ASC> , <1, ASC> }, cost est: 163596, output card: 6
    #2: MergeJoin<Bit> (no-op) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty_sum, #7 shared-float avg_qty_cnt, #8 shared-float avg_price_sum, #9 shared-float avg_price_cnt, #10 shared-float avg_discount_sum, #11 shared-float avg_discount_cnt, #12 shared-int64 cnt, #13 shared-varchar(1) l_returnflag, #14 shared-varchar(1) l_linestatus, #15 shared-float sum_qty, #16 shared-float sum_base_price, #17 shared-float sum_disc_price, #18 shared-float sum_charge, #19 shared-float avg_qty_sum, #20 shared-float avg_qty_cnt, #21 shared-float avg_price_sum, #22 shared-float avg_price_cnt, #23 shared-float avg_discount_sum, #24 shared-float avg_discount_cnt, #25 shared-int64 cnt) order by: {<0, ASC> , <1, ASC> }, cost est: 18, output card: 6
        #0: SecureSqlInput<Bit> ("WITH output_domain AS (
    SELECT  *
    FROM (VALUES('R'::char(1), 'F'::char(1)), ('A', 'F'), ('N', 'F'), ('R', 'O'), ('A', 'O'), ('N', 'O')) AS li(l_returnflag, l_linestatus)
    ORDER BY l_returnflag, l_linestatus),
     partial_aggs AS (
         SELECT l_returnflag, l_linestatus, SUM(l_quantity) sum_qty, SUM(l_extendedprice) sum_base_price,
                SUM(l_extendedprice*(1-l_discount)) sum_disc_price, SUM(l_extendedprice*(1-l_discount)*(1+l_tax)) sum_charge,
                SUM(l_quantity) avg_qty_sum, COUNT(l_quantity)::FLOAT4 avg_qty_cnt,
                 SUM(l_extendedprice) avg_price_sum, COUNT(l_extendedprice)::FLOAT4 avg_price_cnt,
                 SUM(l_discount) avg_discount_sum, COUNT(l_discount)::FLOAT4 avg_discount_cnt, COUNT(*) cnt
         FROM lineitem
         WHERE l_shipdate  <= date '1998-08-03'
         GROUP BY l_returnflag, l_linestatus
         ORDER BY l_returnflag, l_linestatus)
SELECT o.l_returnflag, o.l_linestatus, COALESCE(sum_qty, 0) sum_qty, COALESCE(sum_base_price, 0) sum_base_price, COALESCE(sum_disc_price, 0) sum_disc_price, COALESCE(sum_charge, 0) sum_charge, COALESCE(avg_qty_sum, 0) avg_qty_sum, COALESCE(avg_qty_cnt, 0) avg_qty_cnt,  COALESCE(avg_price_sum, 0) avg_price_sum, COALESCE(avg_price_cnt, 0) avg_price_cnt,  COALESCE(avg_discount_sum, 0) avg_discount_sum, COALESCE(avg_discount_cnt, 0) avg_discount_cnt,  COALESCE(cnt, 0)::BIGINT cnt, CASE WHEN p.l_returnflag IS NULL THEN true ELSE false END AS dummy_tag
FROM output_domain o LEFT JOIN partial_aggs p ON o.l_returnflag = p.l_returnflag AND o.l_linestatus = p.l_linestatus
ORDER BY o.l_returnflag, o.l_linestatus", tuple_count=6) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty_sum, #7 shared-float avg_qty_cnt, #8 shared-float avg_price_sum, #9 shared-float avg_price_cnt, #10 shared-float avg_discount_sum, #11 shared-float avg_discount_cnt, #12 shared-int64 cnt) order by: {<0, ASC> , <1, ASC> }, cost est: 0, output card: 6
        #1: SecureSqlInput<Bit> ("WITH output_domain AS (
    SELECT  *
    FROM (VALUES('R'::char(1), 'F'::char(1)), ('A', 'F'), ('N', 'F'), ('R', 'O'), ('A', 'O'), ('N', 'O')) AS li(l_returnflag, l_linestatus)
    ORDER BY l_returnflag, l_linestatus),
     partial_aggs AS (
         SELECT l_returnflag, l_linestatus, SUM(l_quantity) sum_qty, SUM(l_extendedprice) sum_base_price,
                SUM(l_extendedprice*(1-l_discount)) sum_disc_price, SUM(l_extendedprice*(1-l_discount)*(1+l_tax)) sum_charge,
                SUM(l_quantity) avg_qty_sum, COUNT(l_quantity)::FLOAT4 avg_qty_cnt,
                 SUM(l_extendedprice) avg_price_sum, COUNT(l_extendedprice)::FLOAT4 avg_price_cnt,
                 SUM(l_discount) avg_discount_sum, COUNT(l_discount)::FLOAT4 avg_discount_cnt, COUNT(*) cnt
         FROM lineitem
         WHERE l_shipdate  <= date '1998-08-03'
         GROUP BY l_returnflag, l_linestatus
         ORDER BY l_returnflag, l_linestatus)
SELECT o.l_returnflag, o.l_linestatus, COALESCE(sum_qty, 0) sum_qty, COALESCE(sum_base_price, 0) sum_base_price, COALESCE(sum_disc_price, 0) sum_disc_price, COALESCE(sum_charge, 0) sum_charge, COALESCE(avg_qty_sum, 0) avg_qty_sum, COALESCE(avg_qty_cnt, 0) avg_qty_cnt,  COALESCE(avg_price_sum, 0) avg_price_sum, COALESCE(avg_price_cnt, 0) avg_price_cnt,  COALESCE(avg_discount_sum, 0) avg_discount_sum, COALESCE(avg_discount_cnt, 0) avg_discount_cnt,  COALESCE(cnt, 0)::BIGINT cnt, CASE WHEN p.l_returnflag IS NULL THEN true ELSE false END AS dummy_tag
FROM output_domain o LEFT JOIN partial_aggs p ON o.l_returnflag = p.l_returnflag AND o.l_linestatus = p.l_linestatus
ORDER BY o.l_returnflag, o.l_linestatus", tuple_count=0) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty_sum, #7 shared-float avg_qty_cnt, #8 shared-float avg_price_sum, #9 shared-float avg_price_cnt, #10 shared-float avg_discount_sum, #11 shared-float avg_discount_cnt, #12 shared-int64 cnt) order by: {<0, ASC> , <1, ASC> }, cost est: 18446744073709551193, output card: 0

Cost Optimization Time : 0.000313 sec
Operator #0 SecureSqlInput ran for 0.234000 ms, gate count: 0 output cardinality: 6, row width=401
Operator #1 SecureSqlInput ran for 0.013000 ms, gate count: 0 output cardinality: 0, row width=401
Operator #2 MergeJoin ran for 0.168000 ms, gate count: 0 output cardinality: 6, row width=801
Operator #3 Project ran for 75.795000 ms, gate count: 128100 output cardinality: 6, row width=305
Runtime: 0.16407 sec, CPU Time: 0.049032 sec, CPU clock ticks: 49032, CPU clock ticks per second: 1000000
End-to-end estimated gates: 163191. observed gates: 128100 gates, relative error (%)=27.3934
[Linux]Peak resident set size: 2090065920 bytes, current memory size: 2004418560 bytes.
Initial Memory: 2090065920 bytes, Peak Memory After Execution: 2090065920 bytes, Memory Usage: 0 bytes
Bandwidth: 1.49907e+08 Bps
party 2 send 24595200 bytes to party 1
party 2 send 0 bytes to TP 
total AND gate: 128100
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.cost_optimized_tpch_q1 (1390 ms)
[ RUN      ] GeneralizedComparisonTest.cost_optimized_tpch_q3
Connecting to 127.0.0.1 on ports 7654, 65482 as 2
party 2 connected to TP
party 2 connected to GB
party 2 connected to TP
party 2 connected to GB
initializing cot
setup finished! takes 1005.47ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 2090065920 bytes, current memory size: 2004934656 bytes.
2090065920
EMP mode: outsourced, storage mode: column store
Code version: 1acad5e9b300370ee59a2ce455a9fbf7c0094e4e
GFlags: --flagfile=	--alice_db=tpch_alice_150	--alice_host=127.0.0.1	--bob_db=tpch_bob_150	--ctrl_port=65482	--cutoff=100	--filter=*	--party=2	--port=7654	--storage=column	--unioned_db=tpch_unioned_150	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 2090065920 bytes, current memory size: 2004934656 bytes.
Original Tree : 
#9: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$3(32) shared-float>, <2, P$1(28) shared-int64>, <3, P$2(32) shared-int32>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-float revenue, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32 orders.o_shippriority) order by: {<-1, ASC> , <1, DESC> , <2, ASC> }, cost est: 0, output card: 10
    #8: Sort<Bit> ({<-1, ASC> , <3, DESC> , <1, ASC> }) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<-1, ASC> , <3, DESC> , <1, ASC> }, cost est: 6317, output card: 10
        #7: SortMergeAggregate<Bit> (group-by: (0, 1, 2) aggs: (SUM($3) revenue)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<0, ASC> , <1, ASC> , <2, ASC> }, cost est: 1854000, output card: 60175
            #6: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$1(28) shared-int64>, <2, P$2(32) shared-int32>, <3, P$4(32) shared-float>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<-1, ASC> , <0, ASC> }, cost est: 0, output card: 1500
                #5: KeyedSortMergeJoin<Bit> (P$0(13) == P$3(13) - sortCompatible) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-int32(13) lineitem.l_orderkey, #4 shared-float revenue) order by: {<-1, ASC> , <0, ASC> , <3, ASC> }, cost est: 40872566, output card: 1500
                    #3: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$2(28) shared-int64>, <2, P$3(32) shared-int32>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority) order by: {<0, ASC> }, cost est: 0, output card: 1500
                        #2: KeyedJoin<Bit> (P$1(8) == P$4(8)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32 orders.o_shippriority, #4 shared-int32(8) customer.c_custkey) order by: {<0, ASC> , <4, ASC> }, cost est: 4500000, output card: 1500
                            #0: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_orderdate, o_shippriority, NOT o_orderdate < DATE '1995-03-25' AS dummy_tag FROM orders ORDER BY o_orderkey, o_orderdate, o_shippriority", tuple_count=1500) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32 orders.o_shippriority) order by: {<0, ASC> }, cost est: 0, output card: 1500
                            #1: SecureSqlInput<Bit> ("SELECT c_custkey, NOT c_mktsegment = 'HOUSEHOLD' AS dummy_tag FROM customer ORDER BY c_custkey", tuple_count=150) : (#0 shared-int32(8) customer.c_custkey) order by: {<0, ASC> }, cost est: 0, output card: 150
                    #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_extendedprice * (1 - l_discount) AS revenue, NOT l_shipdate > DATE '1995-03-25' AS dummy_tag FROM lineitem ORDER BY l_orderkey", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 0, output card: 1500

Total Plans : 96
Cost Optimized Plan : 
#9: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$3(32) shared-float>, <2, P$1(28) shared-int64>, <3, P$2(32) shared-int32>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-float revenue, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32 orders.o_shippriority) order by: {<-1, ASC> , <1, DESC> , <2, ASC> }, cost est: 0, output card: 10
    #8: Sort<Bit> ({<-1, ASC> , <3, DESC> , <1, ASC> }) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<-1, ASC> , <3, DESC> , <1, ASC> }, cost est: 6317, output card: 10
        #7: SortMergeAggregate<Bit> (group-by: (0, 1, 2) aggs: (SUM($3) revenue)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<0, ASC> , <1, ASC> , <2, ASC> }, cost est: 1854000, output card: 60175
            #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<0, ASC> }, cost est: 5575507, output card: 1500
                #6: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$1(28) shared-int64>, <2, P$2(32) shared-int32>, <3, P$4(32) shared-float>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<-1, ASC> , <0, ASC> }, cost est: 0, output card: 1500
                    #5: KeyedSortMergeJoin<Bit> (P$0(13) == P$3(13) - sortCompatible) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-int32(13) lineitem.l_orderkey, #4 shared-float revenue) order by: {<-1, ASC> , <0, ASC> , <3, ASC> }, cost est: 40872566, output card: 1500
                        #3: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$2(28) shared-int64>, <2, P$3(32) shared-int32>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority) order by: {<0, ASC> }, cost est: 0, output card: 1500
                            #2: KeyedJoin<Bit> (P$1(8) == P$4(8)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32 orders.o_shippriority, #4 shared-int32(8) customer.c_custkey) order by: {<0, ASC> }, cost est: 4500000, output card: 1500
                                #0: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_orderdate, o_shippriority, NOT o_orderdate < DATE '1995-03-25' AS dummy_tag FROM orders ORDER BY o_orderkey, o_orderdate, o_shippriority", tuple_count=1500) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32 orders.o_shippriority) order by: {<0, ASC> }, cost est: 0, output card: 1500
                                #1: SecureSqlInput<Bit> ("SELECT c_custkey, NOT c_mktsegment = 'HOUSEHOLD' AS dummy_tag FROM customer ORDER BY c_custkey", tuple_count=150) : (#0 shared-int32(8) customer.c_custkey) order by: {}, cost est: 0, output card: 150
                        #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_extendedprice * (1 - l_discount) AS revenue, NOT l_shipdate > DATE '1995-03-25' AS dummy_tag FROM lineitem ORDER BY l_orderkey", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 0, output card: 1500

Cost Optimization Time : 0.011621 sec
Operator #0 SecureSqlInput ran for 11.165000 ms, gate count: 0 output cardinality: 1500, row width=82
Operator #1 SecureSqlInput ran for 0.169000 ms, gate count: 0 output cardinality: 150, row width=9
Operator #2 KeyedJoin ran for 18515.554000 ms, gate count: 4725000 output cardinality: 1500, row width=90
Operator #3 Project ran for 5.054000 ms, gate count: 0 output cardinality: 1500, row width=74
Operator #4 SecureSqlInput ran for 7.210000 ms, gate count: 0 output cardinality: 1500, row width=46
extension finished! takes 913.895ms to extend lpn
extension finished! takes 915.35ms to extend lpn
extension finished! takes 911.217ms to extend lpn
extension finished! takes 892.716ms to extend lpn
extension finished! takes 907.594ms to extend lpn
extension finished! takes 915.572ms to extend lpn
extension finished! takes 907.525ms to extend lpn
Operator #5 KeyedSortMergeJoin ran for 130218.505000 ms, gate count: 35140911 output cardinality: 1500, row width=119
Operator #6 Project ran for 4.717000 ms, gate count: 0 output cardinality: 1500, row width=106
extension finished! takes 887.06ms to extend lpn
Operator #-1 Sort ran for 24713.753000 ms, gate count: 5924976 output cardinality: 1500, row width=106
Operator #7 SortMergeAggregate ran for 7724.701000 ms, gate count: 1809325 output cardinality: 1500, row width=106
extension finished! takes 884.689ms to extend lpn
extension finished! takes 884.965ms to extend lpn
extension finished! takes 884.635ms to extend lpn
extension finished! takes 887.285ms to extend lpn
extension finished! takes 901.726ms to extend lpn
Operator #8 Sort ran for 110797.060000 ms, gate count: 26008902 output cardinality: 10, row width=106
Operator #9 Project ran for 0.074000 ms, gate count: 0 output cardinality: 10, row width=106
Runtime: 292.035 sec, CPU Time: 45.7201 sec, CPU clock ticks: 4.57201e+07, CPU clock ticks per second: 1000000
End-to-end estimated gates: 5.28084e+07. observed gates: 68884114 gates, relative error (%)=23.3373
[Linux]Peak resident set size: 2180784128 bytes, current memory size: 2057453568 bytes.
Initial Memory: 2090065920 bytes, Peak Memory After Execution: 2180784128 bytes, Memory Usage: 90718208 bytes
Bandwidth: 4.52882e+07 Bps
party 2 send 13225749888 bytes to party 1
party 2 send 0 bytes to TP 
total AND gate: 68884114
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.cost_optimized_tpch_q3 (293233 ms)
[ RUN      ] GeneralizedComparisonTest.cost_optimized_tpch_q5
Connecting to 127.0.0.1 on ports 7654, 65482 as 2
party 2 connected to TP
party 2 connected to GB
party 2 connected to TP
party 2 connected to GB
initializing cot
setup finished! takes 953.547ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 2180784128 bytes, current memory size: 2017574912 bytes.
2180784128
EMP mode: outsourced, storage mode: column store
Code version: 1acad5e9b300370ee59a2ce455a9fbf7c0094e4e
GFlags: --flagfile=	--alice_db=tpch_alice_150	--alice_host=127.0.0.1	--bob_db=tpch_bob_150	--ctrl_port=65482	--cutoff=100	--filter=*	--party=2	--port=7654	--storage=column	--unioned_db=tpch_unioned_150	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 2180784128 bytes, current memory size: 2017574912 bytes.
Original Tree : 
#11: Sort<Bit> ({<1, DESC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<1, DESC> }, cost est: 2583, output card: 5
    #10: SortMergeAggregate<Bit> (group-by: (0) aggs: (SUM($1) revenue)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 2229000, output card: 5
        #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 19925584, output card: 1500
            #9: Project<Bit> ((<0, P$4(200) shared-varchar>, <1, P$2(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<-1, ASC> }, cost est: 0, output card: 1500
                #8: KeyedSortMergeJoin<Bit> ((P$1(13) == P$5(13)) AND ($0 == $3) - not sort compatible, need sort in smj) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(13) lineitem.l_orderkey, #2 shared-float revenue, #3 shared-int32(5) customer.c_nationkey, #4 shared-varchar(25) nation.n_name, #5 shared-int32(13) orders.o_orderkey) order by: {<-1, ASC> , <1, ASC> , <5, ASC> , <0, ASC> , <3, ASC> }, cost est: 101961540, output card: 1500
                    #-1: Sort<Bit> ({<1, ASC> , <0, ASC> }) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(13) lineitem.l_orderkey, #2 shared-float revenue) order by: {<1, ASC> , <0, ASC> }, cost est: 3427566, output card: 1500
                        #3: Project<Bit> ((<0, P$1(5) shared-int32>, <1, P$2(13) shared-int32>, <2, P$4(32) shared-float>)) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(13) lineitem.l_orderkey, #2 shared-float revenue) order by: {}, cost est: 0, output card: 1500
                            #2: KeyedJoin<Bit> (P$0(4) == P$3(4)) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey, #2 shared-int32(13) lineitem.l_orderkey, #3 shared-int32(4) lineitem.l_suppkey, #4 shared-float revenue) order by: {<3, ASC> , <0, ASC> }, cost est: 25500, output card: 1500
                                #0: SecureSqlInput<Bit> ("SELECT s_suppkey, s_nationkey FROM supplier JOIN nation ON s_nationkey = n_nationkey JOIN region ON n_regionkey = r_regionkey WHERE r_name = 'EUROPE' ORDER BY s_suppkey", tuple_count=1) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey) order by: {<0, ASC> }, cost est: 0, output card: 1
                                #1: SecureSqlInput<Bit> ("SELECT l_orderkey, l_suppkey, l_extendedprice * (1 - l_discount) AS revenue FROM lineitem ORDER BY l_suppkey", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float revenue) order by: {<1, ASC> }, cost est: 0, output card: 1500
                    #-1: Sort<Bit> ({}) : (#0 shared-int32(5) customer.c_nationkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(13) orders.o_orderkey) order by: {}, cost est: 10008492, output card: 1500
                        #7: Project<Bit> ((<0, P$1(5) shared-int32>, <1, P$2(200) shared-varchar>, <2, P$3(13) shared-int32>)) : (#0 shared-int32(5) customer.c_nationkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(13) orders.o_orderkey) order by: {}, cost est: 0, output card: 1500
                            #6: KeyedJoin<Bit> (P$0(8) == P$4(8)) : (#0 shared-int32(8) customer.c_custkey, #1 shared-int32(5) customer.c_nationkey, #2 shared-varchar(25) nation.n_name, #3 shared-int32(13) orders.o_orderkey, #4 shared-int32(8) orders.o_custkey) order by: {<4, ASC> , <0, ASC> }, cost est: 9112500, output card: 1500
                                #4: SecureSqlInput<Bit> ("SELECT t2.c_custkey, t2.c_nationkey, t1.n_name FROM (SELECT r_regionkey, r_name FROM region WHERE r_name = 'EUROPE') AS t0 INNER JOIN (SELECT n_nationkey, n_name, n_regionkey FROM nation) AS t1 ON t0.r_regionkey = t1.n_regionkey INNER JOIN (SELECT c_custkey, c_nationkey FROM customer) AS t2 ON t1.n_nationkey = t2.c_nationkey ORDER BY t2.c_custkey ASC", tuple_count=27) : (#0 shared-int32(8) customer.c_custkey, #1 shared-int32(5) customer.c_nationkey, #2 shared-varchar(25) nation.n_name) order by: {<0, ASC> }, cost est: 0, output card: 27
                                #5: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, NOT (o_orderdate >= DATE '1993-01-01' AND o_orderdate < DATE '1994-01-01') AS dummy_tag FROM orders ORDER BY o_custkey, o_orderdate", tuple_count=1500) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey) order by: {<1, ASC> }, cost est: 0, output card: 1500

Total Plans : 72
Cost Optimized Plan : 
#11: Sort<Bit> ({<1, DESC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<1, DESC> }, cost est: 2583, output card: 5
    #10: NestedLoopAggregate<Bit> (group-by: (0) aggs: (SUM($1) revenue)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {}, cost est: 11385000, output card: 5
        #9: Project<Bit> ((<0, P$4(200) shared-varchar>, <1, P$2(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<-1, ASC> }, cost est: 0, output card: 1500
            #8: KeyedSortMergeJoin<Bit> ((P$1(13) == P$5(13)) AND ($0 == $3) - sortCompatible) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(13) lineitem.l_orderkey, #2 shared-float revenue, #3 shared-int32(5) customer.c_nationkey, #4 shared-varchar(25) nation.n_name, #5 shared-int32(13) orders.o_orderkey) order by: {<-1, ASC> , <1, ASC> , <5, ASC> , <0, ASC> , <3, ASC> }, cost est: 78197083, output card: 1500
                #3: Project<Bit> ((<0, P$1(5) shared-int32>, <1, P$2(13) shared-int32>, <2, P$4(32) shared-float>)) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(13) lineitem.l_orderkey, #2 shared-float revenue) order by: {<1, ASC> , <0, ASC> }, cost est: 0, output card: 1500
                    #2: KeyedJoin<Bit> (P$0(4) == P$3(4)) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey, #2 shared-int32(13) lineitem.l_orderkey, #3 shared-int32(4) lineitem.l_suppkey, #4 shared-float revenue) order by: {<2, ASC> , <1, ASC> }, cost est: 25500, output card: 1500
                        #0: SecureSqlInput<Bit> ("SELECT * FROM (SELECT s_suppkey, s_nationkey FROM supplier JOIN nation ON s_nationkey = n_nationkey JOIN region ON n_regionkey = r_regionkey WHERE r_name = 'EUROPE' ORDER BY s_suppkey) to_sort ORDER BY (2)  ASC ", tuple_count=1) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey) order by: {<1, ASC> }, cost est: 0, output card: 1
                        #1: SecureSqlInput<Bit> ("SELECT * FROM (SELECT l_orderkey, l_suppkey, l_extendedprice * (1 - l_discount) AS revenue FROM lineitem ORDER BY l_suppkey) to_sort ORDER BY (1)  ASC ", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float revenue) order by: {<0, ASC> }, cost est: 522258, output card: 1500
                #-1: Sort<Bit> ({<2, ASC> , <0, ASC> }) : (#0 shared-int32(5) customer.c_nationkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(13) orders.o_orderkey) order by: {<2, ASC> , <0, ASC> }, cost est: 11105314, output card: 1500
                    #-1: Sort<Bit> ({}) : (#0 shared-int32(5) customer.c_nationkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(13) orders.o_orderkey) order by: {}, cost est: 10008492, output card: 1500
                        #7: Project<Bit> ((<0, P$1(5) shared-int32>, <1, P$2(200) shared-varchar>, <2, P$3(13) shared-int32>)) : (#0 shared-int32(5) customer.c_nationkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(13) orders.o_orderkey) order by: {}, cost est: 0, output card: 1500
                            #6: KeyedJoin<Bit> (P$0(8) == P$4(8)) : (#0 shared-int32(8) customer.c_custkey, #1 shared-int32(5) customer.c_nationkey, #2 shared-varchar(25) nation.n_name, #3 shared-int32(13) orders.o_orderkey, #4 shared-int32(8) orders.o_custkey) order by: {<4, ASC> , <0, ASC> }, cost est: 9112500, output card: 1500
                                #4: SecureSqlInput<Bit> ("SELECT t2.c_custkey, t2.c_nationkey, t1.n_name FROM (SELECT r_regionkey, r_name FROM region WHERE r_name = 'EUROPE') AS t0 INNER JOIN (SELECT n_nationkey, n_name, n_regionkey FROM nation) AS t1 ON t0.r_regionkey = t1.n_regionkey INNER JOIN (SELECT c_custkey, c_nationkey FROM customer) AS t2 ON t1.n_nationkey = t2.c_nationkey ORDER BY t2.c_custkey ASC", tuple_count=27) : (#0 shared-int32(8) customer.c_custkey, #1 shared-int32(5) customer.c_nationkey, #2 shared-varchar(25) nation.n_name) order by: {<0, ASC> }, cost est: 0, output card: 27
                                #5: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, NOT (o_orderdate >= DATE '1993-01-01' AND o_orderdate < DATE '1994-01-01') AS dummy_tag FROM orders ORDER BY o_custkey, o_orderdate", tuple_count=1500) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey) order by: {<1, ASC> }, cost est: 0, output card: 1500

Cost Optimization Time : 0.00897 sec
Operator #0 SecureSqlInput ran for 0.019000 ms, gate count: 0 output cardinality: 1, row width=10
Operator #1 SecureSqlInput ran for 7.022000 ms, gate count: 0 output cardinality: 1500, row width=50
Operator #2 KeyedJoin ran for 348.629000 ms, gate count: 27000 output cardinality: 1500, row width=59
Operator #3 Project ran for 2.701000 ms, gate count: 0 output cardinality: 1500, row width=51
Operator #4 SecureSqlInput ran for 0.602000 ms, gate count: 0 output cardinality: 27, row width=214
Operator #5 SecureSqlInput ran for 2.958000 ms, gate count: 0 output cardinality: 1500, row width=22
extension finished! takes 895.741ms to extend lpn
Operator #6 KeyedJoin ran for 16786.169000 ms, gate count: 9153000 output cardinality: 1500, row width=235
Operator #7 Project ran for 12.238000 ms, gate count: 0 output cardinality: 1500, row width=219
extension finished! takes 908.226ms to extend lpn
extension finished! takes 902.148ms to extend lpn
Operator #-1 Sort ran for 23272.896000 ms, gate count: 9540954 output cardinality: 1500, row width=219
extension finished! takes 888.609ms to extend lpn
extension finished! takes 897.678ms to extend lpn
extension finished! takes 903.558ms to extend lpn
Operator #-1 Sort ran for 49295.568000 ms, gate count: 11457858 output cardinality: 1500, row width=219
extension finished! takes 924.699ms to extend lpn
extension finished! takes 954.183ms to extend lpn
extension finished! takes 954.809ms to extend lpn
extension finished! takes 965.249ms to extend lpn
extension finished! takes 964.822ms to extend lpn
extension finished! takes 951.302ms to extend lpn
extension finished! takes 971.036ms to extend lpn
extension finished! takes 977.047ms to extend lpn
extension finished! takes 953.065ms to extend lpn
extension finished! takes 936.475ms to extend lpn
extension finished! takes 988.289ms to extend lpn
extension finished! takes 994.779ms to extend lpn
extension finished! takes 963.456ms to extend lpn
Operator #8 KeyedSortMergeJoin ran for 284975.919000 ms, gate count: 97102511 output cardinality: 1500, row width=269
Operator #9 Project ran for 13.925000 ms, gate count: 0 output cardinality: 1500, row width=233
extension finished! takes 893.656ms to extend lpn
extension finished! takes 885.962ms to extend lpn
Operator #10 NestedLoopAggregate ran for 46494.180000 ms, gate count: 10942500 output cardinality: 5, row width=233
Operator #11 Sort ran for 34.215000 ms, gate count: 5940 output cardinality: 5, row width=233
Runtime: 421.315 sec, CPU Time: 73.8538 sec, CPU clock ticks: 7.38538e+07, CPU clock ticks per second: 1000000
End-to-end estimated gates: 1.19836e+08. observed gates: 108050951 gates, relative error (%)=10.9074
[Linux]Peak resident set size: 2350272512 bytes, current memory size: 2066944000 bytes.
Initial Memory: 2180784128 bytes, Peak Memory After Execution: 2350272512 bytes, Memory Usage: 169488384 bytes
Bandwidth: 4.92406e+07 Bps
party 2 send 20745782592 bytes to party 1
party 2 send 0 bytes to TP 
total AND gate: 108050951
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.cost_optimized_tpch_q5 (422466 ms)
[ RUN      ] GeneralizedComparisonTest.cost_optimized_tpch_q8
Connecting to 127.0.0.1 on ports 7654, 65482 as 2
party 2 connected to TP
party 2 connected to GB
party 2 connected to TP
party 2 connected to GB
initializing cot
setup finished! takes 1040.88ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 2350272512 bytes, current memory size: 2008875008 bytes.
2350272512
EMP mode: outsourced, storage mode: column store
Code version: 1acad5e9b300370ee59a2ce455a9fbf7c0094e4e
GFlags: --flagfile=	--alice_db=tpch_alice_150	--alice_host=127.0.0.1	--bob_db=tpch_bob_150	--ctrl_port=65482	--cutoff=100	--filter=*	--party=2	--port=7654	--storage=column	--unioned_db=tpch_unioned_150	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 2350272512 bytes, current memory size: 2008875008 bytes.
Original Tree : 
#12: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32 orders.o_year, #1 shared-float mkt_share) order by: {<0, ASC> }, cost est: 100, output card: 2
    #11: Project<Bit> ((<0, P$0(32) shared-int32>, <1, $2 / $1 shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float mkt_share) order by: {<0, ASC> }, cost est: 7618, output card: 2
        #10: SortMergeAggregate<Bit> (group-by: (0) aggs: (SUM($1) null, SUM($2) null)) : (#0 shared-int32 orders.o_year, #1 shared-float null, #2 shared-float null) order by: {<0, ASC> }, cost est: 3450000, output card: 2
            #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32 orders.o_year, #1 shared-float volume, #2 shared-float selected_volume) order by: {<0, ASC> }, cost est: 6032516, output card: 1500
                #9: Project<Bit> ((<0, P$1(32) shared-int32>, <1, P$3(32) shared-float>, <2, CASE($4, $3, SECRET FLOAT) shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float volume, #2 shared-float selected_volume) order by: {}, cost est: 0, output card: 1500
                    #8: KeyedJoin<Bit> (P$0(13) == P$2(13)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32 orders.o_year, #2 shared-int32(13) lineitem.l_orderkey, #3 shared-float volume, #4 shared-bool nation_check) order by: {}, cost est: 139500000, output card: 1500
                        #3: Project<Bit> ((<0, P$1(13) shared-int32>, <1, P$3(32) shared-int32>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32 orders.o_year) order by: {}, cost est: 0, output card: 1500
                            #2: KeyedJoin<Bit> (P$0(8) == P$2(8)) : (#0 shared-int32(8) customer.c_custkey, #1 shared-int32(13) orders.o_orderkey, #2 shared-int32(8) orders.o_custkey, #3 shared-int32 orders.o_year) order by: {<2, ASC> , <0, ASC> }, cost est: 870000, output card: 1500
                                #0: SecureSqlInput<Bit> ("SELECT c_custkey FROM customer c JOIN nation n1 ON c_nationkey = n_nationkey JOIN region ON r_regionkey = n_regionkey WHERE r_name = 'AFRICA' ORDER BY c_custkey", tuple_count=29) : (#0 shared-int32(8) customer.c_custkey) order by: {<0, ASC> }, cost est: 0, output card: 29
                                #1: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_orderyear::INT AS o_year, NOT (o_orderdate >= date '1995-01-01' and o_orderdate < date '1996-12-31') dummy_tag FROM orders ORDER BY o_custkey", tuple_count=1500) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-int32 orders.o_year) order by: {<1, ASC> }, cost est: 0, output card: 1500
                        #7: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$2(32) shared-float>, <2, P$4(1) shared-bool>)) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-float volume, #2 shared-bool nation_check) order by: {}, cost est: 0, output card: 1500
                            #6: KeyedJoin<Bit> (P$1(4) == P$3(4)) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float volume, #3 shared-int32(4) supplier.s_suppkey, #4 shared-bool nation_check) order by: {<1, ASC> , <3, ASC> }, cost est: 195000, output card: 1500
                                #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_suppkey, l_extendedprice * (1.0 - l_discount) AS volume,        CASE            WHEN p_type = 'LARGE ANODIZED STEEL' AND p_partkey = l_partkey THEN FALSE            ELSE TRUE            END AS dummy_tag FROM lineitem LEFT JOIN part ON p_partkey = l_partkey ORDER BY l_suppkey", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float volume) order by: {<1, ASC> }, cost est: 0, output card: 1500
                                #5: SecureSqlInput<Bit> ("SELECT s_suppkey, CASE WHEN n_name = 'KENYA' THEN true ELSE false END AS nation_check FROM supplier JOIN nation ON n_nationkey = s_nationkey ORDER BY s_suppkey", tuple_count=10) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-bool nation_check) order by: {<0, ASC> }, cost est: 0, output card: 10

Total Plans : 576
Cost Optimized Plan : 
#12: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32 orders.o_year, #1 shared-float mkt_share) order by: {<0, ASC> }, cost est: 100, output card: 2
    #11: Project<Bit> ((<0, P$0(32) shared-int32>, <1, $2 / $1 shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float anonymous) order by: {}, cost est: 7618, output card: 2
        #10: NestedLoopAggregate<Bit> (group-by: (0) aggs: (SUM($1) null, SUM($2) null)) : (#0 shared-int32 orders.o_year, #1 shared-float null, #2 shared-float null) order by: {}, cost est: 7092000, output card: 2
            #9: Project<Bit> ((<0, P$1(32) shared-int32>, <1, P$3(32) shared-float>, <2, CASE($4, $3, SECRET FLOAT) shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float volume, #2 shared-float anonymous) order by: {<-1, ASC> }, cost est: 0, output card: 1500
                #8: KeyedSortMergeJoin<Bit> (P$0(13) == P$2(13) - sortCompatible) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32 orders.o_year, #2 shared-int32(13) lineitem.l_orderkey, #3 shared-float volume, #4 shared-bool nation_check) order by: {<-1, ASC> , <0, ASC> , <2, ASC> }, cost est: 34110261, output card: 1500
                    #3: Project<Bit> ((<0, P$1(13) shared-int32>, <1, P$3(32) shared-int32>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32 orders.o_year) order by: {<0, ASC> }, cost est: 0, output card: 1500
                        #2: KeyedJoin<Bit> (P$0(8) == P$2(8)) : (#0 shared-int32(8) customer.c_custkey, #1 shared-int32(13) orders.o_orderkey, #2 shared-int32(8) orders.o_custkey, #3 shared-int32 orders.o_year) order by: {<1, ASC> }, cost est: 870000, output card: 1500
                            #0: SecureSqlInput<Bit> ("SELECT c_custkey FROM customer c JOIN nation n1 ON c_nationkey = n_nationkey JOIN region ON r_regionkey = n_regionkey WHERE r_name = 'AFRICA' ORDER BY c_custkey", tuple_count=29) : (#0 shared-int32(8) customer.c_custkey) order by: {}, cost est: 0, output card: 29
                            #1: SecureSqlInput<Bit> ("SELECT * FROM (SELECT o_orderkey, o_custkey, o_orderyear::INT AS o_year, NOT (o_orderdate >= date '1995-01-01' and o_orderdate < date '1996-12-31') dummy_tag FROM orders ORDER BY o_custkey) to_sort ORDER BY (1)  ASC ", tuple_count=1500) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-int32 orders.o_year) order by: {<0, ASC> }, cost est: 553910, output card: 1500
                    #7: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$2(32) shared-float>, <2, P$4(1) shared-bool>)) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-float volume, #2 shared-bool nation_check) order by: {<0, ASC> }, cost est: 0, output card: 1500
                        #6: KeyedJoin<Bit> (P$1(4) == P$3(4)) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float volume, #3 shared-int32(4) supplier.s_suppkey, #4 shared-bool nation_check) order by: {<0, ASC> }, cost est: 195000, output card: 1500
                            #4: SecureSqlInput<Bit> ("SELECT * FROM (SELECT l_orderkey, l_suppkey, l_extendedprice * (1.0 - l_discount) AS volume,        CASE            WHEN p_type = 'LARGE ANODIZED STEEL' AND p_partkey = l_partkey THEN FALSE            ELSE TRUE            END AS dummy_tag FROM lineitem LEFT JOIN part ON p_partkey = l_partkey ORDER BY l_suppkey) to_sort ORDER BY (1)  ASC ", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float volume) order by: {<0, ASC> }, cost est: 522258, output card: 1500
                            #5: SecureSqlInput<Bit> ("SELECT s_suppkey, CASE WHEN n_name = 'KENYA' THEN true ELSE false END AS nation_check FROM supplier JOIN nation ON n_nationkey = s_nationkey ORDER BY s_suppkey", tuple_count=10) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-bool nation_check) order by: {}, cost est: 0, output card: 10

Cost Optimization Time : 0.087541 sec
Operator #0 SecureSqlInput ran for 0.048000 ms, gate count: 0 output cardinality: 29, row width=9
Operator #1 SecureSqlInput ran for 7.032000 ms, gate count: 0 output cardinality: 1500, row width=54
Operator #2 KeyedJoin ran for 2720.540000 ms, gate count: 913500 output cardinality: 1500, row width=62
Operator #3 Project ran for 2.416000 ms, gate count: 0 output cardinality: 1500, row width=46
Operator #4 SecureSqlInput ran for 7.334000 ms, gate count: 0 output cardinality: 1500, row width=50
Operator #5 SecureSqlInput ran for 0.034000 ms, gate count: 0 output cardinality: 10, row width=6
Operator #6 KeyedJoin ran for 857.156000 ms, gate count: 210000 output cardinality: 1500, row width=55
Operator #7 Project ran for 2.313000 ms, gate count: 0 output cardinality: 1500, row width=47
extension finished! takes 913.69ms to extend lpn
extension finished! takes 894.026ms to extend lpn
extension finished! takes 884.032ms to extend lpn
extension finished! takes 896.275ms to extend lpn
extension finished! takes 909.478ms to extend lpn
Operator #8 KeyedSortMergeJoin ran for 102827.827000 ms, gate count: 25064109 output cardinality: 1500, row width=92
Operator #9 Project ran for 69.724000 ms, gate count: 48000 output cardinality: 1500, row width=97
extension finished! takes 882.334ms to extend lpn
Operator #10 NestedLoopAggregate ran for 27173.924000 ms, gate count: 6528000 output cardinality: 2, row width=97
Operator #11 Project ran for 33.498000 ms, gate count: 7618 output cardinality: 2, row width=65
Operator #12 Sort ran for 0.094000 ms, gate count: 131 output cardinality: 2, row width=65
Runtime: 133.845 sec, CPU Time: 21.6903 sec, CPU clock ticks: 2.16903e+07, CPU clock ticks per second: 1000000
End-to-end estimated gates: 4.2275e+07. observed gates: 31647858 gates, relative error (%)=33.5793
[Linux]Peak resident set size: 2350272512 bytes, current memory size: 2074832896 bytes.
Initial Memory: 2350272512 bytes, Peak Memory After Execution: 2350272512 bytes, Memory Usage: 0 bytes
Bandwidth: 4.53986e+07 Bps
party 2 send 6076388736 bytes to party 1
party 2 send 0 bytes to TP 
total AND gate: 31647858
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.cost_optimized_tpch_q8 (135097 ms)
[ RUN      ] GeneralizedComparisonTest.cost_optimized_tpch_q9
Connecting to 127.0.0.1 on ports 7654, 65482 as 2
party 2 connected to TP
party 2 connected to GB
party 2 connected to TP
party 2 connected to GB
initializing cot
setup finished! takes 976.494ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 2350272512 bytes, current memory size: 2042298368 bytes.
2350272512
