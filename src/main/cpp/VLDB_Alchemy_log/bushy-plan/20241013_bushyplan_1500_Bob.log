[==========] Running 11 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 11 tests from CostOptimizedTest

[ RUN      ] CostOptimizedTest.bushy_plan_tpch_q5
Connecting to 126.137.1.10 on ports 7655, 65483 as 2
connected
EMP mode: sh2pc, storage mode: column store
Code version: 2eb2d5a8d93445243e1e210aac29447dbdef04e7
GFlags: --flagfile=	--alice_db=tpch_alice_1500	--alice_host=126.137.1.10	--bob_db=tpch_bob_1500	--ctrl_port=65484	--cutoff=100	--filter=*	--party=2	--port=7656	--storage=column	--unioned_db=tpch_unioned_1500	--validation=true	--log_level=2	--logfile=	

[Linux]Peak resident set size: 400834560 bytes, current memory size: 191238144 bytes.
Original Tree : 
#11: Sort<Bit> ({<1, DESC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<1, DESC> }, cost est: 2583, output card: 5
    #10: SortMergeAggregate<Bit> (group-by: (0) aggs: (SUM($1) revenue)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 89420050, output card: 5
        #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 1757517824, output card: 60175
            #9: Project<Bit> ((<0, P$4(200) shared-varchar>, <1, P$2(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {}, cost est: 0, output card: 60175
                #8: KeyedJoin<Bit> ((P$0(5) == P$3(5)) AND (P$1(16) == P$5(16))) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(16) lineitem.l_orderkey, #2 shared-float revenue, #3 shared-int32(5) customer.c_nationkey, #4 shared-varchar(25) nation.revenue, #5 shared-int32(16) orders.o_custkey) order by: {}, cost est: 234682500000, output card: 60175
                    #3: Project<Bit> ((<0, P$1(5) shared-int32>, <1, P$2(16) shared-int32>, <2, P$4(32) shared-float>)) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(16) lineitem.l_orderkey, #2 shared-float revenue) order by: {}, cost est: 0, output card: 60175
                        #2: KeyedJoin<Bit> (P$0(7) == P$3(7)) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey, #2 shared-int32(16) lineitem.l_orderkey, #3 shared-int32(7) lineitem.l_suppkey, #4 shared-float revenue) order by: {}, cost est: 27680500, output card: 60175
                            #0: SecureSqlInput<Bit> ("SELECT s_suppkey, s_nationkey FROM supplier JOIN nation ON s_nationkey = n_nationkey JOIN region ON n_regionkey = r_regionkey WHERE r_name = 'EUROPE' ORDER BY s_suppkey", tuple_count=20) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey) order by: {}, cost est: 0, output card: 20
                            #1: SecureSqlInput<Bit> ("SELECT l_orderkey, l_suppkey, l_extendedprice * (1 - l_discount) AS revenue FROM lineitem ORDER BY l_orderkey", tuple_count=60175) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float revenue) order by: {}, cost est: 0, output card: 60175
                    #7: Project<Bit> ((<0, P$1(5) shared-int32>, <1, P$2(200) shared-varchar>, <2, P$3(16) shared-int32>)) : (#0 shared-int32(5) customer.c_nationkey, #1 shared-varchar(25) nation.revenue, #2 shared-int32(16) orders.o_custkey) order by: {}, cost est: 0, output card: 15000
                        #6: KeyedJoin<Bit> (P$0(11) == P$4(11)) : (#0 shared-int32(11) customer.c_custkey, #1 shared-int32(5) customer.c_nationkey, #2 shared-varchar(25) nation.n_name, #3 shared-int32(16) orders.o_orderkey, #4 shared-int32(11) orders.o_custkey) order by: {}, cost est: 942480000, output card: 15000
                            #4: SecureSqlInput<Bit> ("SELECT t2.c_custkey, t2.c_nationkey, t1.n_name FROM (SELECT r_regionkey, r_name FROM region WHERE r_name = 'EUROPE') AS t0 INNER JOIN (SELECT n_nationkey, n_name, n_regionkey FROM nation) AS t1 ON t0.r_regionkey = t1.n_regionkey INNER JOIN (SELECT c_custkey, c_nationkey FROM customer) AS t2 ON t1.n_nationkey = t2.c_nationkey ORDER BY t2.c_custkey ASC", tuple_count=272) : (#0 shared-int32(11) customer.c_custkey, #1 shared-int32(5) customer.c_nationkey, #2 shared-varchar(25) nation.n_name) order by: {}, cost est: 0, output card: 272
                            #5: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, NOT (o_orderdate >= DATE '1993-01-01' AND o_orderdate < DATE '1994-01-01') AS dummy_tag FROM orders ORDER BY o_orderkey, o_custkey, o_orderdate", tuple_count=15000) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey) order by: {}, cost est: 0, output card: 15000

Operator #0 SecureSqlInput ran for 0.153000 ms, gate count: 0 output cardinality: 20, row width=13
Operator #1 SecureSqlInput ran for 171.497000 ms, gate count: 0 output cardinality: 60175, row width=56
Operator #2 KeyedJoin ran for 2635.177000 ms, gate count: 28884000 output cardinality: 60175, row width=68
Operator #3 Project ran for 37.594000 ms, gate count: 0 output cardinality: 60175, row width=54
Operator #4 SecureSqlInput ran for 2.854000 ms, gate count: 0 output cardinality: 272, row width=217
Operator #5 SecureSqlInput ran for 21.900000 ms, gate count: 0 output cardinality: 15000, row width=28
Operator #6 KeyedJoin ran for 61047.314000 ms, gate count: 946560000 output cardinality: 15000, row width=244
Operator #7 Project ran for 36.489000 ms, gate count: 0 output cardinality: 15000, row width=222
Operator #8 KeyedJoin ran for 15313938.547000 ms, gate count: 224753625000 output cardinality: 60175, row width=275
Operator #9 Project ran for 205.006000 ms, gate count: 0 output cardinality: 60175, row width=233
Operator #-1 Sort ran for 144421.569000 ms, gate count: 1709304660 output cardinality: 60175, row width=233
Operator #10 SortMergeAggregate ran for 7555.348000 ms, gate count: 87553204 output cardinality: 60175, row width=233
Operator #11 Sort ran for 78483.511000 ms, gate count: 1055220388 output cardinality: 60175, row width=233
Runtime: 15608.7 sec, CPU Time: 12172.9 sec, CPU clock ticks: 1.21729e+10, CPU clock ticks per second: 1000000
End-to-end estimated gates: 2.375e+11. observed gates: 228581147252 gates, relative error (%)=3.90166
[Linux]Peak resident set size: 1297281024 bytes, current memory size: 445390848 bytes.
Initial Memory: 400834560 bytes, Peak Memory After Execution: 1297281024 bytes, Memory Usage: 896446464 bytes
Bandwidth: 2052.18 Bps
[       OK ] CostOptimizedTest.bushy_plan_tpch_q5 (15688400 ms)
[ RUN      ] CostOptimizedTest.bushy_plan_tpch_q8
Connecting to 126.137.1.10 on ports 7656, 65484 as 2
connected
EMP mode: sh2pc, storage mode: column store
Code version: 2eb2d5a8d93445243e1e210aac29447dbdef04e7
GFlags: --flagfile=	--alice_db=tpch_alice_1500	--alice_host=126.137.1.10	--bob_db=tpch_bob_1500	--ctrl_port=65485	--cutoff=100	--filter=*	--party=2	--port=7657	--storage=column	--unioned_db=tpch_unioned_1500	--validation=true	--log_level=2	--logfile=	

[Linux]Peak resident set size: 1500385280 bytes, current memory size: 445313024 bytes.
Original Tree : 
#12: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32 orders.o_year, #1 shared-float mkt_share) order by: {<0, ASC> }, cost est: 100, output card: 2
    #11: Project<Bit> ((<0, P$0(32) shared-int32>, <1, $2 / $1 shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float mkt_share) order by: {<0, ASC> }, cost est: 7618, output card: 2
        #10: SortMergeAggregate<Bit> (group-by: (0) aggs: (SUM($1) null, SUM($2) null)) : (#0 shared-int32 orders.o_year, #1 shared-float null, #2 shared-float null) order by: {<0, ASC> }, cost est: 138402500, output card: 2
            #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32 orders.o_year, #1 shared-float volume, #2 shared-float selected_volume) order by: {<0, ASC> }, cost est: 532092576, output card: 60175
                #9: Project<Bit> ((<0, P$1(32) shared-int32>, <1, P$3(32) shared-float>, <2, CASE($4, $3, SECRET FLOAT) shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float volume, #2 shared-float selected_volume) order by: {}, cost est: 0, output card: 60175
                    #8: KeyedJoin<Bit> (P$0(16) == P$2(16)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32 orders.o_year, #2 shared-int32(16) lineitem.l_orderkey, #3 shared-float volume, #4 shared-bool nation_check) order by: {}, cost est: 61378500000, output card: 60175
                        #3: Project<Bit> ((<0, P$1(16) shared-int32>, <1, P$3(32) shared-int32>)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32 orders.o_year) order by: {}, cost est: 0, output card: 15000
                            #2: KeyedJoin<Bit> (P$0(11) == P$2(11)) : (#0 shared-int32(11) customer.c_custkey, #1 shared-int32(16) orders.o_orderkey, #2 shared-int32(11) orders.o_custkey, #3 shared-int32 orders.o_year) order by: {}, cost est: 117780000, output card: 15000
                                #0: SecureSqlInput<Bit> ("SELECT c_custkey FROM customer c JOIN nation n1 ON c_nationkey = n_nationkey JOIN region ON r_regionkey = n_regionkey WHERE r_name = 'AFRICA' ORDER BY c_custkey", tuple_count=302) : (#0 shared-int32(11) customer.c_custkey) order by: {}, cost est: 0, output card: 302
                                #1: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_orderyear::INT AS o_year, NOT (o_orderdate >= date '1995-01-01' and o_orderdate < date '1996-12-31') dummy_tag FROM orders ORDER BY o_year, o_orderkey", tuple_count=15000) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-int32 orders.o_year) order by: {}, cost est: 0, output card: 15000
                        #7: Project<Bit> ((<0, P$0(16) shared-int32>, <1, P$2(32) shared-float>, <2, P$4(1) shared-bool>)) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-float volume, #2 shared-bool nation_check) order by: {}, cost est: 0, output card: 60175
                            #6: KeyedJoin<Bit> (P$1(7) == P$3(7)) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float volume, #3 shared-int32(7) supplier.s_suppkey, #4 shared-bool nation_check) order by: {}, cost est: 114332500, output card: 60175
                                #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_suppkey, l_extendedprice * (1.0 - l_discount) AS volume,        CASE            WHEN p_type = 'LARGE ANODIZED STEEL' AND p_partkey = l_partkey THEN FALSE            ELSE TRUE            END AS dummy_tag FROM lineitem LEFT JOIN part ON p_partkey = l_partkey ORDER BY l_orderkey", tuple_count=60175) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float volume) order by: {}, cost est: 0, output card: 60175
                                #5: SecureSqlInput<Bit> ("SELECT s_suppkey, CASE WHEN n_name = 'KENYA' THEN true ELSE false END AS nation_check FROM supplier JOIN nation ON n_nationkey = s_nationkey ORDER BY s_suppkey", tuple_count=100) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-bool nation_check) order by: {}, cost est: 0, output card: 100

Operator #0 SecureSqlInput ran for 0.295000 ms, gate count: 0 output cardinality: 302, row width=12
Operator #1 SecureSqlInput ran for 34.557000 ms, gate count: 0 output cardinality: 15000, row width=60
Operator #2 KeyedJoin ran for 11742.955000 ms, gate count: 122310000 output cardinality: 15000, row width=71
Operator #3 Project ran for 2.735000 ms, gate count: 0 output cardinality: 15000, row width=49
Operator #4 SecureSqlInput ran for 160.726000 ms, gate count: 0 output cardinality: 60175, row width=56
Operator #5 SecureSqlInput ran for 2.139000 ms, gate count: 0 output cardinality: 100, row width=9
Operator #6 KeyedJoin ran for 12568.719000 ms, gate count: 120350000 output cardinality: 60175, row width=64
Operator #7 Project ran for 14.439000 ms, gate count: 0 output cardinality: 60175, row width=50
Operator #8 KeyedJoin ran for 4733040.256000 ms, gate count: 62281125000 output cardinality: 60175, row width=98
Operator #9 Project ran for 390.535000 ms, gate count: 1925600 output cardinality: 60175, row width=97
Operator #-1 Sort ran for 42526.595000 ms, gate count: 512003700 output cardinality: 60175, row width=97
Operator #10 SortMergeAggregate ran for 9652.213000 ms, gate count: 130517472 output cardinality: 60175, row width=97
Operator #11 Project ran for 14987.194000 ms, gate count: 229206576 output cardinality: 60175, row width=65
Operator #12 Sort ran for 33606.415000 ms, gate count: 385972020 output cardinality: 60175, row width=65
Runtime: 4858.89 sec, CPU Time: 3855.23 sec, CPU clock ticks: 3.85523e+09, CPU clock ticks per second: 1000000
End-to-end estimated gates: 6.22811e+10. observed gates: 63783410368 gates, relative error (%)=2.35531
[Linux]Peak resident set size: 1500385280 bytes, current memory size: 506900480 bytes.
Initial Memory: 1500385280 bytes, Peak Memory After Execution: 1500385280 bytes, Memory Usage: 0 bytes
Bandwidth: 7108.43 Bps
[       OK ] CostOptimizedTest.bushy_plan_tpch_q8 (4894031 ms)
[ RUN      ] CostOptimizedTest.bushy_plan_tpch_q9
Connecting to 126.137.1.10 on ports 7657, 65485 as 2
connected
EMP mode: sh2pc, storage mode: column store
Code version: 2eb2d5a8d93445243e1e210aac29447dbdef04e7
GFlags: --flagfile=	--alice_db=tpch_alice_1500	--alice_host=126.137.1.10	--bob_db=tpch_bob_1500	--ctrl_port=65486	--cutoff=100	--filter=*	--party=2	--port=7658	--storage=column	--unioned_db=tpch_unioned_1500	--validation=true	--log_level=2	--logfile=	

[Linux]Peak resident set size: 1500385280 bytes, current memory size: 506900480 bytes.
Original Tree : 
#11: Sort<Bit> ({<0, ASC> , <1, DESC> }) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 o_year, #2 shared-float sum_profit) order by: {<0, ASC> , <1, DESC> }, cost est: 1385772, output card: 175
    #10: SortMergeAggregate<Bit> (group-by: (0, 1) aggs: (SUM($2) sum_profit)) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 o_year, #2 shared-float sum_profit) order by: {<0, ASC> , <1, DESC> }, cost est: 93271250, output card: 175
        #-1: Sort<Bit> ({<0, ASC> , <1, ASC> }) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 o_year, #2 shared-float amount) order by: {<0, ASC> , <1, ASC> }, cost est: 2027595136, output card: 60175
            #9: Project<Bit> ((<0, P$0(200) shared-varchar>, <1, P$8(32) shared-int32>, <2, $7 - ($3 * $6) shared-float>)) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 o_year, #2 shared-float amount) order by: {}, cost est: 274217475, output card: 60175
                #8: KeyedJoin<Bit> ((P$2(7) == P$5(7)) AND (P$1(11) == P$4(11))) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32(11) partsupp.ps_partkey, #2 shared-int32(7) partsupp.ps_suppkey, #3 shared-float partsupp.ps_supplycost, #4 shared-int32(11) lineitem.l_partkey, #5 shared-int32(7) lineitem.l_suppkey, #6 shared-float l_quantity, #7 shared-float volume, #8 shared-int32 o_year) order by: {}, cost est: 7817936000, output card: 60175
                    #3: Project<Bit> ((<0, P$1(200) shared-varchar>, <1, P$2(11) shared-int32>, <2, P$3(7) shared-int32>, <3, P$4(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32(11) partsupp.ps_partkey, #2 shared-int32(7) partsupp.ps_suppkey, #3 shared-float partsupp.ps_supplycost) order by: {}, cost est: 0, output card: 448
                        #2: KeyedJoin<Bit> (P$0(7) == P$3(7)) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(11) partsupp.ps_partkey, #3 shared-int32(7) partsupp.ps_suppkey, #4 shared-float partsupp.ps_supplycost) order by: {}, cost est: 9766400, output card: 448
                            #0: SecureSqlInput<Bit> ("SELECT s_suppkey, n_name FROM supplier JOIN nation ON s_nationkey = n_nationkey ORDER BY n_name, s_suppkey", tuple_count=100) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-varchar(25) nation.n_name) order by: {}, cost est: 0, output card: 100
                            #1: SecureSqlInput<Bit> ("SELECT ps_partkey, ps_suppkey, ps_supplycost FROM partsupp JOIN part ON ps_partkey = p_partkey WHERE p_name LIKE '%yellow%' ORDER BY ps_suppkey, ps_partkey", tuple_count=448) : (#0 shared-int32(11) partsupp.ps_partkey, #1 shared-int32(7) partsupp.ps_suppkey, #2 shared-float partsupp.ps_supplycost) order by: {}, cost est: 0, output card: 448
                    #7: Project<Bit> ((<0, P$1(11) shared-int32>, <1, P$2(7) shared-int32>, <2, P$3(32) shared-float>, <3, P$4(32) shared-float>, <4, P$5(32) shared-int32>)) : (#0 shared-int32(11) lineitem.l_partkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float l_quantity, #3 shared-float volume, #4 shared-int32 o_year) order by: {}, cost est: 0, output card: 60175
                        #6: KeyedJoin<Bit> (P$0(16) == P$6(16)) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(11) lineitem.l_partkey, #2 shared-int32(7) lineitem.l_suppkey, #3 shared-float l_quantity, #4 shared-float volume, #5 shared-int32 o_year, #6 shared-int32(16) orders.o_orderkey) order by: {}, cost est: 61378500000, output card: 60175
                            #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_partkey, l_suppkey, l_quantity::float4, l_extendedprice * (1.0 - l_discount) AS volume FROM lineitem ORDER BY l_orderkey, l_partkey, l_suppkey", tuple_count=60175) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(11) lineitem.l_partkey, #2 shared-int32(7) lineitem.l_suppkey, #3 shared-float l_quantity, #4 shared-float volume) order by: {}, cost est: 0, output card: 60175
                            #5: SecureSqlInput<Bit> ("SELECT EXTRACT('year' FROM o_orderdate)::INT AS o_year, o_orderkey FROM orders ORDER BY o_orderkey", tuple_count=15000) : (#0 shared-int32 o_year, #1 shared-int32(16) orders.o_orderkey) order by: {}, cost est: 0, output card: 15000

Operator #0 SecureSqlInput ran for 1.001000 ms, gate count: 0 output cardinality: 100, row width=208
Operator #1 SecureSqlInput ran for 1.839000 ms, gate count: 0 output cardinality: 448, row width=51
Operator #2 KeyedJoin ran for 629.029000 ms, gate count: 9811200 output cardinality: 448, row width=258
Operator #3 Project ran for 0.614000 ms, gate count: 0 output cardinality: 448, row width=251
Operator #4 SecureSqlInput ran for 286.279000 ms, gate count: 0 output cardinality: 60175, row width=99
Operator #5 SecureSqlInput ran for 29.402000 ms, gate count: 0 output cardinality: 15000, row width=49
Operator #6 KeyedJoin ran for 4836587.542000 ms, gate count: 62281125000 output cardinality: 60175, row width=147
Operator #7 Project ran for 52.530000 ms, gate count: 0 output cardinality: 60175, row width=115
Operator #8 KeyedJoin ran for 498781.483000 ms, gate count: 7413560000 output cardinality: 60175, row width=365
Operator #9 Project ran for 21277.453000 ms, gate count: 274217476 output cardinality: 60175, row width=265
Operator #-1 Sort ran for 171008.008000 ms, gate count: 1961368020 output cardinality: 60175, row width=265
Operator #10 SortMergeAggregate ran for 8015.554000 ms, gate count: 91464512 output cardinality: 60175, row width=265
Operator #11 Sort ran for 171693.658000 ms, gate count: 1965098872 output cardinality: 60175, row width=265
Runtime: 5708.58 sec, CPU Time: 4504.28 sec, CPU clock ticks: 4.50428e+09, CPU clock ticks per second: 1000000
End-to-end estimated gates: 7.16027e+10. observed gates: 73996645080 gates, relative error (%)=3.23524
[Linux]Peak resident set size: 1711435776 bytes, current memory size: 823148544 bytes.
Initial Memory: 1500385280 bytes, Peak Memory After Execution: 1711435776 bytes, Memory Usage: 211050496 bytes
Bandwidth: 9515.07 Bps
[       OK ] CostOptimizedTest.bushy_plan_tpch_q9 (5882900 ms)
