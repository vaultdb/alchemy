[==========] Running 12 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 12 tests from GeneralizedComparisonTest
[ RUN      ] GeneralizedComparisonTest.baseline_tpch_q1
Connecting to 127.0.0.1 on ports 7654, 65482 as 1
party 1 connected to TP
GB connected to 2
GB connected to 3
party 1 connected to TP
GB connected to 2
GB connected to 3
initializing cot
setup finished! takes 1267.26ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 1410596864 bytes, current memory size: 1366163456 bytes.
1410596864
EMP mode: outsourced, storage mode: column store
Code version: 96247511b7ad7fdad4a2a5cf8ed3e14b15d4218a
GFlags: --flagfile=	--alice_db=tpch_alice_150	--alice_host=127.0.0.1	--bob_db=tpch_bob_150	--ctrl_port=65482	--cutoff=100	--filter=*	--party=1	--port=7654	--storage=column	--unioned_db=tpch_unioned_150	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 1410596864 bytes, current memory size: 1366818816 bytes.
Original Tree : 
#3: Sort<Bit> ({<0, ASC> , <1, ASC> }) : (#0 shared-varchar(1) lineitem.l_returnflag, #1 shared-varchar(1) lineitem.l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty, #7 shared-float avg_price, #8 shared-float avg_disc, #9 shared-int64(11) count_order) order by: {<0, ASC> , <1, ASC> }, cost est: 12522041, output card: 1500
    #2: SortMergeAggregate<Bit> (group-by: (0, 1) aggs: (SUM($2) sum_qty, SUM($3) sum_base_price, SUM($5) sum_disc_price, SUM($6) sum_charge, AVG($2) avg_qty, AVG($3) avg_price, AVG($4) avg_disc, COUNT(*) count_order)) : (#0 shared-varchar(1) lineitem.l_returnflag, #1 shared-varchar(1) lineitem.l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty, #7 shared-float avg_price, #8 shared-float avg_disc, #9 shared-int64(11) count_order) order by: {<0, ASC> , <1, ASC> }, cost est: 33405000, output card: 1500
        #-1: Sort<Bit> ({<0, ASC> , <1, ASC> }) : (#0 shared-varchar(1) lineitem.l_returnflag, #1 shared-varchar(1) lineitem.l_linestatus, #2 shared-float lineitem.l_quantity, #3 shared-float lineitem.l_extendedprice, #4 shared-float lineitem.l_discount, #5 shared-float disc_price, #6 shared-float charge) order by: {<0, ASC> , <1, ASC> }, cost est: 9094475, output card: 1500
            #1: Project<Bit> ((<0, P$4(8) shared-varchar>, <1, P$5(8) shared-varchar>, <2, P$0(32) shared-float>, <3, P$1(32) shared-float>, <4, P$2(32) shared-float>, <5, $1 * (SECRET FLOAT - $2) shared-float>, <6, ($1 * (SECRET FLOAT - $2)) * (SECRET FLOAT + $3) shared-float>)) : (#0 shared-varchar(1) lineitem.l_returnflag, #1 shared-varchar(1) lineitem.l_linestatus, #2 shared-float lineitem.l_quantity, #3 shared-float lineitem.l_extendedprice, #4 shared-float lineitem.l_discount, #5 shared-float disc_price, #6 shared-float charge) order by: {}, cost est: 34177500, output card: 1500
                #0: SecureSqlInput<Bit> ("SELECT l_quantity, l_extendedprice, l_discount, l_tax, l_returnflag, l_linestatus, NOT l_shipdate <= DATE '1998-08-03' AS dummy_tag FROM lineitem", tuple_count=1500) : (#0 shared-float lineitem.l_quantity, #1 shared-float lineitem.l_extendedprice, #2 shared-float lineitem.l_discount, #3 shared-float lineitem.l_tax, #4 shared-varchar(1) lineitem.l_returnflag, #5 shared-varchar(1) lineitem.l_linestatus) order by: {}, cost est: 0, output card: 1500

Operator #0 SecureSqlInput ran for 118.786000 ms, gate count: 0 output cardinality: 1500, row width=145
extension finished! takes 759.569ms to extend lpn
extension finished! takes 713.145ms to extend lpn
extension finished! takes 1619.62ms to extend lpn
extension finished! takes 1030.54ms to extend lpn
Operator #1 Project ran for 14804.447000 ms, gate count: 20506500 output cardinality: 1500, row width=177
extension finished! takes 719.24ms to extend lpn
Operator #-1 Sort ran for 5061.575000 ms, gate count: 9279558 output cardinality: 1500, row width=177
extension finished! takes 707.751ms to extend lpn
extension finished! takes 1559.04ms to extend lpn
extension finished! takes 1026.2ms to extend lpn
extension finished! takes 703.469ms to extend lpn
extension finished! takes 712.046ms to extend lpn
extension finished! takes 786.782ms to extend lpn
extension finished! takes 816.513ms to extend lpn
Operator #2 SortMergeAggregate ran for 22969.381000 ms, gate count: 32971759 output cardinality: 1500, row width=252
extension finished! takes 882.13ms to extend lpn
extension finished! takes 744.517ms to extend lpn
extension finished! takes 727.249ms to extend lpn
Operator #3 Sort ran for 7880.762000 ms, gate count: 12547008 output cardinality: 1500, row width=252
Runtime: 50.8642 sec, CPU Time: 76.3799 sec, CPU clock ticks: 7.63799e+07, CPU clock ticks per second: 1000000
End-to-end estimated gates: 8.9199e+07. observed gates: 75304825 gates, relative error (%)=18.4506
[Linux]Peak resident set size: 1862598656 bytes, current memory size: 1813164032 bytes.
Initial Memory: 1410596864 bytes, Peak Memory After Execution: 1862598656 bytes, Memory Usage: 452001792 bytes
Bandwidth: 0 Bps
party 1 send 0 bytes to party 2
party 1 send 0 bytes to party 3
party 1 send 0 bytes to TP 
total AND gate: 75304825
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.baseline_tpch_q1 (66669 ms)
[ RUN      ] GeneralizedComparisonTest.baseline_tpch_q3
Connecting to 127.0.0.1 on ports 7654, 65482 as 1
party 1 connected to TP
GB connected to 2
GB connected to 3
party 1 connected to TP
GB connected to 2
GB connected to 3
initializing cot
setup finished! takes 919.515ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 1862598656 bytes, current memory size: 1806741504 bytes.
1862598656
EMP mode: outsourced, storage mode: column store
Code version: 96247511b7ad7fdad4a2a5cf8ed3e14b15d4218a
GFlags: --flagfile=	--alice_db=tpch_alice_150	--alice_host=127.0.0.1	--bob_db=tpch_bob_150	--ctrl_port=65482	--cutoff=100	--filter=*	--party=1	--port=7654	--storage=column	--unioned_db=tpch_unioned_150	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 1862598656 bytes, current memory size: 1806741504 bytes.
Original Tree : 
#10: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$3(32) shared-float>, <2, P$1(28) shared-int64>, <3, P$2(32) shared-int32>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-float revenue, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32 orders.o_shippriority) order by: {<-1, ASC> , <1, DESC> , <2, ASC> }, cost est: 0, output card: 10
    #9: Sort<Bit> ({<-1, ASC> , <3, DESC> , <1, ASC> }) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<-1, ASC> , <3, DESC> , <1, ASC> }, cost est: 6317, output card: 10
        #8: SortMergeAggregate<Bit> (group-by: (0, 1, 2) aggs: (SUM($3) revenue)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<0, ASC> , <1, ASC> , <2, ASC> }, cost est: 1854000, output card: 1500
            #-1: Sort<Bit> ({<0, ASC> , <1, ASC> , <2, ASC> }) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<0, ASC> , <1, ASC> , <2, ASC> }, cost est: 8591765, output card: 1500
                #7: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$1(28) shared-int64>, <2, P$2(32) shared-int32>, <3, P$4(32) shared-float>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {}, cost est: 0, output card: 1500
                    #6: KeyedJoin<Bit> (P$0(13) == P$3(13)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-int32(13) lineitem.l_orderkey, #4 shared-float revenue) order by: {}, cost est: 202500000, output card: 1500
                        #3: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$2(28) shared-int64>, <2, P$3(32) shared-int32>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority) order by: {}, cost est: 0, output card: 1500
                            #2: KeyedJoin<Bit> (P$1(8) == P$4(8)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32 orders.o_shippriority, #4 shared-int32(8) customer.c_custkey) order by: {}, cost est: 4500000, output card: 1500
                                #0: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_orderdate, o_shippriority, NOT o_orderdate < DATE '1995-03-25' AS dummy_tag FROM orders", tuple_count=1500) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32 orders.o_shippriority) order by: {}, cost est: 0, output card: 1500
                                #1: SecureSqlInput<Bit> ("SELECT c_custkey, NOT c_mktsegment = 'HOUSEHOLD' AS dummy_tag FROM customer", tuple_count=150) : (#0 shared-int32(8) customer.c_custkey) order by: {}, cost est: 0, output card: 150
                        #5: Project<Bit> ((<0, P$0(13) shared-int32>, <1, $1 * (SECRET FLOAT - $2) shared-float>)) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-float revenue) order by: {}, cost est: 6835500, output card: 1500
                            #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_extendedprice, l_discount, NOT l_shipdate > DATE '1995-03-25' AS dummy_tag FROM lineitem", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-float lineitem.l_extendedprice, #2 shared-float lineitem.l_discount) order by: {}, cost est: 0, output card: 1500

Operator #0 SecureSqlInput ran for 37.592000 ms, gate count: 0 output cardinality: 1500, row width=82
Operator #1 SecureSqlInput ran for 0.284000 ms, gate count: 0 output cardinality: 150, row width=9
Operator #2 KeyedJoin ran for 3235.337000 ms, gate count: 4725000 output cardinality: 1500, row width=90
Operator #3 Project ran for 24.039000 ms, gate count: 0 output cardinality: 1500, row width=74
Operator #4 SecureSqlInput ran for 37.974000 ms, gate count: 0 output cardinality: 1500, row width=78
extension finished! takes 1346.47ms to extend lpn
extension finished! takes 831.746ms to extend lpn
Operator #5 Project ran for 5699.850000 ms, gate count: 6835500 output cardinality: 1500, row width=46
extension finished! takes 725.007ms to extend lpn
extension finished! takes 830.974ms to extend lpn
extension finished! takes 1185.43ms to extend lpn
extension finished! takes 859.793ms to extend lpn
extension finished! takes 727.128ms to extend lpn
extension finished! takes 713.967ms to extend lpn
extension finished! takes 1517.09ms to extend lpn
extension finished! takes 856.921ms to extend lpn
extension finished! takes 732.473ms to extend lpn
extension finished! takes 718.851ms to extend lpn
extension finished! takes 1503.02ms to extend lpn
extension finished! takes 891.139ms to extend lpn
extension finished! takes 718.478ms to extend lpn
extension finished! takes 714.527ms to extend lpn
extension finished! takes 1610.95ms to extend lpn
extension finished! takes 1192.37ms to extend lpn
extension finished! takes 756.254ms to extend lpn
extension finished! takes 727.652ms to extend lpn
extension finished! takes 923.63ms to extend lpn
extension finished! takes 1195.39ms to extend lpn
extension finished! takes 814.472ms to extend lpn
extension finished! takes 720.862ms to extend lpn
extension finished! takes 723.103ms to extend lpn
extension finished! takes 1758.11ms to extend lpn
extension finished! takes 1022.73ms to extend lpn
extension finished! takes 733.853ms to extend lpn
extension finished! takes 740.25ms to extend lpn
extension finished! takes 1844.83ms to extend lpn
extension finished! takes 1107.19ms to extend lpn
extension finished! takes 711.933ms to extend lpn
extension finished! takes 710.088ms to extend lpn
extension finished! takes 1490.24ms to extend lpn
extension finished! takes 1154.3ms to extend lpn
extension finished! takes 853.073ms to extend lpn
extension finished! takes 715.874ms to extend lpn
extension finished! takes 732.518ms to extend lpn
extension finished! takes 1083.64ms to extend lpn
extension finished! takes 1174.99ms to extend lpn
extension finished! takes 750.211ms to extend lpn
extension finished! takes 727.432ms to extend lpn
extension finished! takes 785.006ms to extend lpn
Operator #6 KeyedJoin ran for 138997.976000 ms, gate count: 204750000 output cardinality: 1500, row width=119
Operator #7 Project ran for 30.506000 ms, gate count: 0 output cardinality: 1500, row width=106
extension finished! takes 1376.44ms to extend lpn
extension finished! takes 895.857ms to extend lpn
Operator #-1 Sort ran for 9266.287000 ms, gate count: 11414292 output cardinality: 1500, row width=106
Operator #8 SortMergeAggregate ran for 726.588000 ms, gate count: 1809325 output cardinality: 1500, row width=106
extension finished! takes 736.117ms to extend lpn
extension finished! takes 731.712ms to extend lpn
extension finished! takes 1300.65ms to extend lpn
extension finished! takes 975.008ms to extend lpn
extension finished! takes 728.225ms to extend lpn
Operator #9 Sort ran for 17810.353000 ms, gate count: 26008902 output cardinality: 10, row width=106
Operator #10 Project ran for 0.061000 ms, gate count: 0 output cardinality: 10, row width=106
Runtime: 175.9 sec, CPU Time: 264.244 sec, CPU clock ticks: 2.64244e+08, CPU clock ticks per second: 1000000
End-to-end estimated gates: 2.24288e+08. observed gates: 255543019 gates, relative error (%)=12.231
[Linux]Peak resident set size: 1862598656 bytes, current memory size: 1802067968 bytes.
Initial Memory: 1862598656 bytes, Peak Memory After Execution: 1862598656 bytes, Memory Usage: 0 bytes
Bandwidth: 0 Bps
party 1 send 0 bytes to party 2
party 1 send 0 bytes to party 3
party 1 send 0 bytes to TP 
total AND gate: 255543019
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.baseline_tpch_q3 (176963 ms)
[ RUN      ] GeneralizedComparisonTest.baseline_tpch_q5
Connecting to 127.0.0.1 on ports 7654, 65482 as 1
party 1 connected to TP
GB connected to 2
GB connected to 3
party 1 connected to TP
GB connected to 2
GB connected to 3
initializing cot
setup finished! takes 756.155ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 1862598656 bytes, current memory size: 1802043392 bytes.
1862598656
EMP mode: outsourced, storage mode: column store
Code version: 96247511b7ad7fdad4a2a5cf8ed3e14b15d4218a
GFlags: --flagfile=	--alice_db=tpch_alice_150	--alice_host=127.0.0.1	--bob_db=tpch_bob_150	--ctrl_port=65482	--cutoff=100	--filter=*	--party=1	--port=7654	--storage=column	--unioned_db=tpch_unioned_150	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 1862598656 bytes, current memory size: 1802043392 bytes.
Original Tree : 
#12: Sort<Bit> ({<1, DESC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<1, DESC> }, cost est: 12247836, output card: 1500
    #11: SortMergeAggregate<Bit> (group-by: (0) aggs: (SUM($1) revenue)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 2229000, output card: 1500
        #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 19925584, output card: 1500
            #10: Project<Bit> ((<0, P$5(200) shared-varchar>, <1, P$1(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {}, cost est: 0, output card: 1500
                #9: KeyedJoin<Bit> (($0 == $4) AND (P$2(8) == P$3(8))) : (#0 shared-int32(5) supplier.c_nationkey, #1 shared-float revenue, #2 shared-int32(8) orders.o_custkey, #3 shared-int32(8) customer.c_custkey, #4 shared-int32(5) customer.c_nationkey, #5 shared-varchar(25) nation.n_name) order by: {}, cost est: 9882000, output card: 1500
                    #7: Project<Bit> ((<0, P$0(5) shared-int32>, <1, P$2(32) shared-float>, <2, P$4(8) shared-int32>)) : (#0 shared-int32(5) supplier.c_nationkey, #1 shared-float revenue, #2 shared-int32(8) orders.o_custkey) order by: {}, cost est: 0, output card: 1500
                        #6: KeyedJoin<Bit> (P$1(13) == P$3(13)) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(13) lineitem.l_orderkey, #2 shared-float revenue, #3 shared-int32(13) orders.o_orderkey, #4 shared-int32(8) orders.o_custkey) order by: {}, cost est: 85500000, output card: 1500
                            #4: Project<Bit> ((<0, P$1(5) shared-int32>, <1, P$2(13) shared-int32>, <2, P$4(32) shared-float>)) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(13) lineitem.l_orderkey, #2 shared-float revenue) order by: {}, cost est: 0, output card: 1500
                                #3: KeyedJoin<Bit> (P$0(4) == P$3(4)) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey, #2 shared-int32(13) lineitem.l_orderkey, #3 shared-int32(4) lineitem.l_suppkey, #4 shared-float revenue) order by: {}, cost est: 51000, output card: 1500
                                    #0: SecureSqlInput<Bit> ("SELECT s_suppkey, s_nationkey FROM supplier JOIN nation ON s_nationkey = n_nationkey JOIN region ON n_regionkey = r_regionkey WHERE r_name = 'MIDDLE EAST '", tuple_count=2) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey) order by: {}, cost est: 0, output card: 2
                                    #2: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$1(4) shared-int32>, <2, $2 * (SECRET FLOAT - $3) shared-float>)) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float revenue) order by: {}, cost est: 6835500, output card: 1500
                                        #1: SecureSqlInput<Bit> ("SELECT l_orderkey, l_suppkey, l_extendedprice, l_discount FROM lineitem", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float lineitem.l_extendedprice, #3 shared-float lineitem.l_discount) order by: {}, cost est: 0, output card: 1500
                            #5: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, NOT (o_orderdate >= DATE '1993-01-01' AND o_orderdate < DATE '1994-01-01') AS dummy_tag FROM orders", tuple_count=1500) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey) order by: {}, cost est: 0, output card: 1500
                    #8: SecureSqlInput<Bit> ("SELECT t2.c_custkey, t2.c_nationkey, t1.n_name FROM (SELECT r_regionkey, r_name FROM region WHERE r_name = 'MIDDLE EAST ') AS t0 INNER JOIN (SELECT n_nationkey, n_name, n_regionkey FROM nation) AS t1 ON t0.r_regionkey = t1.n_regionkey INNER JOIN (SELECT c_custkey, c_nationkey FROM customer) AS t2 ON t1.n_nationkey = t2.c_nationkey ORDER BY t2.c_custkey ASC", tuple_count=27) : (#0 shared-int32(8) customer.c_custkey, #1 shared-int32(5) customer.c_nationkey, #2 shared-varchar(25) nation.n_name) order by: {}, cost est: 0, output card: 27

Operator #0 SecureSqlInput ran for 0.333000 ms, gate count: 0 output cardinality: 2, row width=10
Operator #1 SecureSqlInput ran for 16.707000 ms, gate count: 0 output cardinality: 1500, row width=82
extension finished! takes 1423.6ms to extend lpn
Operator #2 Project ran for 5183.996000 ms, gate count: 6835500 output cardinality: 1500, row width=50
Operator #3 KeyedJoin ran for 81.520000 ms, gate count: 54000 output cardinality: 1500, row width=59
Operator #4 Project ran for 22.594000 ms, gate count: 0 output cardinality: 1500, row width=51
Operator #5 SecureSqlInput ran for 16.667000 ms, gate count: 0 output cardinality: 1500, row width=22
extension finished! takes 1456.68ms to extend lpn
extension finished! takes 707.136ms to extend lpn
extension finished! takes 697.219ms to extend lpn
extension finished! takes 1118.76ms to extend lpn
extension finished! takes 1293.37ms to extend lpn
extension finished! takes 760.32ms to extend lpn
extension finished! takes 710.003ms to extend lpn
extension finished! takes 812.339ms to extend lpn
extension finished! takes 1414.69ms to extend lpn
extension finished! takes 1085.08ms to extend lpn
extension finished! takes 695.817ms to extend lpn
extension finished! takes 702.43ms to extend lpn
extension finished! takes 1323.41ms to extend lpn
extension finished! takes 1206.55ms to extend lpn
extension finished! takes 705.361ms to extend lpn
extension finished! takes 704.892ms to extend lpn
extension finished! takes 930.689ms to extend lpn
Operator #6 KeyedJoin ran for 61226.758000 ms, gate count: 87750000 output cardinality: 1500, row width=72
Operator #7 Project ran for 12.267000 ms, gate count: 0 output cardinality: 1500, row width=46
Operator #8 SecureSqlInput ran for 1.545000 ms, gate count: 0 output cardinality: 27, row width=214
extension finished! takes 1376.37ms to extend lpn
extension finished! takes 926.346ms to extend lpn
extension finished! takes 714.399ms to extend lpn
Operator #9 KeyedJoin ran for 8729.685000 ms, gate count: 11745000 output cardinality: 1500, row width=259
Operator #10 Project ran for 27.375000 ms, gate count: 0 output cardinality: 1500, row width=233
extension finished! takes 727.527ms to extend lpn
extension finished! takes 1335.84ms to extend lpn
extension finished! takes 1285.07ms to extend lpn
extension finished! takes 729.816ms to extend lpn
extension finished! takes 739.231ms to extend lpn
Operator #-1 Sort ran for 19447.081000 ms, gate count: 27664410 output cardinality: 1500, row width=233
extension finished! takes 1379.15ms to extend lpn
Operator #11 SortMergeAggregate ran for 2758.846000 ms, gate count: 2181077 output cardinality: 1500, row width=233
extension finished! takes 1373.94ms to extend lpn
extension finished! takes 749.756ms to extend lpn
extension finished! takes 736.882ms to extend lpn
extension finished! takes 1541.02ms to extend lpn
extension finished! takes 1336.36ms to extend lpn
Operator #12 Sort ran for 20142.131000 ms, gate count: 28753560 output cardinality: 1500, row width=233
Runtime: 117.704 sec, CPU Time: 177.565 sec, CPU clock ticks: 1.77565e+08, CPU clock ticks per second: 1000000
End-to-end estimated gates: 1.36671e+08. observed gates: 164983547 gates, relative error (%)=17.1609
[Linux]Peak resident set size: 1900425216 bytes, current memory size: 1822064640 bytes.
Initial Memory: 1862598656 bytes, Peak Memory After Execution: 1900425216 bytes, Memory Usage: 37826560 bytes
Bandwidth: 0 Bps
party 1 send 0 bytes to party 2
party 1 send 0 bytes to party 3
party 1 send 0 bytes to TP 
total AND gate: 164983547
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.baseline_tpch_q5 (118618 ms)
[ RUN      ] GeneralizedComparisonTest.baseline_tpch_q8
Connecting to 127.0.0.1 on ports 7654, 65482 as 1
party 1 connected to TP
GB connected to 2
GB connected to 3
party 1 connected to TP
GB connected to 2
GB connected to 3
initializing cot
setup finished! takes 1037.89ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 1900425216 bytes, current memory size: 1854545920 bytes.
1900425216
EMP mode: outsourced, storage mode: column store
Code version: 96247511b7ad7fdad4a2a5cf8ed3e14b15d4218a
GFlags: --flagfile=	--alice_db=tpch_alice_150	--alice_host=127.0.0.1	--bob_db=tpch_bob_150	--ctrl_port=65482	--cutoff=100	--filter=*	--party=1	--port=7654	--storage=column	--unioned_db=tpch_unioned_150	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 1900425216 bytes, current memory size: 1854545920 bytes.
Original Tree : 
#13: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32 orders.o_year, #1 shared-float mkt_share) order by: {<0, ASC> }, cost est: 4570088, output card: 1500
    #12: Project<Bit> ((<0, P$0(32) shared-int32>, <1, $2 / $1 shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float mkt_share) order by: {<0, ASC> }, cost est: 5713500, output card: 1500
        #11: SortMergeAggregate<Bit> (group-by: (0) aggs: (SUM($1) null, SUM($2) null)) : (#0 shared-int32 orders.o_year, #1 shared-float null, #2 shared-float null) order by: {<0, ASC> }, cost est: 3450000, output card: 1500
            #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32 orders.o_year, #1 shared-float volume, #2 shared-float selected_volume) order by: {<0, ASC> }, cost est: 6032516, output card: 1500
                #10: Project<Bit> ((<0, P$0(32) shared-int32>, <1, P$2(32) shared-float>, <2, CASE($4, $2, SECRET FLOAT) shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float volume, #2 shared-float selected_volume) order by: {}, cost est: 0, output card: 1500
                    #9: KeyedJoin<Bit> (P$1(4) == P$3(4)) : (#0 shared-int32 orders.o_year, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float volume, #3 shared-int32(4) supplier.s_suppkey, #4 shared-bool nation_check) order by: {}, cost est: 195000, output card: 1500
                        #7: Project<Bit> ((<0, P$1(32) shared-int32>, <1, P$3(4) shared-int32>, <2, P$4(32) shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float volume) order by: {}, cost est: 0, output card: 1500
                            #6: KeyedJoin<Bit> (P$0(13) == P$2(13)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32 orders.o_year, #2 shared-int32(13) lineitem.l_orderkey, #3 shared-int32(4) lineitem.l_suppkey, #4 shared-float revenue) order by: {}, cost est: 148500000, output card: 1500
                                #3: Project<Bit> ((<0, P$1(13) shared-int32>, <1, P$3(32) shared-int32>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32 orders.o_year) order by: {}, cost est: 0, output card: 1500
                                    #2: KeyedJoin<Bit> (P$0(8) == P$2(8)) : (#0 shared-int32(8) customer.c_custkey, #1 shared-int32(13) orders.o_orderkey, #2 shared-int32(8) orders.o_custkey, #3 shared-int32 orders.o_year) order by: {}, cost est: 870000, output card: 1500
                                        #0: SecureSqlInput<Bit> ("SELECT c_custkey FROM customer c JOIN nation n1 ON c_nationkey = n_nationkey JOIN region ON r_regionkey = n_regionkey WHERE r_name = 'AFRICA'", tuple_count=29) : (#0 shared-int32(8) customer.c_custkey) order by: {}, cost est: 0, output card: 29
                                        #1: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_orderyear::INT AS o_year, NOT (o_orderdate >= date '1995-01-01' and o_orderdate < date '1996-12-31') dummy_tag FROM orders", tuple_count=1500) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-int32 orders.o_year) order by: {}, cost est: 0, output card: 1500
                                #5: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$1(4) shared-int32>, <2, $2 * (SECRET FLOAT - $3) shared-float>)) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float revenue) order by: {}, cost est: 6835500, output card: 1500
                                    #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_suppkey, l_extendedprice, l_discount,        CASE            WHEN p_type = 'LARGE ANODIZED STEEL' AND p_partkey = l_partkey THEN FALSE            ELSE TRUE            END AS dummy_tag FROM lineitem LEFT JOIN part ON p_partkey = l_partkey", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float lineitem.l_extendedprice, #3 shared-float lineitem.l_discount) order by: {}, cost est: 0, output card: 1500
                        #8: SecureSqlInput<Bit> ("SELECT s_suppkey, CASE WHEN n_name = 'KENYA' THEN true ELSE false END AS nation_check FROM supplier JOIN nation ON n_nationkey = s_nationkey", tuple_count=10) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-bool nation_check) order by: {}, cost est: 0, output card: 10

Operator #0 SecureSqlInput ran for 0.500000 ms, gate count: 0 output cardinality: 29, row width=9
Operator #1 SecureSqlInput ran for 16.957000 ms, gate count: 0 output cardinality: 1500, row width=54
Operator #2 KeyedJoin ran for 486.617000 ms, gate count: 913500 output cardinality: 1500, row width=62
Operator #3 Project ran for 8.019000 ms, gate count: 0 output cardinality: 1500, row width=46
Operator #4 SecureSqlInput ran for 23.987000 ms, gate count: 0 output cardinality: 1500, row width=82
extension finished! takes 717.822ms to extend lpn
Operator #5 Project ran for 4034.997000 ms, gate count: 6835500 output cardinality: 1500, row width=50
extension finished! takes 1225.48ms to extend lpn
extension finished! takes 1432.48ms to extend lpn
extension finished! takes 1001.02ms to extend lpn
extension finished! takes 732.701ms to extend lpn
extension finished! takes 723.803ms to extend lpn
extension finished! takes 1285.74ms to extend lpn
extension finished! takes 1445.45ms to extend lpn
extension finished! takes 739.589ms to extend lpn
extension finished! takes 730.762ms to extend lpn
extension finished! takes 1466.14ms to extend lpn
extension finished! takes 1485.51ms to extend lpn
extension finished! takes 745.334ms to extend lpn
extension finished! takes 722.53ms to extend lpn
extension finished! takes 1936.5ms to extend lpn
extension finished! takes 1516.82ms to extend lpn
extension finished! takes 729.814ms to extend lpn
extension finished! takes 724.441ms to extend lpn
extension finished! takes 2026.44ms to extend lpn
extension finished! takes 1529.32ms to extend lpn
extension finished! takes 722.298ms to extend lpn
extension finished! takes 729.59ms to extend lpn
extension finished! takes 2140.02ms to extend lpn
extension finished! takes 1594.5ms to extend lpn
extension finished! takes 738.935ms to extend lpn
extension finished! takes 722.835ms to extend lpn
extension finished! takes 1993.13ms to extend lpn
extension finished! takes 1570.56ms to extend lpn
extension finished! takes 748.538ms to extend lpn
extension finished! takes 731.909ms to extend lpn
extension finished! takes 1826.97ms to extend lpn
Operator #6 KeyedJoin ran for 116400.210000 ms, gate count: 150750000 output cardinality: 1500, row width=95
Operator #7 Project ran for 19.909000 ms, gate count: 0 output cardinality: 1500, row width=69
Operator #8 SecureSqlInput ran for 0.075000 ms, gate count: 0 output cardinality: 10, row width=6
Operator #9 KeyedJoin ran for 143.270000 ms, gate count: 210000 output cardinality: 1500, row width=74
Operator #10 Project ran for 72.773000 ms, gate count: 48000 output cardinality: 1500, row width=97
extension finished! takes 1492.39ms to extend lpn
extension finished! takes 732.354ms to extend lpn
Operator #-1 Sort ran for 6433.178000 ms, gate count: 7101258 output cardinality: 1500, row width=97
Operator #11 SortMergeAggregate ran for 1261.890000 ms, gate count: 3251395 output cardinality: 1500, row width=97
extension finished! takes 723.858ms to extend lpn
Operator #12 Project ran for 3348.986000 ms, gate count: 5713500 output cardinality: 1500, row width=65
extension finished! takes 1870.11ms to extend lpn
extension finished! takes 1510.47ms to extend lpn
Operator #13 Sort ran for 7223.367000 ms, gate count: 5707146 output cardinality: 1500, row width=65
Runtime: 139.51 sec, CPU Time: 229.495 sec, CPU clock ticks: 2.29495e+08, CPU clock ticks per second: 1000000
End-to-end estimated gates: 1.76167e+08. observed gates: 180530299 gates, relative error (%)=2.41715
[Linux]Peak resident set size: 1903013888 bytes, current memory size: 1888407552 bytes.
Initial Memory: 1900425216 bytes, Peak Memory After Execution: 1903013888 bytes, Memory Usage: 2588672 bytes
Bandwidth: 0 Bps
party 1 send 0 bytes to party 2
party 1 send 0 bytes to party 3
party 1 send 0 bytes to TP 
total AND gate: 180530299
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.baseline_tpch_q8 (140720 ms)
[ RUN      ] GeneralizedComparisonTest.baseline_tpch_q9
Connecting to 127.0.0.1 on ports 7654, 65482 as 1
party 1 connected to TP
GB connected to 2
GB connected to 3
party 1 connected to TP
GB connected to 2
GB connected to 3
initializing cot
setup finished! takes 1494.31ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 1903013888 bytes, current memory size: 1857175552 bytes.
1903013888
EMP mode: outsourced, storage mode: column store
Code version: 96247511b7ad7fdad4a2a5cf8ed3e14b15d4218a
GFlags: --flagfile=	--alice_db=tpch_alice_150	--alice_host=127.0.0.1	--bob_db=tpch_bob_150	--ctrl_port=65482	--cutoff=100	--filter=*	--party=1	--port=7654	--storage=column	--unioned_db=tpch_unioned_150	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 1903013888 bytes, current memory size: 1857175552 bytes.
Original Tree : 
#12: Sort<Bit> ({<0, ASC> , <1, DESC> }) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 amount, #2 shared-float sum_profit) order by: {<0, ASC> , <1, DESC> }, cost est: 22987542, output card: 1500
    #11: SortMergeAggregate<Bit> (group-by: (0, 1) aggs: (SUM($2) sum_profit)) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 amount, #2 shared-float sum_profit) order by: {<0, ASC> , <1, ASC> }, cost est: 2325000, output card: 1500
        #-1: Sort<Bit> ({<0, ASC> , <1, ASC> }) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 amount, #2 shared-float o_year) order by: {<0, ASC> , <1, ASC> }, cost est: 22987542, output card: 1500
            #10: Project<Bit> ((<0, P$0(200) shared-varchar>, <1, P$3(32) shared-int32>, <2, P$2(32) shared-float>)) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 amount, #2 shared-float o_year) order by: {}, cost est: 0, output card: 1500
                #9: KeyedJoin<Bit> (P$1(13) == P$4(13)) : (#0 shared-varchar(25) nation.nation, #1 shared-int32(13) lineitem.l_orderkey, #2 shared-float amount, #3 shared-int32 o_year, #4 shared-int32(13) orders.o_orderkey) order by: {}, cost est: 139500000, output card: 1500
                    #7: Project<Bit> ((<0, P$0(200) shared-varchar>, <1, P$4(13) shared-int32>, <2, $8 - ($3 * $7) shared-float>)) : (#0 shared-varchar(25) nation.nation, #1 shared-int32(13) lineitem.l_orderkey, #2 shared-float amount) order by: {}, cost est: 6835500, output card: 1500
                        #6: KeyedJoin<Bit> ((P$2(4) == P$6(4)) AND (P$1(8) == P$5(8))) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32(8) partsupp.ps_partkey, #2 shared-int32(4) partsupp.ps_suppkey, #3 shared-float partsupp.ps_supplycost, #4 shared-int32(13) lineitem.l_orderkey, #5 shared-int32(8) lineitem.l_partkey, #6 shared-int32(4) lineitem.l_suppkey, #7 shared-float l_quantity, #8 shared-float revenue) order by: {}, cost est: 22848000, output card: 1500
                            #3: Project<Bit> ((<0, P$1(200) shared-varchar>, <1, P$2(8) shared-int32>, <2, P$3(4) shared-int32>, <3, P$4(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32(8) partsupp.ps_partkey, #2 shared-int32(4) partsupp.ps_suppkey, #3 shared-float partsupp.ps_supplycost) order by: {}, cost est: 0, output card: 56
                                #2: KeyedJoin<Bit> (P$0(4) == P$3(4)) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(8) partsupp.ps_partkey, #3 shared-int32(4) partsupp.ps_suppkey, #4 shared-float partsupp.ps_supplycost) order by: {}, cost est: 118720, output card: 56
                                    #0: SecureSqlInput<Bit> ("SELECT s_suppkey, n_name FROM supplier JOIN nation ON s_nationkey = n_nationkey", tuple_count=10) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-varchar(25) nation.n_name) order by: {}, cost est: 0, output card: 10
                                    #1: SecureSqlInput<Bit> ("SELECT ps_partkey, ps_suppkey, ps_supplycost FROM partsupp JOIN part ON ps_partkey = p_partkey WHERE p_name LIKE '%yellow%'", tuple_count=56) : (#0 shared-int32(8) partsupp.ps_partkey, #1 shared-int32(4) partsupp.ps_suppkey, #2 shared-float partsupp.ps_supplycost) order by: {}, cost est: 0, output card: 56
                            #5: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$1(8) shared-int32>, <2, P$2(4) shared-int32>, <3, P$3(32) shared-float>, <4, $4 * (SECRET FLOAT - $5) shared-float>)) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(8) lineitem.l_partkey, #2 shared-int32(4) lineitem.l_suppkey, #3 shared-float l_quantity, #4 shared-float revenue) order by: {}, cost est: 6835500, output card: 1500
                                #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_partkey, l_suppkey, l_quantity::float4, l_extendedprice, l_discount FROM lineitem", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(8) lineitem.l_partkey, #2 shared-int32(4) lineitem.l_suppkey, #3 shared-float l_quantity, #4 shared-float lineitem.l_extendedprice, #5 shared-float lineitem.l_discount) order by: {}, cost est: 0, output card: 1500
                    #8: SecureSqlInput<Bit> ("SELECT EXTRACT('year' FROM o_orderdate)::INT AS o_year, o_orderkey FROM orders", tuple_count=1500) : (#0 shared-int32 o_year, #1 shared-int32(13) orders.o_orderkey) order by: {}, cost est: 0, output card: 1500

Operator #0 SecureSqlInput ran for 1.250000 ms, gate count: 0 output cardinality: 10, row width=205
Operator #1 SecureSqlInput ran for 0.588000 ms, gate count: 0 output cardinality: 56, row width=45
Operator #2 KeyedJoin ran for 89.571000 ms, gate count: 119280 output cardinality: 56, row width=249
Operator #3 Project ran for 2.540000 ms, gate count: 0 output cardinality: 56, row width=245
Operator #4 SecureSqlInput ran for 48.882000 ms, gate count: 0 output cardinality: 1500, row width=122
extension finished! takes 720.613ms to extend lpn
Operator #5 Project ran for 3826.194000 ms, gate count: 6835500 output cardinality: 1500, row width=90
extension finished! takes 750.834ms to extend lpn
extension finished! takes 1419.34ms to extend lpn
extension finished! takes 1627.85ms to extend lpn
extension finished! takes 748.67ms to extend lpn
Operator #6 KeyedJoin ran for 15295.884000 ms, gate count: 22092000 output cardinality: 1500, row width=334
extension finished! takes 744.644ms to extend lpn
extension finished! takes 2018.3ms to extend lpn
Operator #7 Project ran for 6230.948000 ms, gate count: 6835500 output cardinality: 1500, row width=246
Operator #8 SecureSqlInput ran for 22.518000 ms, gate count: 0 output cardinality: 1500, row width=46
extension finished! takes 1456.66ms to extend lpn
extension finished! takes 817.461ms to extend lpn
extension finished! takes 748.077ms to extend lpn
extension finished! takes 1534.54ms to extend lpn
extension finished! takes 1424.75ms to extend lpn
extension finished! takes 999.824ms to extend lpn
extension finished! takes 759.378ms to extend lpn
extension finished! takes 742.174ms to extend lpn
extension finished! takes 1424.08ms to extend lpn
extension finished! takes 1336.33ms to extend lpn
extension finished! takes 742.065ms to extend lpn
extension finished! takes 750.162ms to extend lpn
extension finished! takes 2002.86ms to extend lpn
extension finished! takes 1490.89ms to extend lpn
extension finished! takes 802.341ms to extend lpn
extension finished! takes 741.164ms to extend lpn
extension finished! takes 1506.99ms to extend lpn
extension finished! takes 1377.72ms to extend lpn
extension finished! takes 1003.34ms to extend lpn
extension finished! takes 748.691ms to extend lpn
extension finished! takes 739.976ms to extend lpn
extension finished! takes 1927.57ms to extend lpn
extension finished! takes 1648.48ms to extend lpn
extension finished! takes 751.881ms to extend lpn
extension finished! takes 744.58ms to extend lpn
extension finished! takes 1983.4ms to extend lpn
extension finished! takes 1574.54ms to extend lpn
extension finished! takes 834.741ms to extend lpn
Operator #9 KeyedJoin ran for 104476.297000 ms, gate count: 141750000 output cardinality: 1500, row width=291
Operator #10 Project ran for 32.758000 ms, gate count: 0 output cardinality: 1500, row width=265
extension finished! takes 751.755ms to extend lpn
extension finished! takes 1502.75ms to extend lpn
extension finished! takes 1518.2ms to extend lpn
extension finished! takes 825.524ms to extend lpn
extension finished! takes 751.319ms to extend lpn
extension finished! takes 1178.76ms to extend lpn
Operator #-1 Sort ran for 24273.580000 ms, gate count: 31933878 output cardinality: 1500, row width=265
extension finished! takes 1248.55ms to extend lpn
Operator #11 SortMergeAggregate ran for 2670.837000 ms, gate count: 2278512 output cardinality: 1500, row width=265
extension finished! takes 983.446ms to extend lpn
extension finished! takes 749.957ms to extend lpn
extension finished! takes 802.107ms to extend lpn
extension finished! takes 1190.9ms to extend lpn
extension finished! takes 1044.05ms to extend lpn
extension finished! takes 739.999ms to extend lpn
Operator #12 Sort ran for 23222.917000 ms, gate count: 31933878 output cardinality: 1500, row width=265
Runtime: 180.253 sec, CPU Time: 288.674 sec, CPU clock ticks: 2.88674e+08, CPU clock ticks per second: 1000000
End-to-end estimated gates: 2.24438e+08. observed gates: 243778548 gates, relative error (%)=7.93373
[Linux]Peak resident set size: 1999421440 bytes, current memory size: 1873260544 bytes.
Initial Memory: 1903013888 bytes, Peak Memory After Execution: 1999421440 bytes, Memory Usage: 96407552 bytes
Bandwidth: 0 Bps
party 1 send 0 bytes to party 2
party 1 send 0 bytes to party 3
party 1 send 0 bytes to TP 
total AND gate: 243778548
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.baseline_tpch_q9 (181916 ms)
[ RUN      ] GeneralizedComparisonTest.baseline_tpch_q18
Connecting to 127.0.0.1 on ports 7654, 65482 as 1
party 1 connected to TP
GB connected to 2
GB connected to 3
party 1 connected to TP
GB connected to 2
GB connected to 3
initializing cot
setup finished! takes 846.751ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 1999421440 bytes, current memory size: 1912782848 bytes.
1999421440
EMP mode: outsourced, storage mode: column store
Code version: 96247511b7ad7fdad4a2a5cf8ed3e14b15d4218a
GFlags: --flagfile=	--alice_db=tpch_alice_150	--alice_host=127.0.0.1	--bob_db=tpch_bob_150	--ctrl_port=65482	--cutoff=100	--filter=*	--party=1	--port=7654	--storage=column	--unioned_db=tpch_unioned_150	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 1999421440 bytes, current memory size: 1912782848 bytes.
Original Tree : 
#14: Sort<Bit> ({<-1, ASC> , <4, DESC> , <3, ASC> }) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32(8) customer.c_custkey, #2 shared-int32(13) orders.o_orderkey, #3 shared-int64(28) orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float sum_qty) order by: {<-1, ASC> , <4, DESC> , <3, ASC> }, cost est: 487532, output card: 100
    #13: SortMergeAggregate<Bit> (group-by: (0, 1, 2, 3, 4) aggs: (SUM($5) sum_qty)) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32(8) customer.c_custkey, #2 shared-int32(13) orders.o_orderkey, #3 shared-int64(28) orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float sum_qty) order by: {<0, ASC> , <1, ASC> , <2, ASC> , <3, ASC> , <4, ASC> }, cost est: 2481000, output card: 1500
        #-1: Sort<Bit> ({<0, ASC> , <1, ASC> , <2, ASC> , <3, ASC> , <4, ASC> }) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32(8) customer.c_custkey, #2 shared-int32(13) orders.o_orderkey, #3 shared-int64(28) orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float l_quantity) order by: {<0, ASC> , <1, ASC> , <2, ASC> , <3, ASC> , <4, ASC> }, cost est: 27877536, output card: 1500
            #12: Project<Bit> ((<0, P$6(200) shared-varchar>, <1, P$5(8) shared-int32>, <2, P$0(13) shared-int32>, <3, P$3(28) shared-int64>, <4, P$2(32) shared-float>, <5, P$4(32) shared-float>)) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32(8) customer.c_custkey, #2 shared-int32(13) orders.o_orderkey, #3 shared-int64(28) orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float l_quantity) order by: {}, cost est: 0, output card: 1500
                #11: KeyedJoin<Bit> (P$1(8) == P$5(8)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate, #4 shared-float l_quantity, #5 shared-int32(8) customer.c_custkey, #6 shared-varchar(25) customer.c_name) order by: {}, cost est: 49500000, output card: 1500
                    #9: Project<Bit> ((<0, P$2(13) shared-int32>, <1, P$3(8) shared-int32>, <2, P$4(32) shared-float>, <3, P$5(28) shared-int64>, <4, P$1(32) shared-float>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate, #4 shared-float l_quantity) order by: {}, cost est: 0, output card: 1500
                        #8: KeyedJoin<Bit> (P$0(13) == P$2(13)) : (#0 shared-int32(13) lineitem.L2.l_orderkey, #1 shared-float sum_qty, #2 shared-int32(13) orders.o_orderkey, #3 shared-int32(8) orders.o_custkey, #4 shared-float orders.o_totalprice, #5 shared-int64(28) orders.o_orderdate) order by: {<0, ASC> }, cost est: 220500000, output card: 1500
                            #6: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$1(32) shared-float>)) : (#0 shared-int32(13) lineitem.L2.l_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 0, output card: 1500
                                #5: KeyedJoin<Bit> (P$0(13) == P$2(13)) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-float sum_qty, #2 shared-int32(13) lineitem.l_orderkey) order by: {<0, ASC> }, cost est: 67500000, output card: 1500
                                    #3: Filter<Bit> (P$1(32) > SECRET FLOAT) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 319500, output card: 1500
                                        #2: SortMergeAggregate<Bit> (group-by: (0) aggs: (SUM($1) sum_qty)) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 1671000, output card: 1500
                                            #1: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-float lineitem.l_quantity) order by: {<0, ASC> }, cost est: 2833454, output card: 1500
                                                #0: SecureSqlInput<Bit> ("SELECT l_orderkey, l_quantity FROM lineitem", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-float lineitem.l_quantity) order by: {}, cost est: 0, output card: 1500
                                    #4: SecureSqlInput<Bit> ("SELECT L2.l_orderkey FROM lineitem L2", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey) order by: {}, cost est: 0, output card: 1500
                            #7: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_totalprice, o_orderdate FROM orders", tuple_count=1500) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate) order by: {}, cost est: 0, output card: 1500
                    #10: SecureSqlInput<Bit> ("SELECT c_custkey, c_name FROM customer", tuple_count=150) : (#0 shared-int32(8) customer.c_custkey, #1 shared-varchar(25) customer.c_name) order by: {}, cost est: 0, output card: 150

Operator #0 SecureSqlInput ran for 293.952000 ms, gate count: 0 output cardinality: 1500, row width=46
Operator #1 Sort ran for 1907.319000 ms, gate count: 3311016 output cardinality: 1500, row width=46
Operator #2 SortMergeAggregate ran for 1185.779000 ms, gate count: 1623449 output cardinality: 1500, row width=46
extension finished! takes 1264.18ms to extend lpn
Operator #3 Filter ran for 1442.249000 ms, gate count: 321000 output cardinality: 1500, row width=46
Operator #4 SecureSqlInput ran for 5.120000 ms, gate count: 0 output cardinality: 1500, row width=14
extension finished! takes 1283.35ms to extend lpn
extension finished! takes 743.355ms to extend lpn
extension finished! takes 740.601ms to extend lpn
extension finished! takes 1525.52ms to extend lpn
extension finished! takes 1262.15ms to extend lpn
extension finished! takes 740.175ms to extend lpn
extension finished! takes 737.57ms to extend lpn
extension finished! takes 1683.01ms to extend lpn
extension finished! takes 1312.52ms to extend lpn
extension finished! takes 745.21ms to extend lpn
extension finished! takes 725.763ms to extend lpn
extension finished! takes 2069.61ms to extend lpn
extension finished! takes 1420.43ms to extend lpn
Operator #5 KeyedJoin ran for 51633.439000 ms, gate count: 69750000 output cardinality: 1500, row width=59
Operator #6 Project ran for 5.827000 ms, gate count: 0 output cardinality: 1500, row width=46
Operator #7 SecureSqlInput ran for 17.559000 ms, gate count: 0 output cardinality: 1500, row width=82
extension finished! takes 723.336ms to extend lpn
extension finished! takes 732.942ms to extend lpn
extension finished! takes 1844.5ms to extend lpn
extension finished! takes 1242.84ms to extend lpn
extension finished! takes 781.335ms to extend lpn
extension finished! takes 715.212ms to extend lpn
extension finished! takes 716.719ms to extend lpn
extension finished! takes 1058.23ms to extend lpn
extension finished! takes 1162.5ms to extend lpn
extension finished! takes 726.044ms to extend lpn
extension finished! takes 727.555ms to extend lpn
extension finished! takes 1620.97ms to extend lpn
extension finished! takes 1329.83ms to extend lpn
extension finished! takes 756.427ms to extend lpn
extension finished! takes 732.157ms to extend lpn
extension finished! takes 1057.33ms to extend lpn
extension finished! takes 1372.09ms to extend lpn
extension finished! takes 867.97ms to extend lpn
extension finished! takes 726.04ms to extend lpn
extension finished! takes 716.888ms to extend lpn
extension finished! takes 1410.8ms to extend lpn
extension finished! takes 1361.01ms to extend lpn
extension finished! takes 727.624ms to extend lpn
extension finished! takes 723.069ms to extend lpn
extension finished! takes 1954.32ms to extend lpn
extension finished! takes 1525.82ms to extend lpn
extension finished! takes 726.128ms to extend lpn
extension finished! takes 717.768ms to extend lpn
extension finished! takes 1866.71ms to extend lpn
extension finished! takes 1522.46ms to extend lpn
extension finished! takes 834.159ms to extend lpn
extension finished! takes 725.372ms to extend lpn
extension finished! takes 727.151ms to extend lpn
extension finished! takes 1330.84ms to extend lpn
extension finished! takes 1242.61ms to extend lpn
extension finished! takes 720.563ms to extend lpn
extension finished! takes 719.468ms to extend lpn
extension finished! takes 1860.34ms to extend lpn
extension finished! takes 1551.51ms to extend lpn
extension finished! takes 727.561ms to extend lpn
extension finished! takes 722.735ms to extend lpn
extension finished! takes 1672.05ms to extend lpn
extension finished! takes 1426.22ms to extend lpn
extension finished! takes 820.998ms to extend lpn
extension finished! takes 718.266ms to extend lpn
Operator #8 KeyedJoin ran for 159756.490000 ms, gate count: 222750000 output cardinality: 1500, row width=127
Operator #9 Project ran for 11.355000 ms, gate count: 0 output cardinality: 1500, row width=114
Operator #10 SecureSqlInput ran for 4.696000 ms, gate count: 0 output cardinality: 150, row width=209
extension finished! takes 1015.88ms to extend lpn
extension finished! takes 955.269ms to extend lpn
extension finished! takes 1056.54ms to extend lpn
extension finished! takes 736.826ms to extend lpn
extension finished! takes 725.229ms to extend lpn
extension finished! takes 1362.83ms to extend lpn
extension finished! takes 1387.73ms to extend lpn
extension finished! takes 888.799ms to extend lpn
extension finished! takes 736.417ms to extend lpn
extension finished! takes 725.549ms to extend lpn
Operator #11 KeyedJoin ran for 33384.153000 ms, gate count: 49725000 output cardinality: 1500, row width=322
Operator #12 Project ran for 92.211000 ms, gate count: 0 output cardinality: 1500, row width=314
extension finished! takes 1188.94ms to extend lpn
extension finished! takes 887.475ms to extend lpn
extension finished! takes 742.099ms to extend lpn
extension finished! takes 805.511ms to extend lpn
extension finished! takes 1159.92ms to extend lpn
extension finished! takes 923.215ms to extend lpn
extension finished! takes 742.977ms to extend lpn
extension finished! takes 918.235ms to extend lpn
extension finished! takes 1180.87ms to extend lpn
extension finished! takes 856.707ms to extend lpn
extension finished! takes 755.41ms to extend lpn
Operator #-1 Sort ran for 41375.483000 ms, gate count: 54588198 output cardinality: 1500, row width=314
Operator #13 SortMergeAggregate ran for 1354.902000 ms, gate count: 2708725 output cardinality: 1500, row width=314
extension finished! takes 974.44ms to extend lpn
extension finished! takes 1130.08ms to extend lpn
extension finished! takes 861.064ms to extend lpn
extension finished! takes 766.713ms to extend lpn
extension finished! takes 722.843ms to extend lpn
extension finished! takes 1591.95ms to extend lpn
extension finished! takes 1020.8ms to extend lpn
Operator #14 Sort ran for 26566.254000 ms, gate count: 35070630 output cardinality: 100, row width=314
Runtime: 319.068 sec, CPU Time: 495.859 sec, CPU clock ticks: 4.95859e+08, CPU clock ticks per second: 1000000
End-to-end estimated gates: 3.7317e+08. observed gates: 439848018 gates, relative error (%)=15.1593
[Linux]Peak resident set size: 2091704320 bytes, current memory size: 1977798656 bytes.
Initial Memory: 1999421440 bytes, Peak Memory After Execution: 2091704320 bytes, Memory Usage: 92282880 bytes
Bandwidth: 0 Bps
party 1 send 0 bytes to party 2
party 1 send 0 bytes to party 3
party 1 send 0 bytes to TP 
total AND gate: 439848018
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.baseline_tpch_q18 (320063 ms)
[ RUN      ] GeneralizedComparisonTest.cost_optimized_tpch_q1
Connecting to 127.0.0.1 on ports 7654, 65482 as 1
party 1 connected to TP
GB connected to 2
GB connected to 3
party 1 connected to TP
GB connected to 2
GB connected to 3
initializing cot
setup finished! takes 819.834ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 2091704320 bytes, current memory size: 2031251456 bytes.
2091704320
EMP mode: outsourced, storage mode: column store
Code version: 96247511b7ad7fdad4a2a5cf8ed3e14b15d4218a
GFlags: --flagfile=	--alice_db=tpch_alice_150	--alice_host=127.0.0.1	--bob_db=tpch_bob_150	--ctrl_port=65482	--cutoff=100	--filter=*	--party=1	--port=7654	--storage=column	--unioned_db=tpch_unioned_150	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 2091704320 bytes, current memory size: 2031251456 bytes.
Original Tree : 
#4: Sort<Bit> ({<0, ASC> , <1, ASC> }) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty, #7 shared-float avg_price, #8 shared-float avg_disc, #9 shared-int64 count_order) order by: {<0, ASC> , <1, ASC> }, cost est: 4545, output card: 6
    #3: Project<Bit> ((<0, P$0(8) shared-varchar>, <1, P$1(8) shared-varchar>, <2, $2 + $15 shared-float>, <3, $3 + $16 shared-float>, <4, $4 + $17 shared-float>, <5, $5 + $18 shared-float>, <6, ($6 + $19) / ($7 + $20) shared-float>, <7, ($8 + $21) / ($9 + $22) shared-float>, <8, ($10 + $23) / ($11 + $24) shared-float>, <9, $12 + $25 shared-int64>)) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty, #7 shared-float avg_price, #8 shared-float avg_disc, #9 shared-int64 count_order) order by: {<0, ASC> , <1, ASC> }, cost est: 163596, output card: 6
        #2: MergeJoin<Bit> (no-op) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty_sum, #7 shared-float avg_qty_cnt, #8 shared-float avg_price_sum, #9 shared-float avg_price_cnt, #10 shared-float avg_discount_sum, #11 shared-float avg_discount_cnt, #12 shared-int64 cnt, #13 shared-varchar(1) l_returnflag, #14 shared-varchar(1) l_linestatus, #15 shared-float sum_qty, #16 shared-float sum_base_price, #17 shared-float sum_disc_price, #18 shared-float sum_charge, #19 shared-float avg_qty_sum, #20 shared-float avg_qty_cnt, #21 shared-float avg_price_sum, #22 shared-float avg_price_cnt, #23 shared-float avg_discount_sum, #24 shared-float avg_discount_cnt, #25 shared-int64 cnt) order by: {<0, ASC> , <1, ASC> }, cost est: 18, output card: 6
            #0: SecureSqlInput<Bit> ("WITH output_domain AS (
    SELECT  *
    FROM (VALUES('R'::char(1), 'F'::char(1)), ('A', 'F'), ('N', 'F'), ('R', 'O'), ('A', 'O'), ('N', 'O')) AS li(l_returnflag, l_linestatus)
    ORDER BY l_returnflag, l_linestatus),
     partial_aggs AS (
         SELECT l_returnflag, l_linestatus, SUM(l_quantity) sum_qty, SUM(l_extendedprice) sum_base_price,
                SUM(l_extendedprice*(1-l_discount)) sum_disc_price, SUM(l_extendedprice*(1-l_discount)*(1+l_tax)) sum_charge,
                SUM(l_quantity) avg_qty_sum, COUNT(l_quantity)::FLOAT4 avg_qty_cnt,
                 SUM(l_extendedprice) avg_price_sum, COUNT(l_extendedprice)::FLOAT4 avg_price_cnt,
                 SUM(l_discount) avg_discount_sum, COUNT(l_discount)::FLOAT4 avg_discount_cnt, COUNT(*) cnt
         FROM lineitem
         WHERE l_shipdate  <= date '1998-08-03'
         GROUP BY l_returnflag, l_linestatus
         ORDER BY l_returnflag, l_linestatus)
SELECT o.l_returnflag, o.l_linestatus, COALESCE(sum_qty, 0) sum_qty, COALESCE(sum_base_price, 0) sum_base_price, COALESCE(sum_disc_price, 0) sum_disc_price, COALESCE(sum_charge, 0) sum_charge, COALESCE(avg_qty_sum, 0) avg_qty_sum, COALESCE(avg_qty_cnt, 0) avg_qty_cnt,  COALESCE(avg_price_sum, 0) avg_price_sum, COALESCE(avg_price_cnt, 0) avg_price_cnt,  COALESCE(avg_discount_sum, 0) avg_discount_sum, COALESCE(avg_discount_cnt, 0) avg_discount_cnt,  COALESCE(cnt, 0)::BIGINT cnt, CASE WHEN p.l_returnflag IS NULL THEN true ELSE false END AS dummy_tag
FROM output_domain o LEFT JOIN partial_aggs p ON o.l_returnflag = p.l_returnflag AND o.l_linestatus = p.l_linestatus
ORDER BY o.l_returnflag, o.l_linestatus", tuple_count=6) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty_sum, #7 shared-float avg_qty_cnt, #8 shared-float avg_price_sum, #9 shared-float avg_price_cnt, #10 shared-float avg_discount_sum, #11 shared-float avg_discount_cnt, #12 shared-int64 cnt) order by: {<0, ASC> , <1, ASC> }, cost est: 0, output card: 6
            #1: SecureSqlInput<Bit> ("WITH output_domain AS (
    SELECT  *
    FROM (VALUES('R'::char(1), 'F'::char(1)), ('A', 'F'), ('N', 'F'), ('R', 'O'), ('A', 'O'), ('N', 'O')) AS li(l_returnflag, l_linestatus)
    ORDER BY l_returnflag, l_linestatus),
     partial_aggs AS (
         SELECT l_returnflag, l_linestatus, SUM(l_quantity) sum_qty, SUM(l_extendedprice) sum_base_price,
                SUM(l_extendedprice*(1-l_discount)) sum_disc_price, SUM(l_extendedprice*(1-l_discount)*(1+l_tax)) sum_charge,
                SUM(l_quantity) avg_qty_sum, COUNT(l_quantity)::FLOAT4 avg_qty_cnt,
                 SUM(l_extendedprice) avg_price_sum, COUNT(l_extendedprice)::FLOAT4 avg_price_cnt,
                 SUM(l_discount) avg_discount_sum, COUNT(l_discount)::FLOAT4 avg_discount_cnt, COUNT(*) cnt
         FROM lineitem
         WHERE l_shipdate  <= date '1998-08-03'
         GROUP BY l_returnflag, l_linestatus
         ORDER BY l_returnflag, l_linestatus)
SELECT o.l_returnflag, o.l_linestatus, COALESCE(sum_qty, 0) sum_qty, COALESCE(sum_base_price, 0) sum_base_price, COALESCE(sum_disc_price, 0) sum_disc_price, COALESCE(sum_charge, 0) sum_charge, COALESCE(avg_qty_sum, 0) avg_qty_sum, COALESCE(avg_qty_cnt, 0) avg_qty_cnt,  COALESCE(avg_price_sum, 0) avg_price_sum, COALESCE(avg_price_cnt, 0) avg_price_cnt,  COALESCE(avg_discount_sum, 0) avg_discount_sum, COALESCE(avg_discount_cnt, 0) avg_discount_cnt,  COALESCE(cnt, 0)::BIGINT cnt, CASE WHEN p.l_returnflag IS NULL THEN true ELSE false END AS dummy_tag
FROM output_domain o LEFT JOIN partial_aggs p ON o.l_returnflag = p.l_returnflag AND o.l_linestatus = p.l_linestatus
ORDER BY o.l_returnflag, o.l_linestatus", tuple_count=0) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty_sum, #7 shared-float avg_qty_cnt, #8 shared-float avg_price_sum, #9 shared-float avg_price_cnt, #10 shared-float avg_discount_sum, #11 shared-float avg_discount_cnt, #12 shared-int64 cnt) order by: {<0, ASC> , <1, ASC> }, cost est: 0, output card: 0

Total Plans : 1
Cost Optimized Plan : 
#3: Project<Bit> ((<0, P$0(8) shared-varchar>, <1, P$1(8) shared-varchar>, <2, $2 + $15 shared-float>, <3, $3 + $16 shared-float>, <4, $4 + $17 shared-float>, <5, $5 + $18 shared-float>, <6, ($6 + $19) / ($7 + $20) shared-float>, <7, ($8 + $21) / ($9 + $22) shared-float>, <8, ($10 + $23) / ($11 + $24) shared-float>, <9, $12 + $25 shared-int64>)) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float anonymous, #3 shared-float anonymous, #4 shared-float anonymous, #5 shared-float anonymous, #6 shared-float anonymous, #7 shared-float anonymous, #8 shared-float anonymous, #9 shared-int64 anonymous) order by: {<0, ASC> , <1, ASC> }, cost est: 163596, output card: 6
    #2: MergeJoin<Bit> (no-op) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty_sum, #7 shared-float avg_qty_cnt, #8 shared-float avg_price_sum, #9 shared-float avg_price_cnt, #10 shared-float avg_discount_sum, #11 shared-float avg_discount_cnt, #12 shared-int64 cnt, #13 shared-varchar(1) l_returnflag, #14 shared-varchar(1) l_linestatus, #15 shared-float sum_qty, #16 shared-float sum_base_price, #17 shared-float sum_disc_price, #18 shared-float sum_charge, #19 shared-float avg_qty_sum, #20 shared-float avg_qty_cnt, #21 shared-float avg_price_sum, #22 shared-float avg_price_cnt, #23 shared-float avg_discount_sum, #24 shared-float avg_discount_cnt, #25 shared-int64 cnt) order by: {<0, ASC> , <1, ASC> }, cost est: 18, output card: 6
        #0: SecureSqlInput<Bit> ("WITH output_domain AS (
    SELECT  *
    FROM (VALUES('R'::char(1), 'F'::char(1)), ('A', 'F'), ('N', 'F'), ('R', 'O'), ('A', 'O'), ('N', 'O')) AS li(l_returnflag, l_linestatus)
    ORDER BY l_returnflag, l_linestatus),
     partial_aggs AS (
         SELECT l_returnflag, l_linestatus, SUM(l_quantity) sum_qty, SUM(l_extendedprice) sum_base_price,
                SUM(l_extendedprice*(1-l_discount)) sum_disc_price, SUM(l_extendedprice*(1-l_discount)*(1+l_tax)) sum_charge,
                SUM(l_quantity) avg_qty_sum, COUNT(l_quantity)::FLOAT4 avg_qty_cnt,
                 SUM(l_extendedprice) avg_price_sum, COUNT(l_extendedprice)::FLOAT4 avg_price_cnt,
                 SUM(l_discount) avg_discount_sum, COUNT(l_discount)::FLOAT4 avg_discount_cnt, COUNT(*) cnt
         FROM lineitem
         WHERE l_shipdate  <= date '1998-08-03'
         GROUP BY l_returnflag, l_linestatus
         ORDER BY l_returnflag, l_linestatus)
SELECT o.l_returnflag, o.l_linestatus, COALESCE(sum_qty, 0) sum_qty, COALESCE(sum_base_price, 0) sum_base_price, COALESCE(sum_disc_price, 0) sum_disc_price, COALESCE(sum_charge, 0) sum_charge, COALESCE(avg_qty_sum, 0) avg_qty_sum, COALESCE(avg_qty_cnt, 0) avg_qty_cnt,  COALESCE(avg_price_sum, 0) avg_price_sum, COALESCE(avg_price_cnt, 0) avg_price_cnt,  COALESCE(avg_discount_sum, 0) avg_discount_sum, COALESCE(avg_discount_cnt, 0) avg_discount_cnt,  COALESCE(cnt, 0)::BIGINT cnt, CASE WHEN p.l_returnflag IS NULL THEN true ELSE false END AS dummy_tag
FROM output_domain o LEFT JOIN partial_aggs p ON o.l_returnflag = p.l_returnflag AND o.l_linestatus = p.l_linestatus
ORDER BY o.l_returnflag, o.l_linestatus", tuple_count=6) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty_sum, #7 shared-float avg_qty_cnt, #8 shared-float avg_price_sum, #9 shared-float avg_price_cnt, #10 shared-float avg_discount_sum, #11 shared-float avg_discount_cnt, #12 shared-int64 cnt) order by: {<0, ASC> , <1, ASC> }, cost est: 0, output card: 6
        #1: SecureSqlInput<Bit> ("WITH output_domain AS (
    SELECT  *
    FROM (VALUES('R'::char(1), 'F'::char(1)), ('A', 'F'), ('N', 'F'), ('R', 'O'), ('A', 'O'), ('N', 'O')) AS li(l_returnflag, l_linestatus)
    ORDER BY l_returnflag, l_linestatus),
     partial_aggs AS (
         SELECT l_returnflag, l_linestatus, SUM(l_quantity) sum_qty, SUM(l_extendedprice) sum_base_price,
                SUM(l_extendedprice*(1-l_discount)) sum_disc_price, SUM(l_extendedprice*(1-l_discount)*(1+l_tax)) sum_charge,
                SUM(l_quantity) avg_qty_sum, COUNT(l_quantity)::FLOAT4 avg_qty_cnt,
                 SUM(l_extendedprice) avg_price_sum, COUNT(l_extendedprice)::FLOAT4 avg_price_cnt,
                 SUM(l_discount) avg_discount_sum, COUNT(l_discount)::FLOAT4 avg_discount_cnt, COUNT(*) cnt
         FROM lineitem
         WHERE l_shipdate  <= date '1998-08-03'
         GROUP BY l_returnflag, l_linestatus
         ORDER BY l_returnflag, l_linestatus)
SELECT o.l_returnflag, o.l_linestatus, COALESCE(sum_qty, 0) sum_qty, COALESCE(sum_base_price, 0) sum_base_price, COALESCE(sum_disc_price, 0) sum_disc_price, COALESCE(sum_charge, 0) sum_charge, COALESCE(avg_qty_sum, 0) avg_qty_sum, COALESCE(avg_qty_cnt, 0) avg_qty_cnt,  COALESCE(avg_price_sum, 0) avg_price_sum, COALESCE(avg_price_cnt, 0) avg_price_cnt,  COALESCE(avg_discount_sum, 0) avg_discount_sum, COALESCE(avg_discount_cnt, 0) avg_discount_cnt,  COALESCE(cnt, 0)::BIGINT cnt, CASE WHEN p.l_returnflag IS NULL THEN true ELSE false END AS dummy_tag
FROM output_domain o LEFT JOIN partial_aggs p ON o.l_returnflag = p.l_returnflag AND o.l_linestatus = p.l_linestatus
ORDER BY o.l_returnflag, o.l_linestatus", tuple_count=0) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty_sum, #7 shared-float avg_qty_cnt, #8 shared-float avg_price_sum, #9 shared-float avg_price_cnt, #10 shared-float avg_discount_sum, #11 shared-float avg_discount_cnt, #12 shared-int64 cnt) order by: {<0, ASC> , <1, ASC> }, cost est: 0, output card: 0

Cost Optimization Time : 0.000372 sec
Operator #0 SecureSqlInput ran for 0.287000 ms, gate count: 0 output cardinality: 6, row width=401
Operator #1 SecureSqlInput ran for 0.019000 ms, gate count: 0 output cardinality: 0, row width=401
Operator #2 MergeJoin ran for 0.213000 ms, gate count: 0 output cardinality: 6, row width=801
Operator #3 Project ran for 103.494000 ms, gate count: 128100 output cardinality: 6, row width=305
Runtime: 0.180076 sec, CPU Time: 0.055675 sec, CPU clock ticks: 55675, CPU clock ticks per second: 1000000
End-to-end estimated gates: 163614. observed gates: 128100 gates, relative error (%)=27.7237
[Linux]Peak resident set size: 2091704320 bytes, current memory size: 2031251456 bytes.
Initial Memory: 2091704320 bytes, Peak Memory After Execution: 2091704320 bytes, Memory Usage: 0 bytes
Bandwidth: 0 Bps
party 1 send 0 bytes to party 2
party 1 send 0 bytes to party 3
party 1 send 0 bytes to TP 
total AND gate: 128100
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.cost_optimized_tpch_q1 (1155 ms)
[ RUN      ] GeneralizedComparisonTest.cost_optimized_tpch_q3
Connecting to 127.0.0.1 on ports 7654, 65482 as 1
party 1 connected to TP
GB connected to 2
GB connected to 3
party 1 connected to TP
GB connected to 2
GB connected to 3
initializing cot
setup finished! takes 786.507ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 2091704320 bytes, current memory size: 2018246656 bytes.
2091704320
EMP mode: outsourced, storage mode: column store
Code version: 96247511b7ad7fdad4a2a5cf8ed3e14b15d4218a
GFlags: --flagfile=	--alice_db=tpch_alice_150	--alice_host=127.0.0.1	--bob_db=tpch_bob_150	--ctrl_port=65482	--cutoff=100	--filter=*	--party=1	--port=7654	--storage=column	--unioned_db=tpch_unioned_150	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 2091704320 bytes, current memory size: 2018246656 bytes.
Original Tree : 
#9: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$3(32) shared-float>, <2, P$1(28) shared-int64>, <3, P$2(32) shared-int32>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-float revenue, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32 orders.o_shippriority) order by: {<-1, ASC> , <1, DESC> , <2, ASC> }, cost est: 0, output card: 10
    #8: Sort<Bit> ({<-1, ASC> , <3, DESC> , <1, ASC> }) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<-1, ASC> , <3, DESC> , <1, ASC> }, cost est: 6317, output card: 10
        #7: SortMergeAggregate<Bit> (group-by: (0, 1, 2) aggs: (SUM($3) revenue)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<0, ASC> , <1, ASC> , <2, ASC> }, cost est: 1854000, output card: 60175
            #6: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$1(28) shared-int64>, <2, P$2(32) shared-int32>, <3, P$4(32) shared-float>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<-1, ASC> , <0, ASC> }, cost est: 0, output card: 1500
                #5: KeyedSortMergeJoin<Bit> (P$0(13) == P$3(13) - sortCompatible) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-int32(13) lineitem.l_orderkey, #4 shared-float revenue) order by: {<-1, ASC> , <0, ASC> , <3, ASC> }, cost est: 40872566, output card: 1500
                    #3: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$2(28) shared-int64>, <2, P$3(32) shared-int32>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority) order by: {<0, ASC> }, cost est: 0, output card: 1500
                        #2: KeyedJoin<Bit> (P$1(8) == P$4(8)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32 orders.o_shippriority, #4 shared-int32(8) customer.c_custkey) order by: {<0, ASC> , <4, ASC> }, cost est: 4500000, output card: 1500
                            #0: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_orderdate, o_shippriority, NOT o_orderdate < DATE '1995-03-25' AS dummy_tag FROM orders ORDER BY o_orderkey, o_orderdate, o_shippriority", tuple_count=1500) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32 orders.o_shippriority) order by: {<0, ASC> }, cost est: 0, output card: 1500
                            #1: SecureSqlInput<Bit> ("SELECT c_custkey, NOT c_mktsegment = 'HOUSEHOLD' AS dummy_tag FROM customer ORDER BY c_custkey", tuple_count=150) : (#0 shared-int32(8) customer.c_custkey) order by: {<0, ASC> }, cost est: 0, output card: 150
                    #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_extendedprice * (1 - l_discount) AS revenue, NOT l_shipdate > DATE '1995-03-25' AS dummy_tag FROM lineitem ORDER BY l_orderkey", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 0, output card: 1500

Total Plans : 96
Cost Optimized Plan : 
#9: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$3(32) shared-float>, <2, P$1(28) shared-int64>, <3, P$2(32) shared-int32>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-float revenue, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32 orders.o_shippriority) order by: {<-1, ASC> , <1, DESC> , <2, ASC> }, cost est: 0, output card: 10
    #8: Sort<Bit> ({<-1, ASC> , <3, DESC> , <1, ASC> }) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<-1, ASC> , <3, DESC> , <1, ASC> }, cost est: 6317, output card: 10
        #7: SortMergeAggregate<Bit> (group-by: (0, 1, 2) aggs: (SUM($3) revenue)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<0, ASC> , <1, ASC> , <2, ASC> }, cost est: 1854000, output card: 60175
            #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<0, ASC> }, cost est: 5575507, output card: 1500
                #6: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$1(28) shared-int64>, <2, P$2(32) shared-int32>, <3, P$4(32) shared-float>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<-1, ASC> , <0, ASC> }, cost est: 0, output card: 1500
                    #5: KeyedSortMergeJoin<Bit> (P$0(13) == P$3(13) - sortCompatible) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-int32(13) lineitem.l_orderkey, #4 shared-float revenue) order by: {<-1, ASC> , <0, ASC> , <3, ASC> }, cost est: 40872566, output card: 1500
                        #3: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$2(28) shared-int64>, <2, P$3(32) shared-int32>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32 orders.o_shippriority) order by: {<0, ASC> }, cost est: 0, output card: 1500
                            #2: KeyedJoin<Bit> (P$1(8) == P$4(8)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32 orders.o_shippriority, #4 shared-int32(8) customer.c_custkey) order by: {<0, ASC> }, cost est: 4500000, output card: 1500
                                #0: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_orderdate, o_shippriority, NOT o_orderdate < DATE '1995-03-25' AS dummy_tag FROM orders ORDER BY o_orderkey, o_orderdate, o_shippriority", tuple_count=1500) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32 orders.o_shippriority) order by: {<0, ASC> }, cost est: 0, output card: 1500
                                #1: SecureSqlInput<Bit> ("SELECT c_custkey, NOT c_mktsegment = 'HOUSEHOLD' AS dummy_tag FROM customer ORDER BY c_custkey", tuple_count=150) : (#0 shared-int32(8) customer.c_custkey) order by: {}, cost est: 0, output card: 150
                        #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_extendedprice * (1 - l_discount) AS revenue, NOT l_shipdate > DATE '1995-03-25' AS dummy_tag FROM lineitem ORDER BY l_orderkey", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 0, output card: 1500

Cost Optimization Time : 0.014519 sec
Operator #0 SecureSqlInput ran for 15.856000 ms, gate count: 0 output cardinality: 1500, row width=82
Operator #1 SecureSqlInput ran for 0.199000 ms, gate count: 0 output cardinality: 150, row width=9
Operator #2 KeyedJoin ran for 3117.805000 ms, gate count: 4725000 output cardinality: 1500, row width=90
Operator #3 Project ran for 26.485000 ms, gate count: 0 output cardinality: 1500, row width=74
Operator #4 SecureSqlInput ran for 26.088000 ms, gate count: 0 output cardinality: 1500, row width=46
extension finished! takes 2035.21ms to extend lpn
extension finished! takes 1236.02ms to extend lpn
extension finished! takes 724.994ms to extend lpn
extension finished! takes 1033.87ms to extend lpn
extension finished! takes 1374.74ms to extend lpn
extension finished! takes 848.885ms to extend lpn
extension finished! takes 756.613ms to extend lpn
Operator #5 KeyedSortMergeJoin ran for 27689.677000 ms, gate count: 35140911 output cardinality: 1500, row width=119
Operator #6 Project ran for 11.106000 ms, gate count: 0 output cardinality: 1500, row width=106
extension finished! takes 1926.63ms to extend lpn
Operator #-1 Sort ran for 5184.330000 ms, gate count: 5924976 output cardinality: 1500, row width=106
Operator #7 SortMergeAggregate ran for 1117.362000 ms, gate count: 1809325 output cardinality: 1500, row width=106
extension finished! takes 1516.38ms to extend lpn
extension finished! takes 715.393ms to extend lpn
extension finished! takes 715.819ms to extend lpn
extension finished! takes 1680.04ms to extend lpn
extension finished! takes 1898.7ms to extend lpn
Operator #8 Sort ran for 21179.734000 ms, gate count: 26008902 output cardinality: 10, row width=106
Operator #9 Project ran for 0.075000 ms, gate count: 0 output cardinality: 10, row width=106
Runtime: 58.4039 sec, CPU Time: 91.9956 sec, CPU clock ticks: 9.19956e+07, CPU clock ticks per second: 1000000
End-to-end estimated gates: 5.28084e+07. observed gates: 68884114 gates, relative error (%)=23.3373
[Linux]Peak resident set size: 2181976064 bytes, current memory size: 2058514432 bytes.
Initial Memory: 2091704320 bytes, Peak Memory After Execution: 2181976064 bytes, Memory Usage: 90271744 bytes
Bandwidth: 0 Bps
party 1 send 0 bytes to party 2
party 1 send 0 bytes to party 3
party 1 send 0 bytes to TP 
total AND gate: 68884114
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.cost_optimized_tpch_q3 (59317 ms)
[ RUN      ] GeneralizedComparisonTest.cost_optimized_tpch_q5
Connecting to 127.0.0.1 on ports 7654, 65482 as 1
party 1 connected to TP
GB connected to 2
GB connected to 3
party 1 connected to TP
GB connected to 2
GB connected to 3
initializing cot
setup finished! takes 802.561ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 2181976064 bytes, current memory size: 2058489856 bytes.
2181976064
EMP mode: outsourced, storage mode: column store
Code version: 96247511b7ad7fdad4a2a5cf8ed3e14b15d4218a
GFlags: --flagfile=	--alice_db=tpch_alice_150	--alice_host=127.0.0.1	--bob_db=tpch_bob_150	--ctrl_port=65482	--cutoff=100	--filter=*	--party=1	--port=7654	--storage=column	--unioned_db=tpch_unioned_150	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 2181976064 bytes, current memory size: 2058489856 bytes.
Original Tree : 
#11: Sort<Bit> ({<1, DESC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<1, DESC> }, cost est: 2583, output card: 5
    #10: SortMergeAggregate<Bit> (group-by: (0) aggs: (SUM($1) revenue)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 2229000, output card: 5
        #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 19925584, output card: 1500
            #9: Project<Bit> ((<0, P$4(200) shared-varchar>, <1, P$2(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<-1, ASC> }, cost est: 0, output card: 1500
                #8: KeyedSortMergeJoin<Bit> ((P$1(13) == P$5(13)) AND ($0 == $3) - not sort compatible, need sort in smj) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(13) lineitem.l_orderkey, #2 shared-float revenue, #3 shared-int32(5) customer.c_nationkey, #4 shared-varchar(25) nation.n_name, #5 shared-int32(13) orders.o_orderkey) order by: {<-1, ASC> , <1, ASC> , <5, ASC> , <0, ASC> , <3, ASC> }, cost est: 101961540, output card: 1500
                    #-1: Sort<Bit> ({<1, ASC> , <0, ASC> }) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(13) lineitem.l_orderkey, #2 shared-float revenue) order by: {<1, ASC> , <0, ASC> }, cost est: 3427566, output card: 1500
                        #3: Project<Bit> ((<0, P$1(5) shared-int32>, <1, P$2(13) shared-int32>, <2, P$4(32) shared-float>)) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(13) lineitem.l_orderkey, #2 shared-float revenue) order by: {}, cost est: 0, output card: 1500
                            #2: KeyedJoin<Bit> (P$0(4) == P$3(4)) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey, #2 shared-int32(13) lineitem.l_orderkey, #3 shared-int32(4) lineitem.l_suppkey, #4 shared-float revenue) order by: {<3, ASC> , <0, ASC> }, cost est: 25500, output card: 1500
                                #0: SecureSqlInput<Bit> ("SELECT s_suppkey, s_nationkey FROM supplier JOIN nation ON s_nationkey = n_nationkey JOIN region ON n_regionkey = r_regionkey WHERE r_name = 'EUROPE' ORDER BY s_suppkey", tuple_count=1) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey) order by: {<0, ASC> }, cost est: 0, output card: 1
                                #1: SecureSqlInput<Bit> ("SELECT l_orderkey, l_suppkey, l_extendedprice * (1 - l_discount) AS revenue FROM lineitem ORDER BY l_suppkey", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float revenue) order by: {<1, ASC> }, cost est: 0, output card: 1500
                    #-1: Sort<Bit> ({}) : (#0 shared-int32(5) customer.c_nationkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(13) orders.o_orderkey) order by: {}, cost est: 10008492, output card: 1500
                        #7: Project<Bit> ((<0, P$1(5) shared-int32>, <1, P$2(200) shared-varchar>, <2, P$3(13) shared-int32>)) : (#0 shared-int32(5) customer.c_nationkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(13) orders.o_orderkey) order by: {}, cost est: 0, output card: 1500
                            #6: KeyedJoin<Bit> (P$0(8) == P$4(8)) : (#0 shared-int32(8) customer.c_custkey, #1 shared-int32(5) customer.c_nationkey, #2 shared-varchar(25) nation.n_name, #3 shared-int32(13) orders.o_orderkey, #4 shared-int32(8) orders.o_custkey) order by: {<4, ASC> , <0, ASC> }, cost est: 9112500, output card: 1500
                                #4: SecureSqlInput<Bit> ("SELECT t2.c_custkey, t2.c_nationkey, t1.n_name FROM (SELECT r_regionkey, r_name FROM region WHERE r_name = 'EUROPE') AS t0 INNER JOIN (SELECT n_nationkey, n_name, n_regionkey FROM nation) AS t1 ON t0.r_regionkey = t1.n_regionkey INNER JOIN (SELECT c_custkey, c_nationkey FROM customer) AS t2 ON t1.n_nationkey = t2.c_nationkey ORDER BY t2.c_custkey ASC", tuple_count=27) : (#0 shared-int32(8) customer.c_custkey, #1 shared-int32(5) customer.c_nationkey, #2 shared-varchar(25) nation.n_name) order by: {<0, ASC> }, cost est: 0, output card: 27
                                #5: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, NOT (o_orderdate >= DATE '1993-01-01' AND o_orderdate < DATE '1994-01-01') AS dummy_tag FROM orders ORDER BY o_custkey, o_orderdate", tuple_count=1500) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey) order by: {<1, ASC> }, cost est: 0, output card: 1500

Total Plans : 72
Cost Optimized Plan : 
#11: Sort<Bit> ({<1, DESC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<1, DESC> }, cost est: 2583, output card: 5
    #10: NestedLoopAggregate<Bit> (group-by: (0) aggs: (SUM($1) revenue)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {}, cost est: 11385000, output card: 5
        #9: Project<Bit> ((<0, P$4(200) shared-varchar>, <1, P$2(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<-1, ASC> }, cost est: 0, output card: 1500
            #8: KeyedSortMergeJoin<Bit> ((P$1(13) == P$5(13)) AND ($0 == $3) - sortCompatible) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(13) lineitem.l_orderkey, #2 shared-float revenue, #3 shared-int32(5) customer.c_nationkey, #4 shared-varchar(25) nation.n_name, #5 shared-int32(13) orders.o_orderkey) order by: {<-1, ASC> , <1, ASC> , <5, ASC> , <0, ASC> , <3, ASC> }, cost est: 78197083, output card: 1500
                #3: Project<Bit> ((<0, P$1(5) shared-int32>, <1, P$2(13) shared-int32>, <2, P$4(32) shared-float>)) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(13) lineitem.l_orderkey, #2 shared-float revenue) order by: {<1, ASC> , <0, ASC> }, cost est: 0, output card: 1500
                    #2: KeyedJoin<Bit> (P$0(4) == P$3(4)) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey, #2 shared-int32(13) lineitem.l_orderkey, #3 shared-int32(4) lineitem.l_suppkey, #4 shared-float revenue) order by: {<2, ASC> , <1, ASC> }, cost est: 25500, output card: 1500
                        #0: SecureSqlInput<Bit> ("SELECT * FROM (SELECT s_suppkey, s_nationkey FROM supplier JOIN nation ON s_nationkey = n_nationkey JOIN region ON n_regionkey = r_regionkey WHERE r_name = 'EUROPE' ORDER BY s_suppkey) to_sort ORDER BY (2)  ASC ", tuple_count=1) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey) order by: {<1, ASC> }, cost est: 0, output card: 1
                        #1: SecureSqlInput<Bit> ("SELECT * FROM (SELECT l_orderkey, l_suppkey, l_extendedprice * (1 - l_discount) AS revenue FROM lineitem ORDER BY l_suppkey) to_sort ORDER BY (1)  ASC ", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float revenue) order by: {<0, ASC> }, cost est: 522258, output card: 1500
                #-1: Sort<Bit> ({<2, ASC> , <0, ASC> }) : (#0 shared-int32(5) customer.c_nationkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(13) orders.o_orderkey) order by: {<2, ASC> , <0, ASC> }, cost est: 11105314, output card: 1500
                    #-1: Sort<Bit> ({}) : (#0 shared-int32(5) customer.c_nationkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(13) orders.o_orderkey) order by: {}, cost est: 10008492, output card: 1500
                        #7: Project<Bit> ((<0, P$1(5) shared-int32>, <1, P$2(200) shared-varchar>, <2, P$3(13) shared-int32>)) : (#0 shared-int32(5) customer.c_nationkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(13) orders.o_orderkey) order by: {}, cost est: 0, output card: 1500
                            #6: KeyedJoin<Bit> (P$0(8) == P$4(8)) : (#0 shared-int32(8) customer.c_custkey, #1 shared-int32(5) customer.c_nationkey, #2 shared-varchar(25) nation.n_name, #3 shared-int32(13) orders.o_orderkey, #4 shared-int32(8) orders.o_custkey) order by: {<4, ASC> , <0, ASC> }, cost est: 9112500, output card: 1500
                                #4: SecureSqlInput<Bit> ("SELECT t2.c_custkey, t2.c_nationkey, t1.n_name FROM (SELECT r_regionkey, r_name FROM region WHERE r_name = 'EUROPE') AS t0 INNER JOIN (SELECT n_nationkey, n_name, n_regionkey FROM nation) AS t1 ON t0.r_regionkey = t1.n_regionkey INNER JOIN (SELECT c_custkey, c_nationkey FROM customer) AS t2 ON t1.n_nationkey = t2.c_nationkey ORDER BY t2.c_custkey ASC", tuple_count=27) : (#0 shared-int32(8) customer.c_custkey, #1 shared-int32(5) customer.c_nationkey, #2 shared-varchar(25) nation.n_name) order by: {<0, ASC> }, cost est: 0, output card: 27
                                #5: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, NOT (o_orderdate >= DATE '1993-01-01' AND o_orderdate < DATE '1994-01-01') AS dummy_tag FROM orders ORDER BY o_custkey, o_orderdate", tuple_count=1500) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey) order by: {<1, ASC> }, cost est: 0, output card: 1500

Cost Optimization Time : 0.011404 sec
Operator #0 SecureSqlInput ran for 0.350000 ms, gate count: 0 output cardinality: 1, row width=10
Operator #1 SecureSqlInput ran for 10.839000 ms, gate count: 0 output cardinality: 1500, row width=50
Operator #2 KeyedJoin ran for 227.278000 ms, gate count: 27000 output cardinality: 1500, row width=59
Operator #3 Project ran for 5.394000 ms, gate count: 0 output cardinality: 1500, row width=51
Operator #4 SecureSqlInput ran for 0.721000 ms, gate count: 0 output cardinality: 27, row width=214
Operator #5 SecureSqlInput ran for 4.734000 ms, gate count: 0 output cardinality: 1500, row width=22
extension finished! takes 726.478ms to extend lpn
Operator #6 KeyedJoin ran for 5319.218000 ms, gate count: 9153000 output cardinality: 1500, row width=235
Operator #7 Project ran for 72.486000 ms, gate count: 0 output cardinality: 1500, row width=219
extension finished! takes 1648.76ms to extend lpn
extension finished! takes 1641.09ms to extend lpn
Operator #-1 Sort ran for 8763.577000 ms, gate count: 9540954 output cardinality: 1500, row width=219
extension finished! takes 740.448ms to extend lpn
extension finished! takes 740.274ms to extend lpn
extension finished! takes 1141.14ms to extend lpn
Operator #-1 Sort ran for 8648.038000 ms, gate count: 11457858 output cardinality: 1500, row width=219
extension finished! takes 1287.42ms to extend lpn
extension finished! takes 780.492ms to extend lpn
extension finished! takes 777.691ms to extend lpn
extension finished! takes 1553.7ms to extend lpn
extension finished! takes 1527.88ms to extend lpn
extension finished! takes 790.145ms to extend lpn
extension finished! takes 763.82ms to extend lpn
extension finished! takes 1550.28ms to extend lpn
extension finished! takes 1065.04ms to extend lpn
extension finished! takes 756.166ms to extend lpn
extension finished! takes 959.887ms to extend lpn
extension finished! takes 1468.77ms to extend lpn
extension finished! takes 917.342ms to extend lpn
Operator #8 KeyedSortMergeJoin ran for 53481.001000 ms, gate count: 97102511 output cardinality: 1500, row width=269
Operator #9 Project ran for 27.771000 ms, gate count: 0 output cardinality: 1500, row width=233
extension finished! takes 730.318ms to extend lpn
extension finished! takes 1460.84ms to extend lpn
Operator #10 NestedLoopAggregate ran for 8112.464000 ms, gate count: 10942500 output cardinality: 5, row width=233
Operator #11 Sort ran for 2.450000 ms, gate count: 5940 output cardinality: 5, row width=233
Runtime: 84.7354 sec, CPU Time: 125.145 sec, CPU clock ticks: 1.25145e+08, CPU clock ticks per second: 1000000
End-to-end estimated gates: 1.19836e+08. observed gates: 108050951 gates, relative error (%)=10.9074
[Linux]Peak resident set size: 2351697920 bytes, current memory size: 2068176896 bytes.
Initial Memory: 2181976064 bytes, Peak Memory After Execution: 2351697920 bytes, Memory Usage: 169721856 bytes
Bandwidth: 0 Bps
party 1 send 0 bytes to party 2
party 1 send 0 bytes to party 3
party 1 send 0 bytes to TP 
total AND gate: 108050951
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.cost_optimized_tpch_q5 (85691 ms)
[ RUN      ] GeneralizedComparisonTest.cost_optimized_tpch_q8
Connecting to 127.0.0.1 on ports 7654, 65482 as 1
party 1 connected to TP
GB connected to 2
GB connected to 3
party 1 connected to TP
GB connected to 2
GB connected to 3
initializing cot
setup finished! takes 1419.76ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 2351697920 bytes, current memory size: 2068152320 bytes.
2351697920
EMP mode: outsourced, storage mode: column store
Code version: 96247511b7ad7fdad4a2a5cf8ed3e14b15d4218a
GFlags: --flagfile=	--alice_db=tpch_alice_150	--alice_host=127.0.0.1	--bob_db=tpch_bob_150	--ctrl_port=65482	--cutoff=100	--filter=*	--party=1	--port=7654	--storage=column	--unioned_db=tpch_unioned_150	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 2351697920 bytes, current memory size: 2068152320 bytes.
Original Tree : 
#12: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32 orders.o_year, #1 shared-float mkt_share) order by: {<0, ASC> }, cost est: 100, output card: 2
    #11: Project<Bit> ((<0, P$0(32) shared-int32>, <1, $2 / $1 shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float mkt_share) order by: {<0, ASC> }, cost est: 7618, output card: 2
        #10: SortMergeAggregate<Bit> (group-by: (0) aggs: (SUM($1) null, SUM($2) null)) : (#0 shared-int32 orders.o_year, #1 shared-float null, #2 shared-float null) order by: {<0, ASC> }, cost est: 3450000, output card: 2
            #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32 orders.o_year, #1 shared-float volume, #2 shared-float selected_volume) order by: {<0, ASC> }, cost est: 6032516, output card: 1500
                #9: Project<Bit> ((<0, P$1(32) shared-int32>, <1, P$3(32) shared-float>, <2, CASE($4, $3, SECRET FLOAT) shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float volume, #2 shared-float selected_volume) order by: {}, cost est: 0, output card: 1500
                    #8: KeyedJoin<Bit> (P$0(13) == P$2(13)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32 orders.o_year, #2 shared-int32(13) lineitem.l_orderkey, #3 shared-float volume, #4 shared-bool nation_check) order by: {}, cost est: 139500000, output card: 1500
                        #3: Project<Bit> ((<0, P$1(13) shared-int32>, <1, P$3(32) shared-int32>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32 orders.o_year) order by: {}, cost est: 0, output card: 1500
                            #2: KeyedJoin<Bit> (P$0(8) == P$2(8)) : (#0 shared-int32(8) customer.c_custkey, #1 shared-int32(13) orders.o_orderkey, #2 shared-int32(8) orders.o_custkey, #3 shared-int32 orders.o_year) order by: {<2, ASC> , <0, ASC> }, cost est: 870000, output card: 1500
                                #0: SecureSqlInput<Bit> ("SELECT c_custkey FROM customer c JOIN nation n1 ON c_nationkey = n_nationkey JOIN region ON r_regionkey = n_regionkey WHERE r_name = 'AFRICA' ORDER BY c_custkey", tuple_count=29) : (#0 shared-int32(8) customer.c_custkey) order by: {<0, ASC> }, cost est: 0, output card: 29
                                #1: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_orderyear::INT AS o_year, NOT (o_orderdate >= date '1995-01-01' and o_orderdate < date '1996-12-31') dummy_tag FROM orders ORDER BY o_custkey", tuple_count=1500) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-int32 orders.o_year) order by: {<1, ASC> }, cost est: 0, output card: 1500
                        #7: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$2(32) shared-float>, <2, P$4(1) shared-bool>)) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-float volume, #2 shared-bool nation_check) order by: {}, cost est: 0, output card: 1500
                            #6: KeyedJoin<Bit> (P$1(4) == P$3(4)) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float volume, #3 shared-int32(4) supplier.s_suppkey, #4 shared-bool nation_check) order by: {<1, ASC> , <3, ASC> }, cost est: 195000, output card: 1500
                                #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_suppkey, l_extendedprice * (1.0 - l_discount) AS volume,        CASE            WHEN p_type = 'LARGE ANODIZED STEEL' AND p_partkey = l_partkey THEN FALSE            ELSE TRUE            END AS dummy_tag FROM lineitem LEFT JOIN part ON p_partkey = l_partkey ORDER BY l_suppkey", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float volume) order by: {<1, ASC> }, cost est: 0, output card: 1500
                                #5: SecureSqlInput<Bit> ("SELECT s_suppkey, CASE WHEN n_name = 'KENYA' THEN true ELSE false END AS nation_check FROM supplier JOIN nation ON n_nationkey = s_nationkey ORDER BY s_suppkey", tuple_count=10) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-bool nation_check) order by: {<0, ASC> }, cost est: 0, output card: 10

Total Plans : 576
Cost Optimized Plan : 
#12: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32 orders.o_year, #1 shared-float mkt_share) order by: {<0, ASC> }, cost est: 100, output card: 2
    #11: Project<Bit> ((<0, P$0(32) shared-int32>, <1, $2 / $1 shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float anonymous) order by: {}, cost est: 7618, output card: 2
        #10: NestedLoopAggregate<Bit> (group-by: (0) aggs: (SUM($1) null, SUM($2) null)) : (#0 shared-int32 orders.o_year, #1 shared-float null, #2 shared-float null) order by: {}, cost est: 7092000, output card: 2
            #9: Project<Bit> ((<0, P$1(32) shared-int32>, <1, P$3(32) shared-float>, <2, CASE($4, $3, SECRET FLOAT) shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float volume, #2 shared-float anonymous) order by: {<-1, ASC> }, cost est: 0, output card: 1500
                #8: KeyedSortMergeJoin<Bit> (P$0(13) == P$2(13) - sortCompatible) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32 orders.o_year, #2 shared-int32(13) lineitem.l_orderkey, #3 shared-float volume, #4 shared-bool nation_check) order by: {<-1, ASC> , <0, ASC> , <2, ASC> }, cost est: 34110261, output card: 1500
                    #3: Project<Bit> ((<0, P$1(13) shared-int32>, <1, P$3(32) shared-int32>)) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32 orders.o_year) order by: {<0, ASC> }, cost est: 0, output card: 1500
                        #2: KeyedJoin<Bit> (P$0(8) == P$2(8)) : (#0 shared-int32(8) customer.c_custkey, #1 shared-int32(13) orders.o_orderkey, #2 shared-int32(8) orders.o_custkey, #3 shared-int32 orders.o_year) order by: {<1, ASC> }, cost est: 870000, output card: 1500
                            #0: SecureSqlInput<Bit> ("SELECT c_custkey FROM customer c JOIN nation n1 ON c_nationkey = n_nationkey JOIN region ON r_regionkey = n_regionkey WHERE r_name = 'AFRICA' ORDER BY c_custkey", tuple_count=29) : (#0 shared-int32(8) customer.c_custkey) order by: {}, cost est: 0, output card: 29
                            #1: SecureSqlInput<Bit> ("SELECT * FROM (SELECT o_orderkey, o_custkey, o_orderyear::INT AS o_year, NOT (o_orderdate >= date '1995-01-01' and o_orderdate < date '1996-12-31') dummy_tag FROM orders ORDER BY o_custkey) to_sort ORDER BY (1)  ASC ", tuple_count=1500) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-int32 orders.o_year) order by: {<0, ASC> }, cost est: 553910, output card: 1500
                    #7: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$2(32) shared-float>, <2, P$4(1) shared-bool>)) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-float volume, #2 shared-bool nation_check) order by: {<0, ASC> }, cost est: 0, output card: 1500
                        #6: KeyedJoin<Bit> (P$1(4) == P$3(4)) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float volume, #3 shared-int32(4) supplier.s_suppkey, #4 shared-bool nation_check) order by: {<0, ASC> }, cost est: 195000, output card: 1500
                            #4: SecureSqlInput<Bit> ("SELECT * FROM (SELECT l_orderkey, l_suppkey, l_extendedprice * (1.0 - l_discount) AS volume,        CASE            WHEN p_type = 'LARGE ANODIZED STEEL' AND p_partkey = l_partkey THEN FALSE            ELSE TRUE            END AS dummy_tag FROM lineitem LEFT JOIN part ON p_partkey = l_partkey ORDER BY l_suppkey) to_sort ORDER BY (1)  ASC ", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float volume) order by: {<0, ASC> }, cost est: 522258, output card: 1500
                            #5: SecureSqlInput<Bit> ("SELECT s_suppkey, CASE WHEN n_name = 'KENYA' THEN true ELSE false END AS nation_check FROM supplier JOIN nation ON n_nationkey = s_nationkey ORDER BY s_suppkey", tuple_count=10) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-bool nation_check) order by: {}, cost est: 0, output card: 10

Cost Optimization Time : 0.121814 sec
Operator #0 SecureSqlInput ran for 0.410000 ms, gate count: 0 output cardinality: 29, row width=9
Operator #1 SecureSqlInput ran for 38.031000 ms, gate count: 0 output cardinality: 1500, row width=54
Operator #2 KeyedJoin ran for 797.996000 ms, gate count: 913500 output cardinality: 1500, row width=62
Operator #3 Project ran for 21.042000 ms, gate count: 0 output cardinality: 1500, row width=46
Operator #4 SecureSqlInput ran for 38.106000 ms, gate count: 0 output cardinality: 1500, row width=50
Operator #5 SecureSqlInput ran for 0.068000 ms, gate count: 0 output cardinality: 10, row width=6
Operator #6 KeyedJoin ran for 240.036000 ms, gate count: 210000 output cardinality: 1500, row width=55
Operator #7 Project ran for 20.930000 ms, gate count: 0 output cardinality: 1500, row width=47
extension finished! takes 763.978ms to extend lpn
extension finished! takes 740.057ms to extend lpn
extension finished! takes 2189.88ms to extend lpn
extension finished! takes 1530.17ms to extend lpn
extension finished! takes 748.51ms to extend lpn
Operator #8 KeyedSortMergeJoin ran for 20479.555000 ms, gate count: 25064109 output cardinality: 1500, row width=92
Operator #9 Project ran for 35.028000 ms, gate count: 48000 output cardinality: 1500, row width=97
extension finished! takes 739.061ms to extend lpn
Operator #10 NestedLoopAggregate ran for 3429.671000 ms, gate count: 6528000 output cardinality: 2, row width=97
Operator #11 Project ran for 4.070000 ms, gate count: 7618 output cardinality: 2, row width=65
Operator #12 Sort ran for 0.092000 ms, gate count: 131 output cardinality: 2, row width=65
Runtime: 25.3259 sec, CPU Time: 39.0378 sec, CPU clock ticks: 3.90378e+07, CPU clock ticks per second: 1000000
End-to-end estimated gates: 4.2275e+07. observed gates: 31647858 gates, relative error (%)=33.5793
[Linux]Peak resident set size: 2351697920 bytes, current memory size: 2067755008 bytes.
Initial Memory: 2351697920 bytes, Peak Memory After Execution: 2351697920 bytes, Memory Usage: 0 bytes
Bandwidth: 0 Bps
party 1 send 0 bytes to party 2
party 1 send 0 bytes to party 3
party 1 send 0 bytes to TP 
total AND gate: 31647858
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.cost_optimized_tpch_q8 (26948 ms)
[ RUN      ] GeneralizedComparisonTest.cost_optimized_tpch_q9
Connecting to 127.0.0.1 on ports 7654, 65482 as 1
party 1 connected to TP
GB connected to 2
GB connected to 3
party 1 connected to TP
GB connected to 2
GB connected to 3
initializing cot
setup finished! takes 1785.27ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 2351697920 bytes, current memory size: 2082885632 bytes.
2351697920
EMP mode: outsourced, storage mode: column store
Code version: 96247511b7ad7fdad4a2a5cf8ed3e14b15d4218a
GFlags: --flagfile=	--alice_db=tpch_alice_150	--alice_host=127.0.0.1	--bob_db=tpch_bob_150	--ctrl_port=65482	--cutoff=100	--filter=*	--party=1	--port=7654	--storage=column	--unioned_db=tpch_unioned_150	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 2351697920 bytes, current memory size: 2082885632 bytes.
Original Tree : 
#11: Sort<Bit> ({<0, ASC> , <1, DESC> }) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 o_year, #2 shared-float sum_profit) order by: {<0, ASC> , <1, DESC> }, cost est: 1385772, output card: 175
    #10: SortMergeAggregate<Bit> (group-by: (0, 1) aggs: (SUM($2) sum_profit)) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 o_year, #2 shared-float sum_profit) order by: {<0, ASC> , <1, ASC> }, cost est: 2325000, output card: 175
        #-1: Sort<Bit> ({<0, ASC> , <1, ASC> }) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 o_year, #2 shared-float amount) order by: {<0, ASC> , <1, ASC> }, cost est: 22987542, output card: 1500
            #9: Project<Bit> ((<0, P$0(200) shared-varchar>, <1, P$8(32) shared-int32>, <2, $7 - ($3 * $6) shared-float>)) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 o_year, #2 shared-float amount) order by: {}, cost est: 6835500, output card: 1500
                #8: KeyedJoin<Bit> ((P$2(4) == P$5(4)) AND (P$1(8) == P$4(8))) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32(8) partsupp.ps_partkey, #2 shared-int32(4) partsupp.ps_suppkey, #3 shared-float partsupp.ps_supplycost, #4 shared-int32(8) lineitem.l_partkey, #5 shared-int32(4) lineitem.l_suppkey, #6 shared-float l_quantity, #7 shared-float volume, #8 shared-int32 o_year) order by: {<3, ASC> , <2, ASC> , <1, ASC> }, cost est: 22848000, output card: 1500
                    #3: Project<Bit> ((<0, P$1(200) shared-varchar>, <1, P$2(8) shared-int32>, <2, P$3(4) shared-int32>, <3, P$4(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32(8) partsupp.ps_partkey, #2 shared-int32(4) partsupp.ps_suppkey, #3 shared-float partsupp.ps_supplycost) order by: {<2, ASC> , <1, ASC> }, cost est: 0, output card: 56
                        #2: KeyedJoin<Bit> (P$0(4) == P$3(4)) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(8) partsupp.ps_partkey, #3 shared-int32(4) partsupp.ps_suppkey, #4 shared-float partsupp.ps_supplycost) order by: {<3, ASC> , <2, ASC> , <0, ASC> }, cost est: 118720, output card: 56
                            #0: SecureSqlInput<Bit> ("SELECT s_suppkey, n_name FROM supplier JOIN nation ON s_nationkey = n_nationkey ORDER BY s_suppkey", tuple_count=10) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-varchar(25) nation.n_name) order by: {<0, ASC> }, cost est: 0, output card: 10
                            #1: SecureSqlInput<Bit> ("SELECT ps_partkey, ps_suppkey, ps_supplycost FROM partsupp JOIN part ON ps_partkey = p_partkey WHERE p_name LIKE '%yellow%' ORDER BY ps_suppkey, ps_partkey", tuple_count=56) : (#0 shared-int32(8) partsupp.ps_partkey, #1 shared-int32(4) partsupp.ps_suppkey, #2 shared-float partsupp.ps_supplycost) order by: {<1, ASC> , <0, ASC> }, cost est: 0, output card: 56
                    #7: Project<Bit> ((<0, P$1(8) shared-int32>, <1, P$2(4) shared-int32>, <2, P$3(32) shared-float>, <3, P$4(32) shared-float>, <4, P$5(32) shared-int32>)) : (#0 shared-int32(8) lineitem.l_partkey, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float l_quantity, #3 shared-float volume, #4 shared-int32 o_year) order by: {<-1, ASC> }, cost est: 0, output card: 1500
                        #6: KeyedSortMergeJoin<Bit> (P$0(13) == P$6(13) - sortCompatible) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(8) lineitem.l_partkey, #2 shared-int32(4) lineitem.l_suppkey, #3 shared-float l_quantity, #4 shared-float volume, #5 shared-int32 o_year, #6 shared-int32(13) orders.o_orderkey) order by: {<-1, ASC> , <0, ASC> , <6, ASC> }, cost est: 44879858, output card: 1500
                            #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_partkey, l_suppkey, l_quantity::float4, l_extendedprice * (1.0 - l_discount) AS volume FROM lineitem ORDER BY l_orderkey, l_suppkey, l_partkey", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(8) lineitem.l_partkey, #2 shared-int32(4) lineitem.l_suppkey, #3 shared-float l_quantity, #4 shared-float volume) order by: {<0, ASC> , <2, ASC> , <1, ASC> }, cost est: 0, output card: 1500
                            #5: SecureSqlInput<Bit> ("SELECT EXTRACT('year' FROM o_orderdate)::INT AS o_year, o_orderkey FROM orders ORDER BY o_orderkey", tuple_count=1500) : (#0 shared-int32 o_year, #1 shared-int32(13) orders.o_orderkey) order by: {<1, ASC> }, cost est: 0, output card: 1500

Total Plans : 1536
Cost Optimized Plan : 
#11: Sort<Bit> ({<0, ASC> , <1, DESC> }) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 o_year, #2 shared-float sum_profit) order by: {<0, ASC> , <1, DESC> }, cost est: 1385772, output card: 175
    #10: SortMergeAggregate<Bit> (group-by: (0, 1) aggs: (SUM($2) sum_profit)) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32 o_year, #2 shared-float sum_profit) order by: {<0, ASC> , <1, ASC> }, cost est: 2325000, output card: 175
        #-1: Sort<Bit> ({<0, ASC> , <1, ASC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32 o_year, #2 shared-float anonymous) order by: {<0, ASC> , <1, ASC> }, cost est: 22987542, output card: 1500
            #9: Project<Bit> ((<0, P$0(200) shared-varchar>, <1, P$8(32) shared-int32>, <2, $7 - ($3 * $6) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32 o_year, #2 shared-float anonymous) order by: {}, cost est: 6835500, output card: 1500
                #8: KeyedJoin<Bit> ((P$2(4) == P$5(4)) AND (P$1(8) == P$4(8))) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32(8) partsupp.ps_partkey, #2 shared-int32(4) partsupp.ps_suppkey, #3 shared-float partsupp.ps_supplycost, #4 shared-int32(8) lineitem.l_partkey, #5 shared-int32(4) lineitem.l_suppkey, #6 shared-float l_quantity, #7 shared-float volume, #8 shared-int32 o_year) order by: {<3, ASC> }, cost est: 22848000, output card: 1500
                    #3: Project<Bit> ((<0, P$1(200) shared-varchar>, <1, P$2(8) shared-int32>, <2, P$3(4) shared-int32>, <3, P$4(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32(8) partsupp.ps_partkey, #2 shared-int32(4) partsupp.ps_suppkey, #3 shared-float partsupp.ps_supplycost) order by: {}, cost est: 0, output card: 56
                        #2: KeyedJoin<Bit> (P$0(4) == P$3(4)) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(8) partsupp.ps_partkey, #3 shared-int32(4) partsupp.ps_suppkey, #4 shared-float partsupp.ps_supplycost) order by: {}, cost est: 118720, output card: 56
                            #0: SecureSqlInput<Bit> ("SELECT s_suppkey, n_name FROM supplier JOIN nation ON s_nationkey = n_nationkey ORDER BY s_suppkey", tuple_count=10) : (#0 shared-int32(4) supplier.s_suppkey, #1 shared-varchar(25) nation.n_name) order by: {}, cost est: 0, output card: 10
                            #1: SecureSqlInput<Bit> ("SELECT ps_partkey, ps_suppkey, ps_supplycost FROM partsupp JOIN part ON ps_partkey = p_partkey WHERE p_name LIKE '%yellow%' ORDER BY ps_suppkey, ps_partkey", tuple_count=56) : (#0 shared-int32(8) partsupp.ps_partkey, #1 shared-int32(4) partsupp.ps_suppkey, #2 shared-float partsupp.ps_supplycost) order by: {}, cost est: 0, output card: 56
                    #7: Project<Bit> ((<0, P$1(8) shared-int32>, <1, P$2(4) shared-int32>, <2, P$3(32) shared-float>, <3, P$4(32) shared-float>, <4, P$5(32) shared-int32>)) : (#0 shared-int32(8) lineitem.l_partkey, #1 shared-int32(4) lineitem.l_suppkey, #2 shared-float l_quantity, #3 shared-float volume, #4 shared-int32 o_year) order by: {<-1, ASC> }, cost est: 0, output card: 1500
                        #6: KeyedSortMergeJoin<Bit> (P$0(13) == P$6(13) - sortCompatible) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(8) lineitem.l_partkey, #2 shared-int32(4) lineitem.l_suppkey, #3 shared-float l_quantity, #4 shared-float volume, #5 shared-int32 o_year, #6 shared-int32(13) orders.o_orderkey) order by: {<-1, ASC> , <0, ASC> , <6, ASC> }, cost est: 44879858, output card: 1500
                            #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_partkey, l_suppkey, l_quantity::float4, l_extendedprice * (1.0 - l_discount) AS volume FROM lineitem ORDER BY l_orderkey, l_suppkey, l_partkey", tuple_count=1500) : (#0 shared-int32(13) lineitem.l_orderkey, #1 shared-int32(8) lineitem.l_partkey, #2 shared-int32(4) lineitem.l_suppkey, #3 shared-float l_quantity, #4 shared-float volume) order by: {<0, ASC> , <2, ASC> , <1, ASC> }, cost est: 0, output card: 1500
                            #5: SecureSqlInput<Bit> ("SELECT EXTRACT('year' FROM o_orderdate)::INT AS o_year, o_orderkey FROM orders ORDER BY o_orderkey", tuple_count=1500) : (#0 shared-int32 o_year, #1 shared-int32(13) orders.o_orderkey) order by: {<1, ASC> }, cost est: 0, output card: 1500

Cost Optimization Time : 0.336846 sec
Operator #0 SecureSqlInput ran for 2.093000 ms, gate count: 0 output cardinality: 10, row width=205
Operator #1 SecureSqlInput ran for 0.874000 ms, gate count: 0 output cardinality: 56, row width=45
Operator #2 KeyedJoin ran for 243.851000 ms, gate count: 119280 output cardinality: 56, row width=249
Operator #3 Project ran for 4.337000 ms, gate count: 0 output cardinality: 56, row width=245
Operator #4 SecureSqlInput ran for 62.394000 ms, gate count: 0 output cardinality: 1500, row width=90
Operator #5 SecureSqlInput ran for 30.354000 ms, gate count: 0 output cardinality: 1500, row width=46
extension finished! takes 1676.56ms to extend lpn
extension finished! takes 759.832ms to extend lpn
extension finished! takes 764.617ms to extend lpn
extension finished! takes 1333.26ms to extend lpn
extension finished! takes 1060.2ms to extend lpn
extension finished! takes 763.985ms to extend lpn
Operator #6 KeyedSortMergeJoin ran for 26069.710000 ms, gate count: 34372407 output cardinality: 1500, row width=135
Operator #7 Project ran for 10.126000 ms, gate count: 0 output cardinality: 1500, row width=109
extension finished! takes 753.942ms to extend lpn
extension finished! takes 1352.36ms to extend lpn
extension finished! takes 1340.76ms to extend lpn
extension finished! takes 758.236ms to extend lpn
extension finished! takes 753.021ms to extend lpn
Operator #8 KeyedJoin ran for 16055.709000 ms, gate count: 22092000 output cardinality: 1500, row width=353
extension finished! takes 1330.73ms to extend lpn
Operator #9 Project ran for 6331.490000 ms, gate count: 6835500 output cardinality: 1500, row width=265
extension finished! takes 924.283ms to extend lpn
extension finished! takes 762.432ms to extend lpn
extension finished! takes 740.786ms to extend lpn
extension finished! takes 1157.37ms to extend lpn
extension finished! takes 1206.34ms to extend lpn
extension finished! takes 776.012ms to extend lpn
extension finished! takes 760.037ms to extend lpn
Operator #-1 Sort ran for 23990.508000 ms, gate count: 31933878 output cardinality: 1500, row width=265
Operator #10 SortMergeAggregate ran for 1486.352000 ms, gate count: 2278512 output cardinality: 1500, row width=265
extension finished! takes 1468.35ms to extend lpn
extension finished! takes 1014.23ms to extend lpn
extension finished! takes 769.71ms to extend lpn
extension finished! takes 964.893ms to extend lpn
extension finished! takes 1483.13ms to extend lpn
extension finished! takes 968.913ms to extend lpn
Operator #11 Sort ran for 25254.118000 ms, gate count: 31933878 output cardinality: 1500, row width=265
Runtime: 99.9559 sec, CPU Time: 142.772 sec, CPU clock ticks: 1.42772e+08, CPU clock ticks per second: 1000000
End-to-end estimated gates: 1.0138e+08. observed gates: 129446175 gates, relative error (%)=21.6814
[Linux]Peak resident set size: 2351697920 bytes, current memory size: 2116562944 bytes.
Initial Memory: 2351697920 bytes, Peak Memory After Execution: 2351697920 bytes, Memory Usage: 0 bytes
Bandwidth: 0 Bps
party 1 send 0 bytes to party 2
party 1 send 0 bytes to party 3
party 1 send 0 bytes to TP 
total AND gate: 129446175
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.cost_optimized_tpch_q9 (101924 ms)
[ RUN      ] GeneralizedComparisonTest.cost_optimized_tpch_q18
Connecting to 127.0.0.1 on ports 7654, 65482 as 1
party 1 connected to TP
GB connected to 2
GB connected to 3
party 1 connected to TP
GB connected to 2
GB connected to 3
initializing cot
setup finished! takes 845.384ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 2351697920 bytes, current memory size: 2216415232 bytes.
2351697920
EMP mode: outsourced, storage mode: column store
Code version: 96247511b7ad7fdad4a2a5cf8ed3e14b15d4218a
GFlags: --flagfile=	--alice_db=tpch_alice_150	--alice_host=127.0.0.1	--bob_db=tpch_bob_150	--ctrl_port=65482	--cutoff=100	--filter=*	--party=1	--port=7654	--storage=column	--unioned_db=tpch_unioned_150	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 2351697920 bytes, current memory size: 2216415232 bytes.
Original Tree : 
#11: Sort<Bit> ({<-1, ASC> , <4, DESC> , <3, ASC> }) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32(8) customer.c_custkey, #2 shared-int32(13) order_keys.o_orderkey, #3 shared-int64(28) orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float sum_qty) order by: {<-1, ASC> , <4, DESC> , <3, ASC> }, cost est: 487532, output card: 100
    #10: Project<Bit> ((<0, P$6(200) shared-varchar>, <1, P$5(8) shared-int32>, <2, P$0(13) shared-int32>, <3, P$3(28) shared-int64>, <4, P$2(32) shared-float>, <5, P$4(32) shared-float>)) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32(8) customer.c_custkey, #2 shared-int32(13) order_keys.o_orderkey, #3 shared-int64(28) orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float sum_qty) order by: {<-1, ASC> , <1, ASC> }, cost est: 0, output card: 1500
        #9: KeyedSortMergeJoin<Bit> (P$1(8) == P$5(8) - sortCompatible) : (#0 shared-int32(13) order_keys.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate, #4 shared-float sum_qty, #5 shared-int32(8) customer.c_custkey, #6 shared-varchar(25) customer.c_name) order by: {<-1, ASC> , <1, ASC> , <5, ASC> }, cost est: 27433419, output card: 1500
            #-1: Sort<Bit> ({<1, ASC> }) : (#0 shared-int32(13) order_keys.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate, #4 shared-float sum_qty) order by: {<1, ASC> }, cost est: 5712610, output card: 1500
                #7: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$3(8) shared-int32>, <2, P$4(32) shared-float>, <3, P$5(28) shared-int64>, <4, P$1(32) shared-float>)) : (#0 shared-int32(13) order_keys.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate, #4 shared-float sum_qty) order by: {<0, ASC> }, cost est: 0, output card: 1500
                    #6: MergeJoin<Bit> (no-op) : (#0 shared-int32(13) order_keys.o_orderkey, #1 shared-float sum_qty, #2 shared-int32(13) orders.o_orderkey, #3 shared-int32(8) orders.o_custkey, #4 shared-float orders.o_totalprice, #5 shared-int64(28) orders.o_orderdate) order by: {<0, ASC> }, cost est: 4500, output card: 1500
                        #4: Filter<Bit> (P$1(32) > SECRET FLOAT) : (#0 shared-int32(13) order_keys.o_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 319500, output card: 1500
                            #3: Project<Bit> ((<0, P$0(13) shared-int32>, <1, $1 + $3 shared-float>)) : (#0 shared-int32(13) order_keys.o_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 1479000, output card: 1500
                                #2: MergeJoin<Bit> (no-op) : (#0 shared-int32(13) order_keys.o_orderkey, #1 shared-float sum_qty, #2 shared-int32(13) order_keys.o_orderkey, #3 shared-float sum_qty) order by: {<0, ASC> }, cost est: 4500, output card: 1500
                                    #0: SecureSqlInput<Bit> ("WITH all_keys AS (SELECT o_orderkey  FROM order_keys), sum_qtys AS (SELECT l_orderkey, sum(l_quantity) as sum_qty, false AS dummy_tag FROM lineitem GROUP BY l_orderkey ORDER BY l_orderkey) SELECT o_orderkey, COALESCE(sum_qty, 0.0) sum_qty, COALESCE(dummy_tag, true) dummy_tag FROM all_keys LEFT JOIN sum_qtys ON l_orderkey = o_orderkey ORDER BY o_orderkey ", tuple_count=1500) : (#0 shared-int32(13) order_keys.o_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 0, output card: 1500
                                    #1: SecureSqlInput<Bit> ("WITH all_keys AS (SELECT o_orderkey  FROM order_keys), sum_qtys AS (SELECT l_orderkey, sum(l_quantity) as sum_qty, false AS dummy_tag FROM lineitem GROUP BY l_orderkey ORDER BY l_orderkey) SELECT o_orderkey, COALESCE(sum_qty, 0.0) sum_qty, COALESCE(dummy_tag, true) dummy_tag FROM all_keys LEFT JOIN sum_qtys ON l_orderkey = o_orderkey ORDER BY o_orderkey ", tuple_count=0) : (#0 shared-int32(13) order_keys.o_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 0, output card: 0
                        #5: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_totalprice, o_orderdate, false dummy_tag FROM orders ORDER BY o_orderkey", tuple_count=1500) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate) order by: {<0, ASC> }, cost est: 0, output card: 1500
            #8: SecureSqlInput<Bit> ("SELECT c_custkey, c_name FROM customer ORDER BY c_custkey", tuple_count=150) : (#0 shared-int32(8) customer.c_custkey, #1 shared-varchar(25) customer.c_name) order by: {<0, ASC> }, cost est: 0, output card: 150

Total Plans : 4
Cost Optimized Plan : 
#11: Sort<Bit> ({<-1, ASC> , <4, DESC> , <3, ASC> }) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32(8) customer.c_custkey, #2 shared-int32(13) order_keys.o_orderkey, #3 shared-int64(28) orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float sum_qty) order by: {<-1, ASC> , <4, DESC> , <3, ASC> }, cost est: 487532, output card: 100
    #10: Project<Bit> ((<0, P$6(200) shared-varchar>, <1, P$5(8) shared-int32>, <2, P$0(13) shared-int32>, <3, P$3(28) shared-int64>, <4, P$2(32) shared-float>, <5, P$4(32) shared-float>)) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32(8) customer.c_custkey, #2 shared-int32(13) order_keys.o_orderkey, #3 shared-int64(28) orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float sum_qty) order by: {<-1, ASC> , <1, ASC> }, cost est: 0, output card: 1500
        #9: KeyedSortMergeJoin<Bit> (P$1(8) == P$5(8) - sortCompatible) : (#0 shared-int32(13) order_keys.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate, #4 shared-float sum_qty, #5 shared-int32(8) customer.c_custkey, #6 shared-varchar(25) customer.c_name) order by: {<-1, ASC> , <1, ASC> , <5, ASC> }, cost est: 27433419, output card: 1500
            #-1: Sort<Bit> ({<1, ASC> }) : (#0 shared-int32(13) order_keys.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate, #4 shared-float sum_qty) order by: {<1, ASC> }, cost est: 5712610, output card: 1500
                #7: Project<Bit> ((<0, P$0(13) shared-int32>, <1, P$3(8) shared-int32>, <2, P$4(32) shared-float>, <3, P$5(28) shared-int64>, <4, P$1(32) shared-float>)) : (#0 shared-int32(13) order_keys.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate, #4 shared-float sum_qty) order by: {<0, ASC> }, cost est: 0, output card: 1500
                    #6: MergeJoin<Bit> (no-op) : (#0 shared-int32(13) order_keys.o_orderkey, #1 shared-float sum_qty, #2 shared-int32(13) orders.o_orderkey, #3 shared-int32(8) orders.o_custkey, #4 shared-float orders.o_totalprice, #5 shared-int64(28) orders.o_orderdate) order by: {<0, ASC> }, cost est: 4500, output card: 1500
                        #4: Filter<Bit> (P$1(32) > SECRET FLOAT) : (#0 shared-int32(13) order_keys.o_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 319500, output card: 1500
                            #3: Project<Bit> ((<0, P$0(13) shared-int32>, <1, $1 + $3 shared-float>)) : (#0 shared-int32(13) order_keys.o_orderkey, #1 shared-float anonymous) order by: {<0, ASC> }, cost est: 1479000, output card: 1500
                                #2: MergeJoin<Bit> (no-op) : (#0 shared-int32(13) order_keys.o_orderkey, #1 shared-float sum_qty, #2 shared-int32(13) order_keys.o_orderkey, #3 shared-float sum_qty) order by: {<0, ASC> }, cost est: 4500, output card: 1500
                                    #0: SecureSqlInput<Bit> ("WITH all_keys AS (SELECT o_orderkey  FROM order_keys), sum_qtys AS (SELECT l_orderkey, sum(l_quantity) as sum_qty, false AS dummy_tag FROM lineitem GROUP BY l_orderkey ORDER BY l_orderkey) SELECT o_orderkey, COALESCE(sum_qty, 0.0) sum_qty, COALESCE(dummy_tag, true) dummy_tag FROM all_keys LEFT JOIN sum_qtys ON l_orderkey = o_orderkey ORDER BY o_orderkey ", tuple_count=1500) : (#0 shared-int32(13) order_keys.o_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 0, output card: 1500
                                    #1: SecureSqlInput<Bit> ("WITH all_keys AS (SELECT o_orderkey  FROM order_keys), sum_qtys AS (SELECT l_orderkey, sum(l_quantity) as sum_qty, false AS dummy_tag FROM lineitem GROUP BY l_orderkey ORDER BY l_orderkey) SELECT o_orderkey, COALESCE(sum_qty, 0.0) sum_qty, COALESCE(dummy_tag, true) dummy_tag FROM all_keys LEFT JOIN sum_qtys ON l_orderkey = o_orderkey ORDER BY o_orderkey ", tuple_count=0) : (#0 shared-int32(13) order_keys.o_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 0, output card: 0
                        #5: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_totalprice, o_orderdate, false dummy_tag FROM orders ORDER BY o_orderkey", tuple_count=1500) : (#0 shared-int32(13) orders.o_orderkey, #1 shared-int32(8) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate) order by: {<0, ASC> }, cost est: 0, output card: 1500
            #8: SecureSqlInput<Bit> ("SELECT c_custkey, c_name FROM customer ORDER BY c_custkey", tuple_count=150) : (#0 shared-int32(8) customer.c_custkey, #1 shared-varchar(25) customer.c_name) order by: {<0, ASC> }, cost est: 0, output card: 150

Cost Optimization Time : 0.00107 sec
Operator #0 SecureSqlInput ran for 10.138000 ms, gate count: 0 output cardinality: 1500, row width=46
Operator #1 SecureSqlInput ran for 0.011000 ms, gate count: 0 output cardinality: 0, row width=46
Operator #2 MergeJoin ran for 9.173000 ms, gate count: 0 output cardinality: 1500, row width=91
Operator #3 Project ran for 916.398000 ms, gate count: 1479000 output cardinality: 1500, row width=46
Operator #4 Filter ran for 174.515000 ms, gate count: 321000 output cardinality: 1500, row width=46
Operator #5 SecureSqlInput ran for 17.276000 ms, gate count: 0 output cardinality: 1500, row width=82
Operator #6 MergeJoin ran for 16.521000 ms, gate count: 3000 output cardinality: 1500, row width=127
Operator #7 Project ran for 11.901000 ms, gate count: 0 output cardinality: 1500, row width=114
extension finished! takes 947.364ms to extend lpn
Operator #-1 Sort ran for 4260.673000 ms, gate count: 5837844 output cardinality: 1500, row width=114
Operator #8 SecureSqlInput ran for 9.712000 ms, gate count: 0 output cardinality: 150, row width=209
extension finished! takes 1292.77ms to extend lpn
extension finished! takes 893.159ms to extend lpn
extension finished! takes 744.017ms to extend lpn
extension finished! takes 1009.92ms to extend lpn
extension finished! takes 1241.48ms to extend lpn
extension finished! takes 872.199ms to extend lpn
extension finished! takes 762.839ms to extend lpn
Operator #9 KeyedSortMergeJoin ran for 25339.744000 ms, gate count: 42013990 output cardinality: 1500, row width=322
Operator #10 Project ran for 34.572000 ms, gate count: 0 output cardinality: 1500, row width=314
extension finished! takes 848.452ms to extend lpn
extension finished! takes 1205.2ms to extend lpn
extension finished! takes 822.547ms to extend lpn
extension finished! takes 771.581ms to extend lpn
extension finished! takes 737.85ms to extend lpn
extension finished! takes 1612.65ms to extend lpn
extension finished! takes 1491.18ms to extend lpn
Operator #11 Sort ran for 25197.335000 ms, gate count: 35070630 output cardinality: 100, row width=314
Runtime: 56.0327 sec, CPU Time: 82.7588 sec, CPU clock ticks: 8.27588e+07, CPU clock ticks per second: 1000000
End-to-end estimated gates: 3.54411e+07. observed gates: 77084620 gates, relative error (%)=54.0232
[Linux]Peak resident set size: 2428727296 bytes, current memory size: 2274959360 bytes.
Initial Memory: 2351697920 bytes, Peak Memory After Execution: 2428727296 bytes, Memory Usage: 77029376 bytes
Bandwidth: 0 Bps
party 1 send 0 bytes to party 2
party 1 send 0 bytes to party 3
party 1 send 0 bytes to TP 
total AND gate: 77084620
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.cost_optimized_tpch_q18 (57034 ms)
[----------] 12 tests from GeneralizedComparisonTest (1337024 ms total)

[----------] Global test environment tear-down
[==========] 12 tests from 1 test suite ran. (1337024 ms total)
[  PASSED  ] 12 tests.
Buffer pool requests: 0 hit rate: 0/0: -nan, pack calls: 0 unpack calls: 0 pinned pages: 0

