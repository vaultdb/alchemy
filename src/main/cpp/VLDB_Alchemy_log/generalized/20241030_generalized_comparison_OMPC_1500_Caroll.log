[==========] Running 12 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 12 tests from GeneralizedComparisonTest
[ RUN      ] GeneralizedComparisonTest.baseline_tpch_q1
Connecting to 127.0.0.1 on ports 7654, 65482 as 3
party 3 connected to TP
party 3 connected to GB
party 3 connected to TP
party 3 connected to GB
initializing cot
setup finished! takes 1089.15ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 1408630784 bytes, current memory size: 1364246528 bytes.
1408630784
EMP mode: outsourced, storage mode: column store
Code version: 5520450e48d58739c9c30b64a3a3a0430a5aede3
GFlags: --flagfile=	--alice_db=tpch_alice_1500	--alice_host=127.0.0.1	--bob_db=tpch_bob_1500	--ctrl_port=65482	--cutoff=100	--filter=*	--party=3	--port=7654	--storage=column	--unioned_db=tpch_unioned_1500	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 1408630784 bytes, current memory size: 1365164032 bytes.
Original Tree : 
#3: Sort<Bit> ({<0, ASC> , <1, ASC> }) : (#0 shared-varchar(1) lineitem.l_returnflag, #1 shared-varchar(1) lineitem.l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty, #7 shared-float avg_price, #8 shared-float avg_disc, #9 shared-int64(11) count_order) order by: {<0, ASC> , <1, ASC> }, cost est: 12522041, output card: 1500
    #2: SortMergeAggregate<Bit> (group-by: (0, 1) aggs: (SUM($2) sum_qty, SUM($3) sum_base_price, SUM($5) sum_disc_price, SUM($6) sum_charge, AVG($2) avg_qty, AVG($3) avg_price, AVG($4) avg_disc, COUNT(*) count_order)) : (#0 shared-varchar(1) lineitem.l_returnflag, #1 shared-varchar(1) lineitem.l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty, #7 shared-float avg_price, #8 shared-float avg_disc, #9 shared-int64(11) count_order) order by: {<0, ASC> , <1, ASC> }, cost est: 33405000, output card: 1500
        #-1: Sort<Bit> ({<0, ASC> , <1, ASC> }) : (#0 shared-varchar(1) lineitem.l_returnflag, #1 shared-varchar(1) lineitem.l_linestatus, #2 shared-float lineitem.l_quantity, #3 shared-float lineitem.l_extendedprice, #4 shared-float lineitem.l_discount, #5 shared-float disc_price, #6 shared-float charge) order by: {<0, ASC> , <1, ASC> }, cost est: 9094475, output card: 1500
            #1: Project<Bit> ((<0, P$4(8) shared-varchar>, <1, P$5(8) shared-varchar>, <2, P$0(32) shared-float>, <3, P$1(32) shared-float>, <4, P$2(32) shared-float>, <5, $1 * (SECRET FLOAT - $2) shared-float>, <6, ($1 * (SECRET FLOAT - $2)) * (SECRET FLOAT + $3) shared-float>)) : (#0 shared-varchar(1) lineitem.l_returnflag, #1 shared-varchar(1) lineitem.l_linestatus, #2 shared-float lineitem.l_quantity, #3 shared-float lineitem.l_extendedprice, #4 shared-float lineitem.l_discount, #5 shared-float disc_price, #6 shared-float charge) order by: {}, cost est: 34177500, output card: 1500
                #0: SecureSqlInput<Bit> ("SELECT l_quantity, l_extendedprice, l_discount, l_tax, l_returnflag, l_linestatus, NOT l_shipdate <= DATE '1998-08-03' AS dummy_tag FROM lineitem", tuple_count=1500) : (#0 shared-float lineitem.l_quantity, #1 shared-float lineitem.l_extendedprice, #2 shared-float lineitem.l_discount, #3 shared-float lineitem.l_tax, #4 shared-varchar(1) lineitem.l_returnflag, #5 shared-varchar(1) lineitem.l_linestatus) order by: {}, cost est: 0, output card: 1500

Operator #0 SecureSqlInput ran for 34.544000 ms, gate count: 0 output cardinality: 1500, row width=145
extension finished! takes 747.146ms to extend lpn
extension finished! takes 741.876ms to extend lpn
extension finished! takes 711.911ms to extend lpn
extension finished! takes 706.936ms to extend lpn
Operator #1 Project ran for 16595.257000 ms, gate count: 20506500 output cardinality: 1500, row width=177
extension finished! takes 785.623ms to extend lpn
Operator #-1 Sort ran for 5483.685000 ms, gate count: 9279558 output cardinality: 1500, row width=177
extension finished! takes 734.132ms to extend lpn
extension finished! takes 721.268ms to extend lpn
extension finished! takes 713.163ms to extend lpn
extension finished! takes 708.004ms to extend lpn
extension finished! takes 703.082ms to extend lpn
extension finished! takes 712.188ms to extend lpn
extension finished! takes 710.997ms to extend lpn
Operator #2 SortMergeAggregate ran for 27714.524000 ms, gate count: 32971759 output cardinality: 1500, row width=252
extension finished! takes 718.86ms to extend lpn
extension finished! takes 713.644ms to extend lpn
extension finished! takes 706.733ms to extend lpn
Operator #3 Sort ran for 11499.164000 ms, gate count: 12547008 output cardinality: 1500, row width=252
Runtime: 61.3525 sec, CPU Time: 55.5443 sec, CPU clock ticks: 5.55443e+07, CPU clock ticks per second: 1000000
End-to-end estimated gates: 8.9199e+07. observed gates: 75304825 gates, relative error (%)=18.4506
[Linux]Peak resident set size: 1860976640 bytes, current memory size: 1811570688 bytes.
Initial Memory: 1408630784 bytes, Peak Memory After Execution: 1860976640 bytes, Memory Usage: 452345856 bytes
Bandwidth: 2.35663e+08 Bps
party 3 send 14458526400 bytes to party 1
party 3 send 0 bytes to TP 
total AND gate: 75304825
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.baseline_tpch_q1 (68122 ms)
[ RUN      ] GeneralizedComparisonTest.baseline_tpch_q3
Connecting to 127.0.0.1 on ports 7654, 65482 as 3
party 3 connected to TP
party 3 connected to GB
party 3 connected to TP
party 3 connected to GB
initializing cot
setup finished! takes 799.082ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 1860976640 bytes, current memory size: 1807253504 bytes.
1860976640
EMP mode: outsourced, storage mode: column store
Code version: 5520450e48d58739c9c30b64a3a3a0430a5aede3
GFlags: --flagfile=	--alice_db=tpch_alice_1500	--alice_host=127.0.0.1	--bob_db=tpch_bob_1500	--ctrl_port=65482	--cutoff=100	--filter=*	--party=3	--port=7654	--storage=column	--unioned_db=tpch_unioned_1500	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 1860976640 bytes, current memory size: 1807253504 bytes.
Original Tree : 
#10: Project<Bit> ((<0, P$0(16) shared-int32>, <1, P$3(32) shared-float>, <2, P$1(28) shared-int64>, <3, P$2(1) shared-int32>)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-float revenue, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32(1) orders.o_shippriority) order by: {<-1, ASC> , <1, DESC> , <2, ASC> }, cost est: 0, output card: 10
    #9: Sort<Bit> ({<-1, ASC> , <3, DESC> , <1, ASC> }) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority, #3 shared-float revenue) order by: {<-1, ASC> , <3, DESC> , <1, ASC> }, cost est: 5312, output card: 10
        #8: SortMergeAggregate<Bit> (group-by: (0, 1, 2) aggs: (SUM($3) revenue)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority, #3 shared-float revenue) order by: {<0, ASC> , <1, ASC> , <2, ASC> }, cost est: 1773000, output card: 1500
            #-1: Sort<Bit> ({<0, ASC> , <1, ASC> , <2, ASC> }) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority, #3 shared-float revenue) order by: {<0, ASC> , <1, ASC> , <2, ASC> }, cost est: 6032516, output card: 1500
                #7: Project<Bit> ((<0, P$0(16) shared-int32>, <1, P$1(28) shared-int64>, <2, P$2(1) shared-int32>, <3, P$4(32) shared-float>)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority, #3 shared-float revenue) order by: {}, cost est: 0, output card: 1500
                    #6: KeyedJoin<Bit> (P$0(16) == P$3(16)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority, #3 shared-int32(16) lineitem.l_orderkey, #4 shared-float revenue) order by: {}, cost est: 146250000, output card: 1500
                        #3: Project<Bit> ((<0, P$0(16) shared-int32>, <1, P$2(28) shared-int64>, <2, P$3(1) shared-int32>)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority) order by: {}, cost est: 0, output card: 1500
                            #2: KeyedJoin<Bit> (P$1(11) == P$4(11)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32(1) orders.o_shippriority, #4 shared-int32(11) customer.c_custkey) order by: {}, cost est: 58500000, output card: 1500
                                #0: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_orderdate, o_shippriority, NOT o_orderdate < DATE '1995-03-25' AS dummy_tag FROM orders", tuple_count=1500) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32(1) orders.o_shippriority) order by: {}, cost est: 0, output card: 1500
                                #1: SecureSqlInput<Bit> ("SELECT c_custkey, NOT c_mktsegment = 'HOUSEHOLD' AS dummy_tag FROM customer", tuple_count=1500) : (#0 shared-int32(11) customer.c_custkey) order by: {}, cost est: 0, output card: 1500
                        #5: Project<Bit> ((<0, P$0(16) shared-int32>, <1, $1 * (SECRET FLOAT - $2) shared-float>)) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-float revenue) order by: {}, cost est: 6835500, output card: 1500
                            #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_extendedprice, l_discount, NOT l_shipdate > DATE '1995-03-25' AS dummy_tag FROM lineitem", tuple_count=1500) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-float lineitem.l_extendedprice, #2 shared-float lineitem.l_discount) order by: {}, cost est: 0, output card: 1500

Operator #0 SecureSqlInput ran for 11.776000 ms, gate count: 0 output cardinality: 1500, row width=57
Operator #1 SecureSqlInput ran for 2.811000 ms, gate count: 0 output cardinality: 1500, row width=12
extension finished! takes 714.67ms to extend lpn
extension finished! takes 706.502ms to extend lpn
extension finished! takes 698.532ms to extend lpn
extension finished! takes 711.408ms to extend lpn
extension finished! takes 717.726ms to extend lpn
extension finished! takes 697.592ms to extend lpn
extension finished! takes 702.126ms to extend lpn
extension finished! takes 702.766ms to extend lpn
extension finished! takes 704.462ms to extend lpn
extension finished! takes 701.484ms to extend lpn
extension finished! takes 703.318ms to extend lpn
extension finished! takes 698.82ms to extend lpn
Operator #2 KeyedJoin ran for 46134.500000 ms, gate count: 60750000 output cardinality: 1500, row width=68
Operator #3 Project ran for 5.302000 ms, gate count: 0 output cardinality: 1500, row width=46
Operator #4 SecureSqlInput ran for 14.926000 ms, gate count: 0 output cardinality: 1500, row width=81
extension finished! takes 715.846ms to extend lpn
Operator #5 Project ran for 3723.379000 ms, gate count: 6835500 output cardinality: 1500, row width=49
extension finished! takes 725.013ms to extend lpn
extension finished! takes 735.777ms to extend lpn
extension finished! takes 720.104ms to extend lpn
extension finished! takes 714.832ms to extend lpn
extension finished! takes 719.186ms to extend lpn
extension finished! takes 713.45ms to extend lpn
extension finished! takes 720.261ms to extend lpn
extension finished! takes 721.942ms to extend lpn
extension finished! takes 726.642ms to extend lpn
extension finished! takes 721.998ms to extend lpn
extension finished! takes 717.991ms to extend lpn
extension finished! takes 720.814ms to extend lpn
extension finished! takes 727.629ms to extend lpn
extension finished! takes 727.991ms to extend lpn
extension finished! takes 727.562ms to extend lpn
extension finished! takes 724.848ms to extend lpn
extension finished! takes 723.421ms to extend lpn
extension finished! takes 719.203ms to extend lpn
extension finished! takes 720.856ms to extend lpn
extension finished! takes 722.799ms to extend lpn
extension finished! takes 719.909ms to extend lpn
extension finished! takes 721.215ms to extend lpn
extension finished! takes 718.283ms to extend lpn
extension finished! takes 715.231ms to extend lpn
extension finished! takes 717.355ms to extend lpn
extension finished! takes 715.537ms to extend lpn
extension finished! takes 715.276ms to extend lpn
extension finished! takes 737.12ms to extend lpn
extension finished! takes 741.269ms to extend lpn
extension finished! takes 726.312ms to extend lpn
Operator #6 KeyedJoin ran for 105807.517000 ms, gate count: 148500000 output cardinality: 1500, row width=94
Operator #7 Project ran for 8.701000 ms, gate count: 0 output cardinality: 1500, row width=78
extension finished! takes 719.047ms to extend lpn
Operator #-1 Sort ran for 4447.914000 ms, gate count: 7841880 output cardinality: 1500, row width=78
extension finished! takes 724.53ms to extend lpn
Operator #8 SortMergeAggregate ran for 1794.415000 ms, gate count: 1728379 output cardinality: 1500, row width=78
extension finished! takes 715.045ms to extend lpn
extension finished! takes 715.065ms to extend lpn
extension finished! takes 712.825ms to extend lpn
extension finished! takes 713.636ms to extend lpn
Operator #9 Sort ran for 16318.653000 ms, gate count: 24789054 output cardinality: 10, row width=78
Operator #10 Project ran for 0.059000 ms, gate count: 0 output cardinality: 10, row width=78
Runtime: 178.292 sec, CPU Time: 178.074 sec, CPU clock ticks: 1.78074e+08, CPU clock ticks per second: 1000000
End-to-end estimated gates: 2.19396e+08. observed gates: 250444813 gates, relative error (%)=12.3973
[Linux]Peak resident set size: 1860976640 bytes, current memory size: 1837772800 bytes.
Initial Memory: 1860976640 bytes, Peak Memory After Execution: 1860976640 bytes, Memory Usage: 0 bytes
Bandwidth: 2.697e+08 Bps
party 3 send 48085404096 bytes to party 1
party 3 send 0 bytes to TP 
total AND gate: 250444813
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.baseline_tpch_q3 (179248 ms)
[ RUN      ] GeneralizedComparisonTest.baseline_tpch_q5
Connecting to 127.0.0.1 on ports 7654, 65482 as 3
party 3 connected to TP
party 3 connected to GB
party 3 connected to TP
party 3 connected to GB
initializing cot
setup finished! takes 896.121ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 1860976640 bytes, current memory size: 1793597440 bytes.
1860976640
EMP mode: outsourced, storage mode: column store
Code version: 5520450e48d58739c9c30b64a3a3a0430a5aede3
GFlags: --flagfile=	--alice_db=tpch_alice_1500	--alice_host=127.0.0.1	--bob_db=tpch_bob_1500	--ctrl_port=65482	--cutoff=100	--filter=*	--party=3	--port=7654	--storage=column	--unioned_db=tpch_unioned_1500	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 1860976640 bytes, current memory size: 1793597440 bytes.
Original Tree : 
#12: Sort<Bit> ({<1, DESC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<1, DESC> }, cost est: 12247836, output card: 1500
    #11: SortMergeAggregate<Bit> (group-by: (0) aggs: (SUM($1) revenue)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 2229000, output card: 1500
        #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 19925584, output card: 1500
            #10: Project<Bit> ((<0, P$5(200) shared-varchar>, <1, P$1(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {}, cost est: 0, output card: 1500
                #9: KeyedJoin<Bit> ((P$0(5) == P$4(5)) AND (P$2(11) == P$3(11))) : (#0 shared-int32(5) supplier.c_nationkey, #1 shared-float revenue, #2 shared-int32(11) orders.o_custkey, #3 shared-int32(11) customer.c_custkey, #4 shared-int32(5) customer.c_nationkey, #5 shared-varchar(25) nation.n_name) order by: {}, cost est: 118875000, output card: 1500
                    #7: Project<Bit> ((<0, P$0(5) shared-int32>, <1, P$2(32) shared-float>, <2, P$4(11) shared-int32>)) : (#0 shared-int32(5) supplier.c_nationkey, #1 shared-float revenue, #2 shared-int32(11) orders.o_custkey) order by: {}, cost est: 0, output card: 1500
                        #6: KeyedJoin<Bit> (P$1(16) == P$3(16)) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(16) lineitem.l_orderkey, #2 shared-float revenue, #3 shared-int32(16) orders.o_orderkey, #4 shared-int32(11) orders.o_custkey) order by: {}, cost est: 105750000, output card: 1500
                            #4: Project<Bit> ((<0, P$1(5) shared-int32>, <1, P$2(16) shared-int32>, <2, P$4(32) shared-float>)) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(16) lineitem.l_orderkey, #2 shared-float revenue) order by: {}, cost est: 0, output card: 1500
                                #3: KeyedJoin<Bit> (P$0(7) == P$3(7)) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey, #2 shared-int32(16) lineitem.l_orderkey, #3 shared-int32(7) lineitem.l_suppkey, #4 shared-float revenue) order by: {}, cost est: 414000, output card: 1500
                                    #0: SecureSqlInput<Bit> ("SELECT s_suppkey, s_nationkey FROM supplier JOIN nation ON s_nationkey = n_nationkey JOIN region ON n_regionkey = r_regionkey WHERE r_name = 'MIDDLE EAST '", tuple_count=12) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey) order by: {}, cost est: 0, output card: 12
                                    #2: Project<Bit> ((<0, P$0(16) shared-int32>, <1, P$1(7) shared-int32>, <2, $2 * (SECRET FLOAT - $3) shared-float>)) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float revenue) order by: {}, cost est: 6835500, output card: 1500
                                        #1: SecureSqlInput<Bit> ("SELECT l_orderkey, l_suppkey, l_extendedprice, l_discount FROM lineitem", tuple_count=1500) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float lineitem.l_extendedprice, #3 shared-float lineitem.l_discount) order by: {}, cost est: 0, output card: 1500
                            #5: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, NOT (o_orderdate >= DATE '1993-01-01' AND o_orderdate < DATE '1994-01-01') AS dummy_tag FROM orders", tuple_count=1500) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey) order by: {}, cost est: 0, output card: 1500
                    #8: SecureSqlInput<Bit> ("SELECT t2.c_custkey, t2.c_nationkey, t1.n_name FROM (SELECT r_regionkey, r_name FROM region WHERE r_name = 'MIDDLE EAST ') AS t0 INNER JOIN (SELECT n_nationkey, n_name, n_regionkey FROM nation) AS t1 ON t0.r_regionkey = t1.n_regionkey INNER JOIN (SELECT c_custkey, c_nationkey FROM customer) AS t2 ON t1.n_nationkey = t2.c_nationkey ORDER BY t2.c_custkey ASC", tuple_count=317) : (#0 shared-int32(11) customer.c_custkey, #1 shared-int32(5) customer.c_nationkey, #2 shared-varchar(25) nation.n_name) order by: {}, cost est: 0, output card: 317

Operator #0 SecureSqlInput ran for 0.040000 ms, gate count: 0 output cardinality: 12, row width=13
Operator #1 SecureSqlInput ran for 17.049000 ms, gate count: 0 output cardinality: 1500, row width=88
extension finished! takes 722.213ms to extend lpn
Operator #2 Project ran for 5402.545000 ms, gate count: 6835500 output cardinality: 1500, row width=56
Operator #3 KeyedJoin ran for 209.135000 ms, gate count: 432000 output cardinality: 1500, row width=68
Operator #4 Project ran for 6.456000 ms, gate count: 0 output cardinality: 1500, row width=54
Operator #5 SecureSqlInput ran for 5.887000 ms, gate count: 0 output cardinality: 1500, row width=28
extension finished! takes 721.545ms to extend lpn
extension finished! takes 708.121ms to extend lpn
extension finished! takes 708.885ms to extend lpn
extension finished! takes 716.184ms to extend lpn
extension finished! takes 720.068ms to extend lpn
extension finished! takes 706.883ms to extend lpn
extension finished! takes 700.858ms to extend lpn
extension finished! takes 704.894ms to extend lpn
extension finished! takes 703.396ms to extend lpn
extension finished! takes 703.875ms to extend lpn
extension finished! takes 703.019ms to extend lpn
extension finished! takes 704.114ms to extend lpn
extension finished! takes 723.251ms to extend lpn
extension finished! takes 715.246ms to extend lpn
extension finished! takes 716.887ms to extend lpn
extension finished! takes 717.365ms to extend lpn
extension finished! takes 710.157ms to extend lpn
extension finished! takes 713.977ms to extend lpn
extension finished! takes 719.998ms to extend lpn
extension finished! takes 723.853ms to extend lpn
extension finished! takes 710.305ms to extend lpn
extension finished! takes 712.995ms to extend lpn
Operator #6 KeyedJoin ran for 81888.847000 ms, gate count: 108000000 output cardinality: 1500, row width=81
Operator #7 Project ran for 5.876000 ms, gate count: 0 output cardinality: 1500, row width=49
Operator #8 SecureSqlInput ran for 9.410000 ms, gate count: 0 output cardinality: 317, row width=217
extension finished! takes 717.216ms to extend lpn
extension finished! takes 736.59ms to extend lpn
extension finished! takes 722.686ms to extend lpn
extension finished! takes 733.727ms to extend lpn
extension finished! takes 735.112ms to extend lpn
extension finished! takes 728.569ms to extend lpn
extension finished! takes 735.501ms to extend lpn
extension finished! takes 724.161ms to extend lpn
extension finished! takes 725.511ms to extend lpn
extension finished! takes 736.624ms to extend lpn
extension finished! takes 728.39ms to extend lpn
extension finished! takes 742.413ms to extend lpn
extension finished! takes 754.473ms to extend lpn
extension finished! takes 738.037ms to extend lpn
extension finished! takes 728.498ms to extend lpn
extension finished! takes 743.315ms to extend lpn
extension finished! takes 732.933ms to extend lpn
extension finished! takes 728.513ms to extend lpn
extension finished! takes 728.17ms to extend lpn
extension finished! takes 722.399ms to extend lpn
extension finished! takes 731.893ms to extend lpn
extension finished! takes 742.416ms to extend lpn
Operator #9 KeyedJoin ran for 88941.493000 ms, gate count: 113644500 output cardinality: 1500, row width=265
Operator #10 Project ran for 29.002000 ms, gate count: 0 output cardinality: 1500, row width=233
extension finished! takes 737.621ms to extend lpn
extension finished! takes 748.22ms to extend lpn
extension finished! takes 728.262ms to extend lpn
extension finished! takes 738.005ms to extend lpn
extension finished! takes 740.101ms to extend lpn
extension finished! takes 729.425ms to extend lpn
Operator #-1 Sort ran for 22229.533000 ms, gate count: 27664410 output cardinality: 1500, row width=233
Operator #11 SortMergeAggregate ran for 1017.605000 ms, gate count: 2181077 output cardinality: 1500, row width=233
extension finished! takes 736.43ms to extend lpn
extension finished! takes 723.134ms to extend lpn
extension finished! takes 727.573ms to extend lpn
extension finished! takes 724.46ms to extend lpn
extension finished! takes 724.664ms to extend lpn
extension finished! takes 730.704ms to extend lpn
Operator #12 Sort ran for 22045.681000 ms, gate count: 28753560 output cardinality: 1500, row width=233
Runtime: 221.844 sec, CPU Time: 203.363 sec, CPU clock ticks: 2.03363e+08, CPU clock ticks per second: 1000000
End-to-end estimated gates: 2.66277e+08. observed gates: 287511047 gates, relative error (%)=7.38549
[Linux]Peak resident set size: 1896009728 bytes, current memory size: 1820155904 bytes.
Initial Memory: 1860976640 bytes, Peak Memory After Execution: 1896009728 bytes, Memory Usage: 35033088 bytes
Bandwidth: 2.48833e+08 Bps
party 3 send 55202121024 bytes to party 1
party 3 send 0 bytes to TP 
total AND gate: 287511047
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.baseline_tpch_q5 (222919 ms)
[ RUN      ] GeneralizedComparisonTest.baseline_tpch_q8
Connecting to 127.0.0.1 on ports 7654, 65482 as 3
party 3 connected to TP
party 3 connected to GB
party 3 connected to TP
party 3 connected to GB
initializing cot
setup finished! takes 1056.45ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 1896009728 bytes, current memory size: 1852772352 bytes.
1896009728
EMP mode: outsourced, storage mode: column store
Code version: 5520450e48d58739c9c30b64a3a3a0430a5aede3
GFlags: --flagfile=	--alice_db=tpch_alice_1500	--alice_host=127.0.0.1	--bob_db=tpch_bob_1500	--ctrl_port=65482	--cutoff=100	--filter=*	--party=3	--port=7654	--storage=column	--unioned_db=tpch_unioned_1500	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 1896009728 bytes, current memory size: 1852903424 bytes.
Original Tree : 
#13: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32 orders.o_year, #1 shared-float mkt_share) order by: {<0, ASC> }, cost est: 4570088, output card: 1500
    #12: Project<Bit> ((<0, P$0(32) shared-int32>, <1, $2 / $1 shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float mkt_share) order by: {<0, ASC> }, cost est: 5713500, output card: 1500
        #11: SortMergeAggregate<Bit> (group-by: (0) aggs: (SUM($1) null, SUM($2) null)) : (#0 shared-int32 orders.o_year, #1 shared-float null, #2 shared-float null) order by: {<0, ASC> }, cost est: 3450000, output card: 1500
            #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32 orders.o_year, #1 shared-float volume, #2 shared-float selected_volume) order by: {<0, ASC> }, cost est: 6032516, output card: 1500
                #10: Project<Bit> ((<0, P$0(32) shared-int32>, <1, P$2(32) shared-float>, <2, CASE($4, $2, SECRET FLOAT) shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float volume, #2 shared-float selected_volume) order by: {}, cost est: 0, output card: 1500
                    #9: KeyedJoin<Bit> (P$1(7) == P$3(7)) : (#0 shared-int32 orders.o_year, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float volume, #3 shared-int32(7) supplier.s_suppkey, #4 shared-bool nation_check) order by: {}, cost est: 2850000, output card: 1500
                        #7: Project<Bit> ((<0, P$1(32) shared-int32>, <1, P$3(7) shared-int32>, <2, P$4(32) shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float volume) order by: {}, cost est: 0, output card: 1500
                            #6: KeyedJoin<Bit> (P$0(16) == P$2(16)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32 orders.o_year, #2 shared-int32(16) lineitem.l_orderkey, #3 shared-int32(7) lineitem.l_suppkey, #4 shared-float revenue) order by: {}, cost est: 168750000, output card: 1500
                                #3: Project<Bit> ((<0, P$1(16) shared-int32>, <1, P$3(32) shared-int32>)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32 orders.o_year) order by: {}, cost est: 0, output card: 1500
                                    #2: KeyedJoin<Bit> (P$0(11) == P$2(11)) : (#0 shared-int32(11) customer.c_custkey, #1 shared-int32(16) orders.o_orderkey, #2 shared-int32(11) orders.o_custkey, #3 shared-int32 orders.o_year) order by: {}, cost est: 11778000, output card: 1500
                                        #0: SecureSqlInput<Bit> ("SELECT c_custkey FROM customer c JOIN nation n1 ON c_nationkey = n_nationkey JOIN region ON r_regionkey = n_regionkey WHERE r_name = 'AFRICA'", tuple_count=302) : (#0 shared-int32(11) customer.c_custkey) order by: {}, cost est: 0, output card: 302
                                        #1: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_orderyear::INT AS o_year, NOT (o_orderdate >= date '1995-01-01' and o_orderdate < date '1996-12-31') dummy_tag FROM orders", tuple_count=1500) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-int32 orders.o_year) order by: {}, cost est: 0, output card: 1500
                                #5: Project<Bit> ((<0, P$0(16) shared-int32>, <1, P$1(7) shared-int32>, <2, $2 * (SECRET FLOAT - $3) shared-float>)) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float revenue) order by: {}, cost est: 6835500, output card: 1500
                                    #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_suppkey, l_extendedprice, l_discount,        CASE            WHEN p_type = 'LARGE ANODIZED STEEL' AND p_partkey = l_partkey THEN FALSE            ELSE TRUE            END AS dummy_tag FROM lineitem LEFT JOIN part ON p_partkey = l_partkey", tuple_count=1500) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float lineitem.l_extendedprice, #3 shared-float lineitem.l_discount) order by: {}, cost est: 0, output card: 1500
                        #8: SecureSqlInput<Bit> ("SELECT s_suppkey, CASE WHEN n_name = 'KENYA' THEN true ELSE false END AS nation_check FROM supplier JOIN nation ON n_nationkey = s_nationkey", tuple_count=100) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-bool nation_check) order by: {}, cost est: 0, output card: 100

Operator #0 SecureSqlInput ran for 0.573000 ms, gate count: 0 output cardinality: 302, row width=12
Operator #1 SecureSqlInput ran for 11.558000 ms, gate count: 0 output cardinality: 1500, row width=60
extension finished! takes 707.102ms to extend lpn
extension finished! takes 706.354ms to extend lpn
Operator #2 KeyedJoin ran for 7667.488000 ms, gate count: 12231000 output cardinality: 1500, row width=71
Operator #3 Project ran for 5.950000 ms, gate count: 0 output cardinality: 1500, row width=49
Operator #4 SecureSqlInput ran for 16.054000 ms, gate count: 0 output cardinality: 1500, row width=88
extension finished! takes 746.792ms to extend lpn
Operator #5 Project ran for 6403.759000 ms, gate count: 6835500 output cardinality: 1500, row width=56
extension finished! takes 849.351ms to extend lpn
extension finished! takes 825.399ms to extend lpn
extension finished! takes 735.585ms to extend lpn
extension finished! takes 791.714ms to extend lpn
extension finished! takes 726.163ms to extend lpn
extension finished! takes 729.968ms to extend lpn
extension finished! takes 750.938ms to extend lpn
extension finished! takes 730.749ms to extend lpn
extension finished! takes 726.887ms to extend lpn
extension finished! takes 715.238ms to extend lpn
extension finished! takes 718.706ms to extend lpn
extension finished! takes 722.141ms to extend lpn
extension finished! takes 718.537ms to extend lpn
extension finished! takes 720.958ms to extend lpn
extension finished! takes 721.912ms to extend lpn
extension finished! takes 721.6ms to extend lpn
extension finished! takes 719.636ms to extend lpn
extension finished! takes 719.705ms to extend lpn
extension finished! takes 717.969ms to extend lpn
extension finished! takes 721.399ms to extend lpn
extension finished! takes 717.39ms to extend lpn
extension finished! takes 721.752ms to extend lpn
extension finished! takes 726.399ms to extend lpn
extension finished! takes 724.062ms to extend lpn
extension finished! takes 738.722ms to extend lpn
extension finished! takes 732.016ms to extend lpn
extension finished! takes 729.049ms to extend lpn
extension finished! takes 719.102ms to extend lpn
extension finished! takes 725.667ms to extend lpn
extension finished! takes 714.867ms to extend lpn
extension finished! takes 727.507ms to extend lpn
extension finished! takes 726.135ms to extend lpn
extension finished! takes 727.389ms to extend lpn
extension finished! takes 712.166ms to extend lpn
Operator #6 KeyedJoin ran for 120886.015000 ms, gate count: 171000000 output cardinality: 1500, row width=104
Operator #7 Project ran for 7.916000 ms, gate count: 0 output cardinality: 1500, row width=72
Operator #8 SecureSqlInput ran for 0.163000 ms, gate count: 0 output cardinality: 100, row width=9
extension finished! takes 708.03ms to extend lpn
Operator #9 KeyedJoin ran for 3745.840000 ms, gate count: 3000000 output cardinality: 1500, row width=80
Operator #10 Project ran for 59.424000 ms, gate count: 48000 output cardinality: 1500, row width=97
extension finished! takes 705.861ms to extend lpn
Operator #-1 Sort ran for 5716.741000 ms, gate count: 7101258 output cardinality: 1500, row width=97
extension finished! takes 716.532ms to extend lpn
Operator #11 SortMergeAggregate ran for 2224.180000 ms, gate count: 3251395 output cardinality: 1500, row width=97
extension finished! takes 719.37ms to extend lpn
Operator #12 Project ran for 3286.412000 ms, gate count: 5713500 output cardinality: 1500, row width=65
extension finished! takes 716.087ms to extend lpn
Operator #13 Sort ran for 4610.899000 ms, gate count: 5707146 output cardinality: 1500, row width=65
Runtime: 154.672 sec, CPU Time: 155.091 sec, CPU clock ticks: 1.55091e+08, CPU clock ticks per second: 1000000
End-to-end estimated gates: 2.0998e+08. observed gates: 214887799 gates, relative error (%)=2.28407
[Linux]Peak resident set size: 1914376192 bytes, current memory size: 1886699520 bytes.
Initial Memory: 1896009728 bytes, Peak Memory After Execution: 1914376192 bytes, Memory Usage: 18366464 bytes
Bandwidth: 2.66748e+08 Bps
party 3 send 41258457408 bytes to party 1
party 3 send 0 bytes to TP 
total AND gate: 214887799
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.baseline_tpch_q8 (155927 ms)
[ RUN      ] GeneralizedComparisonTest.baseline_tpch_q9
Connecting to 127.0.0.1 on ports 7654, 65482 as 3
party 3 connected to TP
party 3 connected to GB
party 3 connected to TP
party 3 connected to GB
initializing cot
setup finished! takes 804.505ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 1914376192 bytes, current memory size: 1853206528 bytes.
1914376192
EMP mode: outsourced, storage mode: column store
Code version: 5520450e48d58739c9c30b64a3a3a0430a5aede3
GFlags: --flagfile=	--alice_db=tpch_alice_1500	--alice_host=127.0.0.1	--bob_db=tpch_bob_1500	--ctrl_port=65482	--cutoff=100	--filter=*	--party=3	--port=7654	--storage=column	--unioned_db=tpch_unioned_1500	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 1914376192 bytes, current memory size: 1853206528 bytes.
Original Tree : 
#12: Sort<Bit> ({<0, ASC> , <1, DESC> }) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 amount, #2 shared-float sum_profit) order by: {<0, ASC> , <1, DESC> }, cost est: 22987542, output card: 1500
    #11: SortMergeAggregate<Bit> (group-by: (0, 1) aggs: (SUM($2) sum_profit)) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 amount, #2 shared-float sum_profit) order by: {<0, ASC> , <1, ASC> }, cost est: 2325000, output card: 1500
        #-1: Sort<Bit> ({<0, ASC> , <1, ASC> }) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 amount, #2 shared-float o_year) order by: {<0, ASC> , <1, ASC> }, cost est: 22987542, output card: 1500
            #10: Project<Bit> ((<0, P$0(200) shared-varchar>, <1, P$3(32) shared-int32>, <2, P$2(32) shared-float>)) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 amount, #2 shared-float o_year) order by: {}, cost est: 0, output card: 1500
                #9: KeyedJoin<Bit> (P$1(16) == P$4(16)) : (#0 shared-varchar(25) nation.nation, #1 shared-int32(16) lineitem.l_orderkey, #2 shared-float amount, #3 shared-int32 o_year, #4 shared-int32(16) orders.o_orderkey) order by: {}, cost est: 153000000, output card: 1500
                    #7: Project<Bit> ((<0, P$0(200) shared-varchar>, <1, P$4(16) shared-int32>, <2, $8 - ($3 * $7) shared-float>)) : (#0 shared-varchar(25) nation.nation, #1 shared-int32(16) lineitem.l_orderkey, #2 shared-float amount) order by: {}, cost est: 6835500, output card: 1500
                        #6: KeyedJoin<Bit> ((P$2(7) == P$6(7)) AND (P$1(11) == P$5(11))) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32(11) partsupp.ps_partkey, #2 shared-int32(7) partsupp.ps_suppkey, #3 shared-float partsupp.ps_supplycost, #4 shared-int32(16) lineitem.l_orderkey, #5 shared-int32(11) lineitem.l_partkey, #6 shared-int32(7) lineitem.l_suppkey, #7 shared-float l_quantity, #8 shared-float revenue) order by: {}, cost est: 194880000, output card: 1500
                            #3: Project<Bit> ((<0, P$1(200) shared-varchar>, <1, P$2(11) shared-int32>, <2, P$3(7) shared-int32>, <3, P$4(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32(11) partsupp.ps_partkey, #2 shared-int32(7) partsupp.ps_suppkey, #3 shared-float partsupp.ps_supplycost) order by: {}, cost est: 0, output card: 448
                                #2: KeyedJoin<Bit> (P$0(7) == P$3(7)) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(11) partsupp.ps_partkey, #3 shared-int32(7) partsupp.ps_suppkey, #4 shared-float partsupp.ps_supplycost) order by: {}, cost est: 9766400, output card: 448
                                    #0: SecureSqlInput<Bit> ("SELECT s_suppkey, n_name FROM supplier JOIN nation ON s_nationkey = n_nationkey", tuple_count=100) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-varchar(25) nation.n_name) order by: {}, cost est: 0, output card: 100
                                    #1: SecureSqlInput<Bit> ("SELECT ps_partkey, ps_suppkey, ps_supplycost FROM partsupp JOIN part ON ps_partkey = p_partkey WHERE p_name LIKE '%yellow%'", tuple_count=448) : (#0 shared-int32(11) partsupp.ps_partkey, #1 shared-int32(7) partsupp.ps_suppkey, #2 shared-float partsupp.ps_supplycost) order by: {}, cost est: 0, output card: 448
                            #5: Project<Bit> ((<0, P$0(16) shared-int32>, <1, P$1(11) shared-int32>, <2, P$2(7) shared-int32>, <3, P$3(32) shared-float>, <4, $4 * (SECRET FLOAT - $5) shared-float>)) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(11) lineitem.l_partkey, #2 shared-int32(7) lineitem.l_suppkey, #3 shared-float l_quantity, #4 shared-float revenue) order by: {}, cost est: 6835500, output card: 1500
                                #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_partkey, l_suppkey, l_quantity::float4, l_extendedprice, l_discount FROM lineitem", tuple_count=1500) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(11) lineitem.l_partkey, #2 shared-int32(7) lineitem.l_suppkey, #3 shared-float l_quantity, #4 shared-float lineitem.l_extendedprice, #5 shared-float lineitem.l_discount) order by: {}, cost est: 0, output card: 1500
                    #8: SecureSqlInput<Bit> ("SELECT EXTRACT('year' FROM o_orderdate)::INT AS o_year, o_orderkey FROM orders", tuple_count=1500) : (#0 shared-int32 o_year, #1 shared-int32(16) orders.o_orderkey) order by: {}, cost est: 0, output card: 1500

Operator #0 SecureSqlInput ran for 2.753000 ms, gate count: 0 output cardinality: 100, row width=208
Operator #1 SecureSqlInput ran for 3.278000 ms, gate count: 0 output cardinality: 448, row width=51
extension finished! takes 736.262ms to extend lpn
Operator #2 KeyedJoin ran for 5775.586000 ms, gate count: 9811200 output cardinality: 448, row width=258
Operator #3 Project ran for 9.054000 ms, gate count: 0 output cardinality: 448, row width=251
Operator #4 SecureSqlInput ran for 25.283000 ms, gate count: 0 output cardinality: 1500, row width=131
extension finished! takes 726.222ms to extend lpn
extension finished! takes 723.979ms to extend lpn
Operator #5 Project ran for 4601.755000 ms, gate count: 6835500 output cardinality: 1500, row width=99
extension finished! takes 745.324ms to extend lpn
extension finished! takes 728.285ms to extend lpn
extension finished! takes 732.082ms to extend lpn
extension finished! takes 736.724ms to extend lpn
extension finished! takes 726.355ms to extend lpn
extension finished! takes 739.401ms to extend lpn
extension finished! takes 737.281ms to extend lpn
extension finished! takes 736.684ms to extend lpn
extension finished! takes 748.13ms to extend lpn
extension finished! takes 733.734ms to extend lpn
extension finished! takes 740.137ms to extend lpn
extension finished! takes 739.905ms to extend lpn
extension finished! takes 741.482ms to extend lpn
extension finished! takes 732.255ms to extend lpn
extension finished! takes 734.748ms to extend lpn
extension finished! takes 732.702ms to extend lpn
extension finished! takes 744.399ms to extend lpn
extension finished! takes 754.91ms to extend lpn
extension finished! takes 747.862ms to extend lpn
extension finished! takes 735.801ms to extend lpn
extension finished! takes 744.796ms to extend lpn
extension finished! takes 735.834ms to extend lpn
extension finished! takes 728.688ms to extend lpn
extension finished! takes 744.365ms to extend lpn
extension finished! takes 737.154ms to extend lpn
extension finished! takes 740.584ms to extend lpn
extension finished! takes 733.617ms to extend lpn
extension finished! takes 737.391ms to extend lpn
extension finished! takes 738.612ms to extend lpn
extension finished! takes 725.981ms to extend lpn
extension finished! takes 726.589ms to extend lpn
extension finished! takes 720.848ms to extend lpn
extension finished! takes 720.58ms to extend lpn
extension finished! takes 729.231ms to extend lpn
extension finished! takes 723.769ms to extend lpn
extension finished! takes 725.837ms to extend lpn
extension finished! takes 722.887ms to extend lpn
Operator #6 KeyedJoin ran for 129758.707000 ms, gate count: 184800000 output cardinality: 1500, row width=349
extension finished! takes 754.29ms to extend lpn
Operator #7 Project ran for 3870.241000 ms, gate count: 6835500 output cardinality: 1500, row width=249
Operator #8 SecureSqlInput ran for 9.133000 ms, gate count: 0 output cardinality: 1500, row width=49
extension finished! takes 761.437ms to extend lpn
extension finished! takes 755.896ms to extend lpn
extension finished! takes 753.251ms to extend lpn
extension finished! takes 736.752ms to extend lpn
extension finished! takes 754.777ms to extend lpn
extension finished! takes 734.756ms to extend lpn
extension finished! takes 730.179ms to extend lpn
extension finished! takes 729.917ms to extend lpn
extension finished! takes 729.044ms to extend lpn
extension finished! takes 730.399ms to extend lpn
extension finished! takes 725.652ms to extend lpn
extension finished! takes 729.928ms to extend lpn
extension finished! takes 759.006ms to extend lpn
extension finished! takes 764.009ms to extend lpn
extension finished! takes 744.932ms to extend lpn
extension finished! takes 742.505ms to extend lpn
extension finished! takes 736.392ms to extend lpn
extension finished! takes 736.562ms to extend lpn
extension finished! takes 738.372ms to extend lpn
extension finished! takes 733.941ms to extend lpn
extension finished! takes 735.65ms to extend lpn
extension finished! takes 737.572ms to extend lpn
extension finished! takes 741.305ms to extend lpn
extension finished! takes 738.578ms to extend lpn
extension finished! takes 745.885ms to extend lpn
extension finished! takes 749.608ms to extend lpn
extension finished! takes 743.3ms to extend lpn
extension finished! takes 737.886ms to extend lpn
extension finished! takes 760.116ms to extend lpn
extension finished! takes 740.539ms to extend lpn
extension finished! takes 734.021ms to extend lpn
Operator #9 KeyedJoin ran for 111289.679000 ms, gate count: 155250000 output cardinality: 1500, row width=297
Operator #10 Project ran for 31.476000 ms, gate count: 0 output cardinality: 1500, row width=265
extension finished! takes 738.948ms to extend lpn
extension finished! takes 735.211ms to extend lpn
extension finished! takes 736.231ms to extend lpn
extension finished! takes 732.409ms to extend lpn
extension finished! takes 748.268ms to extend lpn
extension finished! takes 739.155ms to extend lpn
Operator #-1 Sort ran for 22401.683000 ms, gate count: 31933878 output cardinality: 1500, row width=265
extension finished! takes 738.773ms to extend lpn
Operator #11 SortMergeAggregate ran for 1781.215000 ms, gate count: 2278512 output cardinality: 1500, row width=265
extension finished! takes 739.049ms to extend lpn
extension finished! takes 739.824ms to extend lpn
extension finished! takes 735.89ms to extend lpn
extension finished! takes 733.42ms to extend lpn
extension finished! takes 732.43ms to extend lpn
extension finished! takes 731.934ms to extend lpn
Operator #12 Sort ran for 25025.494000 ms, gate count: 31933878 output cardinality: 1500, row width=265
Runtime: 304.626 sec, CPU Time: 304.738 sec, CPU clock ticks: 3.04738e+08, CPU clock ticks per second: 1000000
End-to-end estimated gates: 4.19617e+08. observed gates: 429678468 gates, relative error (%)=2.34152
[Linux]Peak resident set size: 2013368320 bytes, current memory size: 1871683584 bytes.
Initial Memory: 1914376192 bytes, Peak Memory After Execution: 2013368320 bytes, Memory Usage: 98992128 bytes
Bandwidth: 2.70818e+08 Bps
party 3 send 82498265856 bytes to party 1
party 3 send 0 bytes to TP 
total AND gate: 429678468
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.baseline_tpch_q9 (305688 ms)
[ RUN      ] GeneralizedComparisonTest.baseline_tpch_q18
Connecting to 127.0.0.1 on ports 7654, 65482 as 3
party 3 connected to TP
party 3 connected to GB
party 3 connected to TP
party 3 connected to GB
initializing cot
setup finished! takes 842.256ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 2013368320 bytes, current memory size: 1934446592 bytes.
2013368320
EMP mode: outsourced, storage mode: column store
Code version: 5520450e48d58739c9c30b64a3a3a0430a5aede3
GFlags: --flagfile=	--alice_db=tpch_alice_1500	--alice_host=127.0.0.1	--bob_db=tpch_bob_1500	--ctrl_port=65482	--cutoff=100	--filter=*	--party=3	--port=7654	--storage=column	--unioned_db=tpch_unioned_1500	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 2013368320 bytes, current memory size: 1934446592 bytes.
Original Tree : 
#14: Sort<Bit> ({<-1, ASC> , <4, DESC> , <3, ASC> }) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32(11) customer.c_custkey, #2 shared-int32(16) orders.o_orderkey, #3 shared-int64(28) orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float sum_qty) order by: {<-1, ASC> , <4, DESC> , <3, ASC> }, cost est: 495150, output card: 100
    #13: SortMergeAggregate<Bit> (group-by: (0, 1, 2, 3, 4) aggs: (SUM($5) sum_qty)) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32(11) customer.c_custkey, #2 shared-int32(16) orders.o_orderkey, #3 shared-int64(28) orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float sum_qty) order by: {<0, ASC> , <1, ASC> , <2, ASC> , <3, ASC> , <4, ASC> }, cost est: 2499000, output card: 1500
        #-1: Sort<Bit> ({<0, ASC> , <1, ASC> , <2, ASC> , <3, ASC> , <4, ASC> }) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32(11) customer.c_custkey, #2 shared-int32(16) orders.o_orderkey, #3 shared-int64(28) orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float l_quantity) order by: {<0, ASC> , <1, ASC> , <2, ASC> , <3, ASC> , <4, ASC> }, cost est: 28425946, output card: 1500
            #12: Project<Bit> ((<0, P$6(200) shared-varchar>, <1, P$5(11) shared-int32>, <2, P$0(16) shared-int32>, <3, P$3(28) shared-int64>, <4, P$2(32) shared-float>, <5, P$4(32) shared-float>)) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32(11) customer.c_custkey, #2 shared-int32(16) orders.o_orderkey, #3 shared-int64(28) orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float l_quantity) order by: {}, cost est: 0, output card: 1500
                #11: KeyedJoin<Bit> (P$1(11) == P$5(11)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate, #4 shared-float l_quantity, #5 shared-int32(11) customer.c_custkey, #6 shared-varchar(25) customer.c_name) order by: {}, cost est: 508500000, output card: 1500
                    #9: Project<Bit> ((<0, P$2(16) shared-int32>, <1, P$3(11) shared-int32>, <2, P$4(32) shared-float>, <3, P$5(28) shared-int64>, <4, P$1(32) shared-float>)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate, #4 shared-float l_quantity) order by: {}, cost est: 0, output card: 1500
                        #8: KeyedJoin<Bit> (P$0(16) == P$2(16)) : (#0 shared-int32(16) lineitem.L2.l_orderkey, #1 shared-float sum_qty, #2 shared-int32(16) orders.o_orderkey, #3 shared-int32(11) orders.o_custkey, #4 shared-float orders.o_totalprice, #5 shared-int64(28) orders.o_orderdate) order by: {<0, ASC> }, cost est: 240750000, output card: 1500
                            #6: Project<Bit> ((<0, P$0(16) shared-int32>, <1, P$1(32) shared-float>)) : (#0 shared-int32(16) lineitem.L2.l_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 0, output card: 1500
                                #5: KeyedJoin<Bit> (P$0(16) == P$2(16)) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-float sum_qty, #2 shared-int32(16) lineitem.l_orderkey) order by: {<0, ASC> }, cost est: 81000000, output card: 1500
                                    #3: Filter<Bit> (P$1(32) > SECRET FLOAT) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 319500, output card: 1500
                                        #2: SortMergeAggregate<Bit> (group-by: (0) aggs: (SUM($1) sum_qty)) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 1680000, output card: 1500
                                            #1: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-float lineitem.l_quantity) order by: {<0, ASC> }, cost est: 3107659, output card: 1500
                                                #0: SecureSqlInput<Bit> ("SELECT l_orderkey, l_quantity FROM lineitem", tuple_count=1500) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-float lineitem.l_quantity) order by: {}, cost est: 0, output card: 1500
                                    #4: SecureSqlInput<Bit> ("SELECT L2.l_orderkey FROM lineitem L2", tuple_count=1500) : (#0 shared-int32(16) lineitem.l_orderkey) order by: {}, cost est: 0, output card: 1500
                            #7: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_totalprice, o_orderdate FROM orders", tuple_count=1500) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate) order by: {}, cost est: 0, output card: 1500
                    #10: SecureSqlInput<Bit> ("SELECT c_custkey, c_name FROM customer", tuple_count=1500) : (#0 shared-int32(11) customer.c_custkey, #1 shared-varchar(25) customer.c_name) order by: {}, cost est: 0, output card: 1500

Operator #0 SecureSqlInput ran for 9.779000 ms, gate count: 0 output cardinality: 1500, row width=49
Operator #1 Sort ran for 2287.644000 ms, gate count: 3703110 output cardinality: 1500, row width=49
extension finished! takes 722.743ms to extend lpn
Operator #2 SortMergeAggregate ran for 1546.571000 ms, gate count: 1632443 output cardinality: 1500, row width=49
Operator #3 Filter ran for 129.167000 ms, gate count: 321000 output cardinality: 1500, row width=49
Operator #4 SecureSqlInput ran for 3.512000 ms, gate count: 0 output cardinality: 1500, row width=17
extension finished! takes 718.728ms to extend lpn
extension finished! takes 710.76ms to extend lpn
extension finished! takes 707.428ms to extend lpn
extension finished! takes 719.386ms to extend lpn
extension finished! takes 709.975ms to extend lpn
extension finished! takes 711.712ms to extend lpn
extension finished! takes 698.067ms to extend lpn
extension finished! takes 703.694ms to extend lpn
extension finished! takes 712.35ms to extend lpn
extension finished! takes 704.697ms to extend lpn
extension finished! takes 721.011ms to extend lpn
extension finished! takes 710.943ms to extend lpn
extension finished! takes 721.225ms to extend lpn
extension finished! takes 716.002ms to extend lpn
extension finished! takes 704.403ms to extend lpn
extension finished! takes 714.024ms to extend lpn
Operator #5 KeyedJoin ran for 62344.978000 ms, gate count: 83250000 output cardinality: 1500, row width=65
Operator #6 Project ran for 5.322000 ms, gate count: 0 output cardinality: 1500, row width=49
Operator #7 SecureSqlInput ran for 16.932000 ms, gate count: 0 output cardinality: 1500, row width=88
extension finished! takes 723.515ms to extend lpn
extension finished! takes 726.206ms to extend lpn
extension finished! takes 728.48ms to extend lpn
extension finished! takes 720.493ms to extend lpn
extension finished! takes 720.775ms to extend lpn
extension finished! takes 720.601ms to extend lpn
extension finished! takes 715.739ms to extend lpn
extension finished! takes 722.672ms to extend lpn
extension finished! takes 719.685ms to extend lpn
extension finished! takes 712.768ms to extend lpn
extension finished! takes 718.97ms to extend lpn
extension finished! takes 716.997ms to extend lpn
extension finished! takes 721.793ms to extend lpn
extension finished! takes 714.423ms to extend lpn
extension finished! takes 723.611ms to extend lpn
extension finished! takes 717.727ms to extend lpn
extension finished! takes 718.23ms to extend lpn
extension finished! takes 715.161ms to extend lpn
extension finished! takes 718.277ms to extend lpn
extension finished! takes 718.347ms to extend lpn
extension finished! takes 716.316ms to extend lpn
extension finished! takes 718.848ms to extend lpn
extension finished! takes 713.874ms to extend lpn
extension finished! takes 723.844ms to extend lpn
extension finished! takes 720.719ms to extend lpn
extension finished! takes 715.999ms to extend lpn
extension finished! takes 721.362ms to extend lpn
extension finished! takes 720.703ms to extend lpn
extension finished! takes 713.296ms to extend lpn
extension finished! takes 710.672ms to extend lpn
extension finished! takes 711.884ms to extend lpn
extension finished! takes 712.57ms to extend lpn
extension finished! takes 709.583ms to extend lpn
extension finished! takes 713.363ms to extend lpn
extension finished! takes 710.356ms to extend lpn
extension finished! takes 715.338ms to extend lpn
extension finished! takes 722.532ms to extend lpn
extension finished! takes 714.664ms to extend lpn
extension finished! takes 708.932ms to extend lpn
extension finished! takes 715.489ms to extend lpn
extension finished! takes 712.459ms to extend lpn
extension finished! takes 746.008ms to extend lpn
extension finished! takes 742.645ms to extend lpn
extension finished! takes 726.033ms to extend lpn
extension finished! takes 724.286ms to extend lpn
extension finished! takes 727.856ms to extend lpn
extension finished! takes 720.142ms to extend lpn
extension finished! takes 718.358ms to extend lpn
extension finished! takes 718.376ms to extend lpn
party 3 send 63531441792 bytes to party 1
party 3 send 0 bytes to TP 
total AND gate: 330892927
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
Buffer pool requests: 0 hit rate: 0/0: -nan, pack calls: 0 unpack calls: 0 pinned pages: 0
[ RUN      ] GeneralizedComparisonTest.cost_optimized_tpch_q1
Connecting to 127.0.0.1 on ports 7654, 65482 as 3
party 3 connected to TP
party 3 connected to GB
party 3 connected to TP
party 3 connected to GB
initializing cot
setup finished! takes 954.974ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 1409155072 bytes, current memory size: 1364733952 bytes.
1409155072
EMP mode: outsourced, storage mode: column store
Code version: 5520450e48d58739c9c30b64a3a3a0430a5aede3
GFlags: --flagfile=	--alice_db=tpch_alice_1500	--alice_host=127.0.0.1	--bob_db=tpch_bob_1500	--ctrl_port=65482	--cutoff=100	--filter=*	--party=3	--port=7654	--storage=column	--unioned_db=tpch_unioned_1500	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 1409155072 bytes, current memory size: 1365389312 bytes.
Original Tree : 
#4: Sort<Bit> ({<0, ASC> , <1, ASC> }) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty, #7 shared-float avg_price, #8 shared-float avg_disc, #9 shared-int64 count_order) order by: {<0, ASC> , <1, ASC> }, cost est: 4545, output card: 6
    #3: Project<Bit> ((<0, P$0(8) shared-varchar>, <1, P$1(8) shared-varchar>, <2, $2 + $15 shared-float>, <3, $3 + $16 shared-float>, <4, $4 + $17 shared-float>, <5, $5 + $18 shared-float>, <6, ($6 + $19) / ($7 + $20) shared-float>, <7, ($8 + $21) / ($9 + $22) shared-float>, <8, ($10 + $23) / ($11 + $24) shared-float>, <9, $12 + $25 shared-int64>)) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty, #7 shared-float avg_price, #8 shared-float avg_disc, #9 shared-int64 count_order) order by: {<0, ASC> , <1, ASC> }, cost est: 163596, output card: 6
        #2: MergeJoin<Bit> (no-op) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty_sum, #7 shared-float avg_qty_cnt, #8 shared-float avg_price_sum, #9 shared-float avg_price_cnt, #10 shared-float avg_discount_sum, #11 shared-float avg_discount_cnt, #12 shared-int64 cnt, #13 shared-varchar(1) l_returnflag, #14 shared-varchar(1) l_linestatus, #15 shared-float sum_qty, #16 shared-float sum_base_price, #17 shared-float sum_disc_price, #18 shared-float sum_charge, #19 shared-float avg_qty_sum, #20 shared-float avg_qty_cnt, #21 shared-float avg_price_sum, #22 shared-float avg_price_cnt, #23 shared-float avg_discount_sum, #24 shared-float avg_discount_cnt, #25 shared-int64 cnt) order by: {<0, ASC> , <1, ASC> }, cost est: 18, output card: 6
            #0: SecureSqlInput<Bit> ("WITH output_domain AS (
    SELECT  *
    FROM (VALUES('R'::char(1), 'F'::char(1)), ('A', 'F'), ('N', 'F'), ('R', 'O'), ('A', 'O'), ('N', 'O')) AS li(l_returnflag, l_linestatus)
    ORDER BY l_returnflag, l_linestatus),
     partial_aggs AS (
         SELECT l_returnflag, l_linestatus, SUM(l_quantity) sum_qty, SUM(l_extendedprice) sum_base_price,
                SUM(l_extendedprice*(1-l_discount)) sum_disc_price, SUM(l_extendedprice*(1-l_discount)*(1+l_tax)) sum_charge,
                SUM(l_quantity) avg_qty_sum, COUNT(l_quantity)::FLOAT4 avg_qty_cnt,
                 SUM(l_extendedprice) avg_price_sum, COUNT(l_extendedprice)::FLOAT4 avg_price_cnt,
                 SUM(l_discount) avg_discount_sum, COUNT(l_discount)::FLOAT4 avg_discount_cnt, COUNT(*) cnt
         FROM lineitem
         WHERE l_shipdate  <= date '1998-08-03'
         GROUP BY l_returnflag, l_linestatus
         ORDER BY l_returnflag, l_linestatus)
SELECT o.l_returnflag, o.l_linestatus, COALESCE(sum_qty, 0) sum_qty, COALESCE(sum_base_price, 0) sum_base_price, COALESCE(sum_disc_price, 0) sum_disc_price, COALESCE(sum_charge, 0) sum_charge, COALESCE(avg_qty_sum, 0) avg_qty_sum, COALESCE(avg_qty_cnt, 0) avg_qty_cnt,  COALESCE(avg_price_sum, 0) avg_price_sum, COALESCE(avg_price_cnt, 0) avg_price_cnt,  COALESCE(avg_discount_sum, 0) avg_discount_sum, COALESCE(avg_discount_cnt, 0) avg_discount_cnt,  COALESCE(cnt, 0)::BIGINT cnt, CASE WHEN p.l_returnflag IS NULL THEN true ELSE false END AS dummy_tag
FROM output_domain o LEFT JOIN partial_aggs p ON o.l_returnflag = p.l_returnflag AND o.l_linestatus = p.l_linestatus
ORDER BY o.l_returnflag, o.l_linestatus", tuple_count=6) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty_sum, #7 shared-float avg_qty_cnt, #8 shared-float avg_price_sum, #9 shared-float avg_price_cnt, #10 shared-float avg_discount_sum, #11 shared-float avg_discount_cnt, #12 shared-int64 cnt) order by: {<0, ASC> , <1, ASC> }, cost est: 0, output card: 6
            #1: SecureSqlInput<Bit> ("WITH output_domain AS (
    SELECT  *
    FROM (VALUES('R'::char(1), 'F'::char(1)), ('A', 'F'), ('N', 'F'), ('R', 'O'), ('A', 'O'), ('N', 'O')) AS li(l_returnflag, l_linestatus)
    ORDER BY l_returnflag, l_linestatus),
     partial_aggs AS (
         SELECT l_returnflag, l_linestatus, SUM(l_quantity) sum_qty, SUM(l_extendedprice) sum_base_price,
                SUM(l_extendedprice*(1-l_discount)) sum_disc_price, SUM(l_extendedprice*(1-l_discount)*(1+l_tax)) sum_charge,
                SUM(l_quantity) avg_qty_sum, COUNT(l_quantity)::FLOAT4 avg_qty_cnt,
                 SUM(l_extendedprice) avg_price_sum, COUNT(l_extendedprice)::FLOAT4 avg_price_cnt,
                 SUM(l_discount) avg_discount_sum, COUNT(l_discount)::FLOAT4 avg_discount_cnt, COUNT(*) cnt
         FROM lineitem
         WHERE l_shipdate  <= date '1998-08-03'
         GROUP BY l_returnflag, l_linestatus
         ORDER BY l_returnflag, l_linestatus)
SELECT o.l_returnflag, o.l_linestatus, COALESCE(sum_qty, 0) sum_qty, COALESCE(sum_base_price, 0) sum_base_price, COALESCE(sum_disc_price, 0) sum_disc_price, COALESCE(sum_charge, 0) sum_charge, COALESCE(avg_qty_sum, 0) avg_qty_sum, COALESCE(avg_qty_cnt, 0) avg_qty_cnt,  COALESCE(avg_price_sum, 0) avg_price_sum, COALESCE(avg_price_cnt, 0) avg_price_cnt,  COALESCE(avg_discount_sum, 0) avg_discount_sum, COALESCE(avg_discount_cnt, 0) avg_discount_cnt,  COALESCE(cnt, 0)::BIGINT cnt, CASE WHEN p.l_returnflag IS NULL THEN true ELSE false END AS dummy_tag
FROM output_domain o LEFT JOIN partial_aggs p ON o.l_returnflag = p.l_returnflag AND o.l_linestatus = p.l_linestatus
ORDER BY o.l_returnflag, o.l_linestatus", tuple_count=0) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty_sum, #7 shared-float avg_qty_cnt, #8 shared-float avg_price_sum, #9 shared-float avg_price_cnt, #10 shared-float avg_discount_sum, #11 shared-float avg_discount_cnt, #12 shared-int64 cnt) order by: {<0, ASC> , <1, ASC> }, cost est: 0, output card: 0

Total Plans : 1
Cost Optimized Plan : 
#3: Project<Bit> ((<0, P$0(8) shared-varchar>, <1, P$1(8) shared-varchar>, <2, $2 + $15 shared-float>, <3, $3 + $16 shared-float>, <4, $4 + $17 shared-float>, <5, $5 + $18 shared-float>, <6, ($6 + $19) / ($7 + $20) shared-float>, <7, ($8 + $21) / ($9 + $22) shared-float>, <8, ($10 + $23) / ($11 + $24) shared-float>, <9, $12 + $25 shared-int64>)) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float anonymous, #3 shared-float anonymous, #4 shared-float anonymous, #5 shared-float anonymous, #6 shared-float anonymous, #7 shared-float anonymous, #8 shared-float anonymous, #9 shared-int64 anonymous) order by: {<0, ASC> , <1, ASC> }, cost est: 163596, output card: 6
    #2: MergeJoin<Bit> (no-op) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty_sum, #7 shared-float avg_qty_cnt, #8 shared-float avg_price_sum, #9 shared-float avg_price_cnt, #10 shared-float avg_discount_sum, #11 shared-float avg_discount_cnt, #12 shared-int64 cnt, #13 shared-varchar(1) l_returnflag, #14 shared-varchar(1) l_linestatus, #15 shared-float sum_qty, #16 shared-float sum_base_price, #17 shared-float sum_disc_price, #18 shared-float sum_charge, #19 shared-float avg_qty_sum, #20 shared-float avg_qty_cnt, #21 shared-float avg_price_sum, #22 shared-float avg_price_cnt, #23 shared-float avg_discount_sum, #24 shared-float avg_discount_cnt, #25 shared-int64 cnt) order by: {<0, ASC> , <1, ASC> }, cost est: 18, output card: 6
        #0: SecureSqlInput<Bit> ("WITH output_domain AS (
    SELECT  *
    FROM (VALUES('R'::char(1), 'F'::char(1)), ('A', 'F'), ('N', 'F'), ('R', 'O'), ('A', 'O'), ('N', 'O')) AS li(l_returnflag, l_linestatus)
    ORDER BY l_returnflag, l_linestatus),
     partial_aggs AS (
         SELECT l_returnflag, l_linestatus, SUM(l_quantity) sum_qty, SUM(l_extendedprice) sum_base_price,
                SUM(l_extendedprice*(1-l_discount)) sum_disc_price, SUM(l_extendedprice*(1-l_discount)*(1+l_tax)) sum_charge,
                SUM(l_quantity) avg_qty_sum, COUNT(l_quantity)::FLOAT4 avg_qty_cnt,
                 SUM(l_extendedprice) avg_price_sum, COUNT(l_extendedprice)::FLOAT4 avg_price_cnt,
                 SUM(l_discount) avg_discount_sum, COUNT(l_discount)::FLOAT4 avg_discount_cnt, COUNT(*) cnt
         FROM lineitem
         WHERE l_shipdate  <= date '1998-08-03'
         GROUP BY l_returnflag, l_linestatus
         ORDER BY l_returnflag, l_linestatus)
SELECT o.l_returnflag, o.l_linestatus, COALESCE(sum_qty, 0) sum_qty, COALESCE(sum_base_price, 0) sum_base_price, COALESCE(sum_disc_price, 0) sum_disc_price, COALESCE(sum_charge, 0) sum_charge, COALESCE(avg_qty_sum, 0) avg_qty_sum, COALESCE(avg_qty_cnt, 0) avg_qty_cnt,  COALESCE(avg_price_sum, 0) avg_price_sum, COALESCE(avg_price_cnt, 0) avg_price_cnt,  COALESCE(avg_discount_sum, 0) avg_discount_sum, COALESCE(avg_discount_cnt, 0) avg_discount_cnt,  COALESCE(cnt, 0)::BIGINT cnt, CASE WHEN p.l_returnflag IS NULL THEN true ELSE false END AS dummy_tag
FROM output_domain o LEFT JOIN partial_aggs p ON o.l_returnflag = p.l_returnflag AND o.l_linestatus = p.l_linestatus
ORDER BY o.l_returnflag, o.l_linestatus", tuple_count=6) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty_sum, #7 shared-float avg_qty_cnt, #8 shared-float avg_price_sum, #9 shared-float avg_price_cnt, #10 shared-float avg_discount_sum, #11 shared-float avg_discount_cnt, #12 shared-int64 cnt) order by: {<0, ASC> , <1, ASC> }, cost est: 0, output card: 6
        #1: SecureSqlInput<Bit> ("WITH output_domain AS (
    SELECT  *
    FROM (VALUES('R'::char(1), 'F'::char(1)), ('A', 'F'), ('N', 'F'), ('R', 'O'), ('A', 'O'), ('N', 'O')) AS li(l_returnflag, l_linestatus)
    ORDER BY l_returnflag, l_linestatus),
     partial_aggs AS (
         SELECT l_returnflag, l_linestatus, SUM(l_quantity) sum_qty, SUM(l_extendedprice) sum_base_price,
                SUM(l_extendedprice*(1-l_discount)) sum_disc_price, SUM(l_extendedprice*(1-l_discount)*(1+l_tax)) sum_charge,
                SUM(l_quantity) avg_qty_sum, COUNT(l_quantity)::FLOAT4 avg_qty_cnt,
                 SUM(l_extendedprice) avg_price_sum, COUNT(l_extendedprice)::FLOAT4 avg_price_cnt,
                 SUM(l_discount) avg_discount_sum, COUNT(l_discount)::FLOAT4 avg_discount_cnt, COUNT(*) cnt
         FROM lineitem
         WHERE l_shipdate  <= date '1998-08-03'
         GROUP BY l_returnflag, l_linestatus
         ORDER BY l_returnflag, l_linestatus)
SELECT o.l_returnflag, o.l_linestatus, COALESCE(sum_qty, 0) sum_qty, COALESCE(sum_base_price, 0) sum_base_price, COALESCE(sum_disc_price, 0) sum_disc_price, COALESCE(sum_charge, 0) sum_charge, COALESCE(avg_qty_sum, 0) avg_qty_sum, COALESCE(avg_qty_cnt, 0) avg_qty_cnt,  COALESCE(avg_price_sum, 0) avg_price_sum, COALESCE(avg_price_cnt, 0) avg_price_cnt,  COALESCE(avg_discount_sum, 0) avg_discount_sum, COALESCE(avg_discount_cnt, 0) avg_discount_cnt,  COALESCE(cnt, 0)::BIGINT cnt, CASE WHEN p.l_returnflag IS NULL THEN true ELSE false END AS dummy_tag
FROM output_domain o LEFT JOIN partial_aggs p ON o.l_returnflag = p.l_returnflag AND o.l_linestatus = p.l_linestatus
ORDER BY o.l_returnflag, o.l_linestatus", tuple_count=0) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty_sum, #7 shared-float avg_qty_cnt, #8 shared-float avg_price_sum, #9 shared-float avg_price_cnt, #10 shared-float avg_discount_sum, #11 shared-float avg_discount_cnt, #12 shared-int64 cnt) order by: {<0, ASC> , <1, ASC> }, cost est: 0, output card: 0

Cost Optimization Time : 0.000373 sec
Operator #0 SecureSqlInput ran for 0.324000 ms, gate count: 0 output cardinality: 6, row width=401
Operator #1 SecureSqlInput ran for 0.022000 ms, gate count: 0 output cardinality: 0, row width=401
Operator #2 MergeJoin ran for 0.290000 ms, gate count: 0 output cardinality: 6, row width=801
Operator #3 Project ran for 99.040000 ms, gate count: 128100 output cardinality: 6, row width=305
Runtime: 0.178565 sec, CPU Time: 0.063142 sec, CPU clock ticks: 63142, CPU clock ticks per second: 1000000
End-to-end estimated gates: 163614. observed gates: 128100 gates, relative error (%)=27.7237
[Linux]Peak resident set size: 1409155072 bytes, current memory size: 1367355392 bytes.
Initial Memory: 1409155072 bytes, Peak Memory After Execution: 1409155072 bytes, Memory Usage: 0 bytes
Bandwidth: 1.37738e+08 Bps
party 3 send 24595200 bytes to party 1
party 3 send 0 bytes to TP 
total AND gate: 128100
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.cost_optimized_tpch_q1 (12680 ms)
[ RUN      ] GeneralizedComparisonTest.cost_optimized_tpch_q3
Connecting to 127.0.0.1 on ports 7654, 65482 as 3
party 3 connected to TP
party 3 connected to GB
party 3 connected to TP
party 3 connected to GB
initializing cot
setup finished! takes 847.92ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 1692241920 bytes, current memory size: 1692241920 bytes.
1692241920
EMP mode: outsourced, storage mode: column store
Code version: 5520450e48d58739c9c30b64a3a3a0430a5aede3
GFlags: --flagfile=	--alice_db=tpch_alice_1500	--alice_host=127.0.0.1	--bob_db=tpch_bob_1500	--ctrl_port=65482	--cutoff=100	--filter=*	--party=3	--port=7654	--storage=column	--unioned_db=tpch_unioned_1500	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 1692372992 bytes, current memory size: 1692372992 bytes.
Original Tree : 
#9: Project<Bit> ((<0, P$0(16) shared-int32>, <1, P$3(32) shared-float>, <2, P$1(28) shared-int64>, <3, P$2(1) shared-int32>)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-float revenue, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32(1) orders.o_shippriority) order by: {<-1, ASC> , <1, DESC> , <2, ASC> }, cost est: 0, output card: 10
    #8: Sort<Bit> ({<-1, ASC> , <3, DESC> , <1, ASC> }) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority, #3 shared-float revenue) order by: {<-1, ASC> , <3, DESC> , <1, ASC> }, cost est: 5312, output card: 10
        #7: SortMergeAggregate<Bit> (group-by: (0, 1, 2) aggs: (SUM($3) revenue)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority, #3 shared-float revenue) order by: {<0, ASC> , <1, ASC> , <2, ASC> }, cost est: 1773000, output card: 60175
            #6: Project<Bit> ((<0, P$0(16) shared-int32>, <1, P$1(28) shared-int64>, <2, P$2(1) shared-int32>, <3, P$4(32) shared-float>)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority, #3 shared-float revenue) order by: {<-1, ASC> , <0, ASC> }, cost est: 0, output card: 1500
                #5: KeyedSortMergeJoin<Bit> (P$0(16) == P$3(16) - sortCompatible) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority, #3 shared-int32(16) lineitem.l_orderkey, #4 shared-float revenue) order by: {<-1, ASC> , <0, ASC> , <3, ASC> }, cost est: 34989333, output card: 1500
                    #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority) order by: {<0, ASC> }, cost est: 2970557, output card: 1500
                        #3: Project<Bit> ((<0, P$0(16) shared-int32>, <1, P$2(28) shared-int64>, <2, P$3(1) shared-int32>)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority) order by: {<-1, ASC> }, cost est: 0, output card: 1500
                            #2: KeyedSortMergeJoin<Bit> (P$1(11) == P$4(11) - sortCompatible) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32(1) orders.o_shippriority, #4 shared-int32(11) customer.c_custkey) order by: {<-1, ASC> , <1, ASC> , <4, ASC> }, cost est: 36362709, output card: 1500
                                #-1: Sort<Bit> ({<1, ASC> }) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32(1) orders.o_shippriority) order by: {<1, ASC> }, cost est: 3244762, output card: 1500
                                    #0: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_orderdate, o_shippriority, NOT o_orderdate < DATE '1995-03-25' AS dummy_tag FROM orders ORDER BY o_orderkey, o_orderdate, o_shippriority", tuple_count=1500) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32(1) orders.o_shippriority) order by: {<0, ASC> }, cost est: 0, output card: 1500
                                #1: SecureSqlInput<Bit> ("SELECT c_custkey, NOT c_mktsegment = 'HOUSEHOLD' AS dummy_tag FROM customer ORDER BY c_custkey", tuple_count=1500) : (#0 shared-int32(11) customer.c_custkey) order by: {<0, ASC> }, cost est: 0, output card: 1500
                    #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_extendedprice * (1 - l_discount) AS revenue, NOT l_shipdate > DATE '1995-03-25' AS dummy_tag FROM lineitem ORDER BY l_orderkey", tuple_count=1500) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 0, output card: 1500

Total Plans : 96
Cost Optimized Plan : 
#9: Project<Bit> ((<0, P$0(16) shared-int32>, <1, P$3(32) shared-float>, <2, P$1(28) shared-int64>, <3, P$2(1) shared-int32>)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-float revenue, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32(1) orders.o_shippriority) order by: {<-1, ASC> , <1, DESC> , <2, ASC> }, cost est: 0, output card: 10
    #8: Sort<Bit> ({<-1, ASC> , <3, DESC> , <1, ASC> }) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority, #3 shared-float revenue) order by: {<-1, ASC> , <3, DESC> , <1, ASC> }, cost est: 5312, output card: 10
        #7: SortMergeAggregate<Bit> (group-by: (0, 1, 2) aggs: (SUM($3) revenue)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority, #3 shared-float revenue) order by: {<0, ASC> , <1, ASC> , <2, ASC> }, cost est: 1773000, output card: 60175
            #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority, #3 shared-float revenue) order by: {<0, ASC> }, cost est: 4432985, output card: 1500
                #6: Project<Bit> ((<0, P$0(16) shared-int32>, <1, P$1(28) shared-int64>, <2, P$2(1) shared-int32>, <3, P$4(32) shared-float>)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority, #3 shared-float revenue) order by: {<-1, ASC> , <0, ASC> }, cost est: 0, output card: 1500
                    #5: KeyedSortMergeJoin<Bit> (P$0(16) == P$3(16) - sortCompatible) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority, #3 shared-int32(16) lineitem.l_orderkey, #4 shared-float revenue) order by: {<-1, ASC> , <0, ASC> , <3, ASC> }, cost est: 34989333, output card: 1500
                        #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority) order by: {<0, ASC> }, cost est: 2970557, output card: 1500
                            #3: Project<Bit> ((<0, P$0(16) shared-int32>, <1, P$2(28) shared-int64>, <2, P$3(1) shared-int32>)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority) order by: {<-1, ASC> }, cost est: 0, output card: 1500
                                #2: KeyedSortMergeJoin<Bit> (P$1(11) == P$4(11) - sortCompatible) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32(1) orders.o_shippriority, #4 shared-int32(11) customer.c_custkey) order by: {<-1, ASC> , <1, ASC> , <4, ASC> }, cost est: 36362709, output card: 1500
                                    #0: SecureSqlInput<Bit> ("SELECT * FROM (SELECT o_orderkey, o_custkey, o_orderdate, o_shippriority, NOT o_orderdate < DATE '1995-03-25' AS dummy_tag FROM orders ORDER BY o_orderkey, o_orderdate, o_shippriority) to_sort ORDER BY (2)  ASC ", tuple_count=1500) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32(1) orders.o_shippriority) order by: {<1, ASC> }, cost est: 561823, output card: 1500
                                    #1: SecureSqlInput<Bit> ("SELECT c_custkey, NOT c_mktsegment = 'HOUSEHOLD' AS dummy_tag FROM customer ORDER BY c_custkey", tuple_count=1500) : (#0 shared-int32(11) customer.c_custkey) order by: {<0, ASC> }, cost est: 0, output card: 1500
                        #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_extendedprice * (1 - l_discount) AS revenue, NOT l_shipdate > DATE '1995-03-25' AS dummy_tag FROM lineitem ORDER BY l_orderkey", tuple_count=1500) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 0, output card: 1500

Cost Optimization Time : 0.015031 sec
Operator #0 SecureSqlInput ran for 14.601000 ms, gate count: 0 output cardinality: 1500, row width=57
Operator #1 SecureSqlInput ran for 2.801000 ms, gate count: 0 output cardinality: 1500, row width=12
extension finished! takes 718.315ms to extend lpn
extension finished! takes 755.478ms to extend lpn
extension finished! takes 754.974ms to extend lpn
extension finished! takes 747.035ms to extend lpn
extension finished! takes 744.201ms to extend lpn
Operator #2 KeyedSortMergeJoin ran for 22468.989000 ms, gate count: 25911033 output cardinality: 1500, row width=68
Operator #3 Project ran for 5.004000 ms, gate count: 0 output cardinality: 1500, row width=46
Operator #-1 Sort ran for 1789.073000 ms, gate count: 3572412 output cardinality: 1500, row width=46
Operator #4 SecureSqlInput ran for 9.564000 ms, gate count: 0 output cardinality: 1500, row width=49
extension finished! takes 734.907ms to extend lpn
extension finished! takes 732.452ms to extend lpn
extension finished! takes 730.875ms to extend lpn
extension finished! takes 727.034ms to extend lpn
extension finished! takes 729.426ms to extend lpn
Operator #5 KeyedSortMergeJoin ran for 18417.239000 ms, gate count: 54545460 output cardinality: 1500, row width=94
Operator #6 Project ran for 9.140000 ms, gate count: 0 output cardinality: 1500, row width=78
extension finished! takes 714.697ms to extend lpn
Operator #-1 Sort ran for 4106.925000 ms, gate count: 4966524 output cardinality: 1500, row width=78
extension finished! takes 728.782ms to extend lpn
Operator #7 SortMergeAggregate ran for 2566.829000 ms, gate count: 1728379 output cardinality: 1500, row width=78
extension finished! takes 720.805ms to extend lpn
extension finished! takes 719.642ms to extend lpn
extension finished! takes 717.641ms to extend lpn
extension finished! takes 722.079ms to extend lpn
extension finished! takes 725.673ms to extend lpn
Operator #8 Sort ran for 17971.090000 ms, gate count: 24789054 output cardinality: 10, row width=78
Operator #9 Project ran for 0.055000 ms, gate count: 0 output cardinality: 10, row width=78
Runtime: 67.4073 sec, CPU Time: 67.1038 sec, CPU clock ticks: 6.71038e+07, CPU clock ticks per second: 1000000
End-to-end estimated gates: 8.05339e+07. observed gates: 86029417 gates, relative error (%)=6.38795
[Linux]Peak resident set size: 1815285760 bytes, current memory size: 1715265536 bytes.
Initial Memory: 1692372992 bytes, Peak Memory After Execution: 1815285760 bytes, Memory Usage: 122912768 bytes
Bandwidth: 2.45043e+08 Bps
party 3 send 16517648064 bytes to party 1
party 3 send 0 bytes to TP 
total AND gate: 86029417
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.cost_optimized_tpch_q3 (68393 ms)
[ RUN      ] GeneralizedComparisonTest.cost_optimized_tpch_q5
Connecting to 127.0.0.1 on ports 7654, 65482 as 3
party 3 connected to TP
party 3 connected to GB
party 3 connected to TP
party 3 connected to GB
initializing cot
setup finished! takes 825.032ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 1815285760 bytes, current memory size: 1726255104 bytes.
1815285760
EMP mode: outsourced, storage mode: column store
Code version: 5520450e48d58739c9c30b64a3a3a0430a5aede3
GFlags: --flagfile=	--alice_db=tpch_alice_1500	--alice_host=127.0.0.1	--bob_db=tpch_bob_1500	--ctrl_port=65482	--cutoff=100	--filter=*	--party=3	--port=7654	--storage=column	--unioned_db=tpch_unioned_1500	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 1815285760 bytes, current memory size: 1726255104 bytes.
Original Tree : 
#11: Sort<Bit> ({<1, DESC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<1, DESC> }, cost est: 2583, output card: 5
    #10: SortMergeAggregate<Bit> (group-by: (0) aggs: (SUM($1) revenue)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 2229000, output card: 5
        #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 19925584, output card: 1500
            #9: Project<Bit> ((<0, P$4(200) shared-varchar>, <1, P$2(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<-1, ASC> }, cost est: 0, output card: 1500
                #8: KeyedSortMergeJoin<Bit> ((P$1(16) == P$5(16)) AND (P$0(5) == P$3(5)) - not sort compatible, need sort in smj) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(16) lineitem.l_orderkey, #2 shared-float revenue, #3 shared-int32(5) customer.c_nationkey, #4 shared-varchar(25) nation.n_name, #5 shared-int32(16) orders.o_orderkey) order by: {<-1, ASC> , <1, ASC> , <5, ASC> , <0, ASC> , <3, ASC> }, cost est: 103639476, output card: 1500
                    #-1: Sort<Bit> ({<1, ASC> , <0, ASC> }) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(16) lineitem.l_orderkey, #2 shared-float revenue) order by: {<1, ASC> , <0, ASC> }, cost est: 3701771, output card: 1500
                        #3: Project<Bit> ((<0, P$1(5) shared-int32>, <1, P$2(16) shared-int32>, <2, P$4(32) shared-float>)) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(16) lineitem.l_orderkey, #2 shared-float revenue) order by: {}, cost est: 0, output card: 1500
                            #2: KeyedJoin<Bit> (P$0(7) == P$3(7)) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey, #2 shared-int32(16) lineitem.l_orderkey, #3 shared-int32(7) lineitem.l_suppkey, #4 shared-float revenue) order by: {<3, ASC> , <0, ASC> }, cost est: 690000, output card: 1500
                                #0: SecureSqlInput<Bit> ("SELECT s_suppkey, s_nationkey FROM supplier JOIN nation ON s_nationkey = n_nationkey JOIN region ON n_regionkey = r_regionkey WHERE r_name = 'EUROPE' ORDER BY s_suppkey", tuple_count=20) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey) order by: {<0, ASC> }, cost est: 0, output card: 20
                                #1: SecureSqlInput<Bit> ("SELECT l_orderkey, l_suppkey, l_extendedprice * (1 - l_discount) AS revenue FROM lineitem ORDER BY l_suppkey", tuple_count=1500) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float revenue) order by: {<1, ASC> }, cost est: 0, output card: 1500
                    #-1: Sort<Bit> ({<-1, ASC> }) : (#0 shared-int32(5) customer.c_nationkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(16) orders.o_orderkey) order by: {<-1, ASC> }, cost est: 10328399, output card: 1500
                        #7: Project<Bit> ((<0, P$1(5) shared-int32>, <1, P$2(200) shared-varchar>, <2, P$3(16) shared-int32>)) : (#0 shared-int32(5) customer.c_nationkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(16) orders.o_orderkey) order by: {<-1, ASC> }, cost est: 0, output card: 1500
                            #6: KeyedSortMergeJoin<Bit> (P$0(11) == P$4(11) - sortCompatible) : (#0 shared-int32(11) customer.c_custkey, #1 shared-int32(5) customer.c_nationkey, #2 shared-varchar(25) nation.n_name, #3 shared-int32(16) orders.o_orderkey, #4 shared-int32(11) orders.o_custkey) order by: {<-1, ASC> , <0, ASC> , <4, ASC> }, cost est: 31783601, output card: 1500
                                #4: SecureSqlInput<Bit> ("SELECT t2.c_custkey, t2.c_nationkey, t1.n_name FROM (SELECT r_regionkey, r_name FROM region WHERE r_name = 'EUROPE') AS t0 INNER JOIN (SELECT n_nationkey, n_name, n_regionkey FROM nation) AS t1 ON t0.r_regionkey = t1.n_regionkey INNER JOIN (SELECT c_custkey, c_nationkey FROM customer) AS t2 ON t1.n_nationkey = t2.c_nationkey ORDER BY t2.c_custkey ASC", tuple_count=272) : (#0 shared-int32(11) customer.c_custkey, #1 shared-int32(5) customer.c_nationkey, #2 shared-varchar(25) nation.n_name) order by: {<0, ASC> }, cost est: 0, output card: 272
                                #5: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, NOT (o_orderdate >= DATE '1993-01-01' AND o_orderdate < DATE '1994-01-01') AS dummy_tag FROM orders ORDER BY o_custkey, o_orderdate", tuple_count=1500) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey) order by: {<1, ASC> }, cost est: 0, output card: 1500

Total Plans : 144
Cost Optimized Plan : 
#11: Sort<Bit> ({<1, DESC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<1, DESC> }, cost est: 2583, output card: 5
    #10: NestedLoopAggregate<Bit> (group-by: (0) aggs: (SUM($1) revenue)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {}, cost est: 11385000, output card: 5
        #9: Project<Bit> ((<0, P$4(200) shared-varchar>, <1, P$2(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<-1, ASC> }, cost est: 0, output card: 1500
            #8: KeyedSortMergeJoin<Bit> ((P$1(16) == P$5(16)) AND (P$0(5) == P$3(5)) - sortCompatible) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(16) lineitem.l_orderkey, #2 shared-float revenue, #3 shared-int32(5) customer.c_nationkey, #4 shared-varchar(25) nation.n_name, #5 shared-int32(16) orders.o_orderkey) order by: {<-1, ASC> , <1, ASC> , <5, ASC> , <0, ASC> , <3, ASC> }, cost est: 79326610, output card: 1500
                #3: Project<Bit> ((<0, P$1(5) shared-int32>, <1, P$2(16) shared-int32>, <2, P$4(32) shared-float>)) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(16) lineitem.l_orderkey, #2 shared-float revenue) order by: {<1, ASC> , <0, ASC> }, cost est: 0, output card: 1500
                    #2: KeyedJoin<Bit> (P$0(7) == P$3(7)) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey, #2 shared-int32(16) lineitem.l_orderkey, #3 shared-int32(7) lineitem.l_suppkey, #4 shared-float revenue) order by: {<2, ASC> , <1, ASC> }, cost est: 690000, output card: 1500
                        #0: SecureSqlInput<Bit> ("SELECT * FROM (SELECT s_suppkey, s_nationkey FROM supplier JOIN nation ON s_nationkey = n_nationkey JOIN region ON n_regionkey = r_regionkey WHERE r_name = 'EUROPE' ORDER BY s_suppkey) to_sort ORDER BY (2)  ASC ", tuple_count=20) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey) order by: {<1, ASC> }, cost est: 903, output card: 20
                        #1: SecureSqlInput<Bit> ("SELECT * FROM (SELECT l_orderkey, l_suppkey, l_extendedprice * (1 - l_discount) AS revenue FROM lineitem ORDER BY l_suppkey) to_sort ORDER BY (1)  ASC ", tuple_count=1500) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float revenue) order by: {<0, ASC> }, cost est: 593475, output card: 1500
                #-1: Sort<Bit> ({<2, ASC> , <0, ASC> }) : (#0 shared-int32(5) customer.c_nationkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(16) orders.o_orderkey) order by: {<2, ASC> , <0, ASC> }, cost est: 11379519, output card: 1500
                    #-1: Sort<Bit> ({}) : (#0 shared-int32(5) customer.c_nationkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(16) orders.o_orderkey) order by: {}, cost est: 10145595, output card: 1500
                        #7: Project<Bit> ((<0, P$1(5) shared-int32>, <1, P$2(200) shared-varchar>, <2, P$3(16) shared-int32>)) : (#0 shared-int32(5) customer.c_nationkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(16) orders.o_orderkey) order by: {<-1, ASC> }, cost est: 0, output card: 1500
                            #6: KeyedSortMergeJoin<Bit> (P$0(11) == P$4(11) - sortCompatible) : (#0 shared-int32(11) customer.c_custkey, #1 shared-int32(5) customer.c_nationkey, #2 shared-varchar(25) nation.n_name, #3 shared-int32(16) orders.o_orderkey, #4 shared-int32(11) orders.o_custkey) order by: {<-1, ASC> , <0, ASC> , <4, ASC> }, cost est: 31783601, output card: 1500
                                #4: SecureSqlInput<Bit> ("SELECT t2.c_custkey, t2.c_nationkey, t1.n_name FROM (SELECT r_regionkey, r_name FROM region WHERE r_name = 'EUROPE') AS t0 INNER JOIN (SELECT n_nationkey, n_name, n_regionkey FROM nation) AS t1 ON t0.r_regionkey = t1.n_regionkey INNER JOIN (SELECT c_custkey, c_nationkey FROM customer) AS t2 ON t1.n_nationkey = t2.c_nationkey ORDER BY t2.c_custkey ASC", tuple_count=272) : (#0 shared-int32(11) customer.c_custkey, #1 shared-int32(5) customer.c_nationkey, #2 shared-varchar(25) nation.n_name) order by: {<0, ASC> }, cost est: 0, output card: 272
                                #5: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, NOT (o_orderdate >= DATE '1993-01-01' AND o_orderdate < DATE '1994-01-01') AS dummy_tag FROM orders ORDER BY o_custkey, o_orderdate", tuple_count=1500) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey) order by: {<1, ASC> }, cost est: 0, output card: 1500

Cost Optimization Time : 0.024621 sec
Operator #0 SecureSqlInput ran for 0.058000 ms, gate count: 0 output cardinality: 20, row width=13
Operator #1 SecureSqlInput ran for 10.791000 ms, gate count: 0 output cardinality: 1500, row width=56
Operator #2 KeyedJoin ran for 1780.544000 ms, gate count: 720000 output cardinality: 1500, row width=68
Operator #3 Project ran for 6.546000 ms, gate count: 0 output cardinality: 1500, row width=54
Operator #4 SecureSqlInput ran for 8.193000 ms, gate count: 0 output cardinality: 272, row width=217
Operator #5 SecureSqlInput ran for 5.778000 ms, gate count: 0 output cardinality: 1500, row width=28
extension finished! takes 742.964ms to extend lpn
extension finished! takes 749.582ms to extend lpn
extension finished! takes 745.033ms to extend lpn
extension finished! takes 747.026ms to extend lpn
extension finished! takes 762.552ms to extend lpn
extension finished! takes 779.724ms to extend lpn
extension finished! takes 761.957ms to extend lpn
Operator #6 KeyedSortMergeJoin ran for 30555.325000 ms, gate count: 38769779 output cardinality: 1500, row width=244
Operator #7 Project ran for 27.992000 ms, gate count: 0 output cardinality: 1500, row width=222
extension finished! takes 731.58ms to extend lpn
extension finished! takes 727.624ms to extend lpn
Operator #-1 Sort ran for 5989.247000 ms, gate count: 9671652 output cardinality: 1500, row width=222
extension finished! takes 735.709ms to extend lpn
extension finished! takes 730.038ms to extend lpn
extension finished! takes 729.581ms to extend lpn
Operator #-1 Sort ran for 10975.107000 ms, gate count: 11849952 output cardinality: 1500, row width=222
extension finished! takes 747.792ms to extend lpn
extension finished! takes 784.882ms to extend lpn
extension finished! takes 784.859ms to extend lpn
extension finished! takes 794.91ms to extend lpn
extension finished! takes 785.285ms to extend lpn
extension finished! takes 782.863ms to extend lpn
extension finished! takes 769.257ms to extend lpn
extension finished! takes 779.772ms to extend lpn
extension finished! takes 775.093ms to extend lpn
extension finished! takes 763.714ms to extend lpn
extension finished! takes 785.631ms to extend lpn
extension finished! takes 798.503ms to extend lpn
extension finished! takes 791.074ms to extend lpn
Operator #8 KeyedSortMergeJoin ran for 53173.859000 ms, gate count: 128576314 output cardinality: 1500, row width=275
Operator #9 Project ran for 30.257000 ms, gate count: 0 output cardinality: 1500, row width=233
extension finished! takes 735.236ms to extend lpn
extension finished! takes 725.911ms to extend lpn
Operator #10 NestedLoopAggregate ran for 10145.621000 ms, gate count: 10942500 output cardinality: 5, row width=233
Operator #11 Sort ran for 1.906000 ms, gate count: 5940 output cardinality: 5, row width=233
Runtime: 112.786 sec, CPU Time: 105.253 sec, CPU clock ticks: 1.05253e+08, CPU clock ticks per second: 1000000
End-to-end estimated gates: 1.44713e+08. observed gates: 139524754 gates, relative error (%)=3.71845
[Linux]Peak resident set size: 2032340992 bytes, current memory size: 1742897152 bytes.
Initial Memory: 1815285760 bytes, Peak Memory After Execution: 2032340992 bytes, Memory Usage: 217055232 bytes
Bandwidth: 2.37517e+08 Bps
party 3 send 26788752768 bytes to party 1
party 3 send 0 bytes to TP 
total AND gate: 139524754
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.cost_optimized_tpch_q5 (113837 ms)
[ RUN      ] GeneralizedComparisonTest.cost_optimized_tpch_q8
Connecting to 127.0.0.1 on ports 7654, 65482 as 3
party 3 connected to TP
party 3 connected to GB
party 3 connected to TP
party 3 connected to GB
initializing cot
setup finished! takes 754.244ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 2032340992 bytes, current memory size: 1742876672 bytes.
2032340992
EMP mode: outsourced, storage mode: column store
Code version: 5520450e48d58739c9c30b64a3a3a0430a5aede3
GFlags: --flagfile=	--alice_db=tpch_alice_1500	--alice_host=127.0.0.1	--bob_db=tpch_bob_1500	--ctrl_port=65482	--cutoff=100	--filter=*	--party=3	--port=7654	--storage=column	--unioned_db=tpch_unioned_1500	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 2032340992 bytes, current memory size: 1742876672 bytes.
Original Tree : 
#12: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32 orders.o_year, #1 shared-float mkt_share) order by: {<0, ASC> }, cost est: 100, output card: 2
    #11: Project<Bit> ((<0, P$0(32) shared-int32>, <1, $2 / $1 shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float mkt_share) order by: {<0, ASC> }, cost est: 7618, output card: 2
        #10: SortMergeAggregate<Bit> (group-by: (0) aggs: (SUM($1) null, SUM($2) null)) : (#0 shared-int32 orders.o_year, #1 shared-float null, #2 shared-float null) order by: {<0, ASC> }, cost est: 3450000, output card: 2
            #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32 orders.o_year, #1 shared-float volume, #2 shared-float selected_volume) order by: {<0, ASC> }, cost est: 6032516, output card: 1500
                #9: Project<Bit> ((<0, P$1(32) shared-int32>, <1, P$3(32) shared-float>, <2, CASE($4, $3, SECRET FLOAT) shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float volume, #2 shared-float selected_volume) order by: {}, cost est: 0, output card: 1500
                    #8: KeyedJoin<Bit> (P$0(16) == P$2(16)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32 orders.o_year, #2 shared-int32(16) lineitem.l_orderkey, #3 shared-float volume, #4 shared-bool nation_check) order by: {}, cost est: 153000000, output card: 1500
                        #3: Project<Bit> ((<0, P$1(16) shared-int32>, <1, P$3(32) shared-int32>)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32 orders.o_year) order by: {}, cost est: 0, output card: 1500
                            #2: KeyedJoin<Bit> (P$0(11) == P$2(11)) : (#0 shared-int32(11) customer.c_custkey, #1 shared-int32(16) orders.o_orderkey, #2 shared-int32(11) orders.o_custkey, #3 shared-int32 orders.o_year) order by: {<2, ASC> , <0, ASC> }, cost est: 11778000, output card: 1500
                                #0: SecureSqlInput<Bit> ("SELECT c_custkey FROM customer c JOIN nation n1 ON c_nationkey = n_nationkey JOIN region ON r_regionkey = n_regionkey WHERE r_name = 'AFRICA' ORDER BY c_custkey", tuple_count=302) : (#0 shared-int32(11) customer.c_custkey) order by: {<0, ASC> }, cost est: 0, output card: 302
                                #1: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_orderyear::INT AS o_year, NOT (o_orderdate >= date '1995-01-01' and o_orderdate < date '1996-12-31') dummy_tag FROM orders ORDER BY o_custkey", tuple_count=1500) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-int32 orders.o_year) order by: {<1, ASC> }, cost est: 0, output card: 1500
                        #7: Project<Bit> ((<0, P$0(16) shared-int32>, <1, P$2(32) shared-float>, <2, P$4(1) shared-bool>)) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-float volume, #2 shared-bool nation_check) order by: {}, cost est: 0, output card: 1500
                            #6: KeyedJoin<Bit> (P$1(7) == P$3(7)) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float volume, #3 shared-int32(7) supplier.s_suppkey, #4 shared-bool nation_check) order by: {<1, ASC> , <3, ASC> }, cost est: 2850000, output card: 1500
                                #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_suppkey, l_extendedprice * (1.0 - l_discount) AS volume,        CASE            WHEN p_type = 'LARGE ANODIZED STEEL' AND p_partkey = l_partkey THEN FALSE            ELSE TRUE            END AS dummy_tag FROM lineitem LEFT JOIN part ON p_partkey = l_partkey ORDER BY l_suppkey", tuple_count=1500) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float volume) order by: {<1, ASC> }, cost est: 0, output card: 1500
                                #5: SecureSqlInput<Bit> ("SELECT s_suppkey, CASE WHEN n_name = 'KENYA' THEN true ELSE false END AS nation_check FROM supplier JOIN nation ON n_nationkey = s_nationkey ORDER BY s_suppkey", tuple_count=100) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-bool nation_check) order by: {<0, ASC> }, cost est: 0, output card: 100

Total Plans : 576
Cost Optimized Plan : 
#12: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32 orders.o_year, #1 shared-float mkt_share) order by: {<0, ASC> }, cost est: 100, output card: 2
    #11: Project<Bit> ((<0, P$0(32) shared-int32>, <1, $2 / $1 shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float anonymous) order by: {}, cost est: 7618, output card: 2
        #10: NestedLoopAggregate<Bit> (group-by: (0) aggs: (SUM($1) null, SUM($2) null)) : (#0 shared-int32 orders.o_year, #1 shared-float null, #2 shared-float null) order by: {}, cost est: 7092000, output card: 2
            #9: Project<Bit> ((<0, P$1(32) shared-int32>, <1, P$3(32) shared-float>, <2, CASE($4, $3, SECRET FLOAT) shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float volume, #2 shared-float anonymous) order by: {<-1, ASC> }, cost est: 0, output card: 1500
                #8: KeyedSortMergeJoin<Bit> (P$0(16) == P$2(16) - sortCompatible) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32 orders.o_year, #2 shared-int32(16) lineitem.l_orderkey, #3 shared-float volume, #4 shared-bool nation_check) order by: {<-1, ASC> , <0, ASC> , <2, ASC> }, cost est: 35239789, output card: 1500
                    #3: Project<Bit> ((<0, P$1(16) shared-int32>, <1, P$3(32) shared-int32>)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32 orders.o_year) order by: {<0, ASC> }, cost est: 0, output card: 1500
                        #2: KeyedJoin<Bit> (P$0(11) == P$2(11)) : (#0 shared-int32(11) customer.c_custkey, #1 shared-int32(16) orders.o_orderkey, #2 shared-int32(11) orders.o_custkey, #3 shared-int32 orders.o_year) order by: {<1, ASC> }, cost est: 11778000, output card: 1500
                            #0: SecureSqlInput<Bit> ("SELECT c_custkey FROM customer c JOIN nation n1 ON c_nationkey = n_nationkey JOIN region ON r_regionkey = n_regionkey WHERE r_name = 'AFRICA' ORDER BY c_custkey", tuple_count=302) : (#0 shared-int32(11) customer.c_custkey) order by: {}, cost est: 0, output card: 302
                            #1: SecureSqlInput<Bit> ("SELECT * FROM (SELECT o_orderkey, o_custkey, o_orderyear::INT AS o_year, NOT (o_orderdate >= date '1995-01-01' and o_orderdate < date '1996-12-31') dummy_tag FROM orders ORDER BY o_custkey) to_sort ORDER BY (1)  ASC ", tuple_count=1500) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-int32 orders.o_year) order by: {<0, ASC> }, cost est: 625127, output card: 1500
                    #7: Project<Bit> ((<0, P$0(16) shared-int32>, <1, P$2(32) shared-float>, <2, P$4(1) shared-bool>)) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-float volume, #2 shared-bool nation_check) order by: {<0, ASC> }, cost est: 0, output card: 1500
                        #6: KeyedJoin<Bit> (P$1(7) == P$3(7)) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float volume, #3 shared-int32(7) supplier.s_suppkey, #4 shared-bool nation_check) order by: {<0, ASC> }, cost est: 2850000, output card: 1500
                            #4: SecureSqlInput<Bit> ("SELECT * FROM (SELECT l_orderkey, l_suppkey, l_extendedprice * (1.0 - l_discount) AS volume,        CASE            WHEN p_type = 'LARGE ANODIZED STEEL' AND p_partkey = l_partkey THEN FALSE            ELSE TRUE            END AS dummy_tag FROM lineitem LEFT JOIN part ON p_partkey = l_partkey ORDER BY l_suppkey) to_sort ORDER BY (1)  ASC ", tuple_count=1500) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float volume) order by: {<0, ASC> }, cost est: 593475, output card: 1500
                            #5: SecureSqlInput<Bit> ("SELECT s_suppkey, CASE WHEN n_name = 'KENYA' THEN true ELSE false END AS nation_check FROM supplier JOIN nation ON n_nationkey = s_nationkey ORDER BY s_suppkey", tuple_count=100) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-bool nation_check) order by: {}, cost est: 0, output card: 100

Cost Optimization Time : 0.11424 sec
Operator #0 SecureSqlInput ran for 0.488000 ms, gate count: 0 output cardinality: 302, row width=12
Operator #1 SecureSqlInput ran for 11.400000 ms, gate count: 0 output cardinality: 1500, row width=60
extension finished! takes 731.404ms to extend lpn
extension finished! takes 724.665ms to extend lpn
Operator #2 KeyedJoin ran for 8504.416000 ms, gate count: 12231000 output cardinality: 1500, row width=71
Operator #3 Project ran for 5.945000 ms, gate count: 0 output cardinality: 1500, row width=49
Operator #4 SecureSqlInput ran for 11.231000 ms, gate count: 0 output cardinality: 1500, row width=56
Operator #5 SecureSqlInput ran for 0.132000 ms, gate count: 0 output cardinality: 100, row width=9
extension finished! takes 729.084ms to extend lpn
Operator #6 KeyedJoin ran for 3547.682000 ms, gate count: 3000000 output cardinality: 1500, row width=64
Operator #7 Project ran for 5.982000 ms, gate count: 0 output cardinality: 1500, row width=50
extension finished! takes 745.798ms to extend lpn
extension finished! takes 742.06ms to extend lpn
extension finished! takes 758.387ms to extend lpn
extension finished! takes 756.782ms to extend lpn
extension finished! takes 736.171ms to extend lpn
Operator #8 KeyedSortMergeJoin ran for 18437.643000 ms, gate count: 40532841 output cardinality: 1500, row width=98
Operator #9 Project ran for 95.388000 ms, gate count: 48000 output cardinality: 1500, row width=97
extension finished! takes 728.661ms to extend lpn
Operator #10 NestedLoopAggregate ran for 3399.649000 ms, gate count: 6528000 output cardinality: 2, row width=97
Operator #11 Project ran for 2.872000 ms, gate count: 7618 output cardinality: 2, row width=65
Operator #12 Sort ran for 0.065000 ms, gate count: 131 output cardinality: 2, row width=65
Runtime: 34.1853 sec, CPU Time: 35.085 sec, CPU clock ticks: 3.5085e+07, CPU clock ticks per second: 1000000
End-to-end estimated gates: 5.69675e+07. observed gates: 47116590 gates, relative error (%)=20.9075
[Linux]Peak resident set size: 2032340992 bytes, current memory size: 1744568320 bytes.
Initial Memory: 2032340992 bytes, Peak Memory After Execution: 2032340992 bytes, Memory Usage: 0 bytes
Bandwidth: 2.64628e+08 Bps
party 3 send 9046385280 bytes to party 1
party 3 send 0 bytes to TP 
total AND gate: 47116590
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.cost_optimized_tpch_q8 (35139 ms)
[ RUN      ] GeneralizedComparisonTest.cost_optimized_tpch_q9
Connecting to 127.0.0.1 on ports 7654, 65482 as 3
party 3 connected to TP
party 3 connected to GB
party 3 connected to TP
party 3 connected to GB
initializing cot
setup finished! takes 758.422ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 2032340992 bytes, current memory size: 1775222784 bytes.
2032340992
EMP mode: outsourced, storage mode: column store
Code version: 5520450e48d58739c9c30b64a3a3a0430a5aede3
GFlags: --flagfile=	--alice_db=tpch_alice_1500	--alice_host=127.0.0.1	--bob_db=tpch_bob_1500	--ctrl_port=65482	--cutoff=100	--filter=*	--party=3	--port=7654	--storage=column	--unioned_db=tpch_unioned_1500	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 2032340992 bytes, current memory size: 1775222784 bytes.
Original Tree : 
#11: Sort<Bit> ({<0, ASC> , <1, DESC> }) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 o_year, #2 shared-float sum_profit) order by: {<0, ASC> , <1, DESC> }, cost est: 1385772, output card: 175
    #10: SortMergeAggregate<Bit> (group-by: (0, 1) aggs: (SUM($2) sum_profit)) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 o_year, #2 shared-float sum_profit) order by: {<0, ASC> , <1, ASC> }, cost est: 2325000, output card: 175
        #-1: Sort<Bit> ({<0, ASC> , <1, ASC> }) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 o_year, #2 shared-float amount) order by: {<0, ASC> , <1, ASC> }, cost est: 22987542, output card: 1500
            #9: Project<Bit> ((<0, P$0(200) shared-varchar>, <1, P$8(32) shared-int32>, <2, $7 - ($3 * $6) shared-float>)) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 o_year, #2 shared-float amount) order by: {<-1, ASC> }, cost est: 6835500, output card: 1500
                #8: KeyedSortMergeJoin<Bit> ((P$2(7) == P$5(7)) AND (P$1(11) == P$4(11)) - not sort compatible, need sort in smj) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32(11) partsupp.ps_partkey, #2 shared-int32(7) partsupp.ps_suppkey, #3 shared-float partsupp.ps_supplycost, #4 shared-int32(11) lineitem.l_partkey, #5 shared-int32(7) lineitem.l_suppkey, #6 shared-float l_quantity, #7 shared-float volume, #8 shared-int32 o_year) order by: {<-1, ASC> , <2, ASC> , <5, ASC> , <1, ASC> , <4, ASC> }, cost est: 57618276, output card: 1500
                    #-1: Sort<Bit> ({<-1, ASC> , <2, ASC> , <2, ASC> , <1, ASC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32(11) partsupp.ps_partkey, #2 shared-int32(7) partsupp.ps_suppkey, #3 shared-float partsupp.ps_supplycost) order by: {<-1, ASC> , <2, ASC> , <2, ASC> , <1, ASC> }, cost est: 2795846, output card: 448
                        #3: Project<Bit> ((<0, P$1(200) shared-varchar>, <1, P$2(11) shared-int32>, <2, P$3(7) shared-int32>, <3, P$4(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32(11) partsupp.ps_partkey, #2 shared-int32(7) partsupp.ps_suppkey, #3 shared-float partsupp.ps_supplycost) order by: {<-1, ASC> , <2, ASC> }, cost est: 0, output card: 448
                            #2: KeyedSortMergeJoin<Bit> (P$0(7) == P$3(7) - sortCompatible) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(11) partsupp.ps_partkey, #3 shared-int32(7) partsupp.ps_suppkey, #4 shared-float partsupp.ps_supplycost) order by: {<-1, ASC> , <0, ASC> , <3, ASC> }, cost est: 7224173, output card: 448
                                #0: SecureSqlInput<Bit> ("SELECT s_suppkey, n_name FROM supplier JOIN nation ON s_nationkey = n_nationkey ORDER BY s_suppkey", tuple_count=100) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-varchar(25) nation.n_name) order by: {<0, ASC> }, cost est: 0, output card: 100
                                #1: SecureSqlInput<Bit> ("SELECT ps_partkey, ps_suppkey, ps_supplycost FROM partsupp JOIN part ON ps_partkey = p_partkey WHERE p_name LIKE '%yellow%' ORDER BY ps_suppkey, ps_partkey", tuple_count=448) : (#0 shared-int32(11) partsupp.ps_partkey, #1 shared-int32(7) partsupp.ps_suppkey, #2 shared-float partsupp.ps_supplycost) order by: {<1, ASC> , <0, ASC> }, cost est: 0, output card: 448
                    #-1: Sort<Bit> ({<-1, ASC> }) : (#0 shared-int32(11) lineitem.l_partkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float l_quantity, #3 shared-float volume, #4 shared-int32 o_year) order by: {<-1, ASC> }, cost est: 5438404, output card: 1500
                        #7: Project<Bit> ((<0, P$1(11) shared-int32>, <1, P$2(7) shared-int32>, <2, P$3(32) shared-float>, <3, P$4(32) shared-float>, <4, P$5(32) shared-int32>)) : (#0 shared-int32(11) lineitem.l_partkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float l_quantity, #3 shared-float volume, #4 shared-int32 o_year) order by: {<-1, ASC> }, cost est: 0, output card: 1500
                            #6: KeyedSortMergeJoin<Bit> (P$0(16) == P$6(16) - sortCompatible) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(11) lineitem.l_partkey, #2 shared-int32(7) lineitem.l_suppkey, #3 shared-float l_quantity, #4 shared-float volume, #5 shared-int32 o_year, #6 shared-int32(16) orders.o_orderkey) order by: {<-1, ASC> , <0, ASC> , <6, ASC> }, cost est: 47512121, output card: 1500
                                #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_partkey, l_suppkey, l_quantity::float4, l_extendedprice * (1.0 - l_discount) AS volume FROM lineitem ORDER BY l_orderkey, l_suppkey, l_partkey", tuple_count=1500) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(11) lineitem.l_partkey, #2 shared-int32(7) lineitem.l_suppkey, #3 shared-float l_quantity, #4 shared-float volume) order by: {<0, ASC> , <2, ASC> , <1, ASC> }, cost est: 0, output card: 1500
                                #5: SecureSqlInput<Bit> ("SELECT EXTRACT('year' FROM o_orderdate)::INT AS o_year, o_orderkey FROM orders ORDER BY o_orderkey", tuple_count=1500) : (#0 shared-int32 o_year, #1 shared-int32(16) orders.o_orderkey) order by: {<1, ASC> }, cost est: 0, output card: 1500

Total Plans : 128
Cost Optimized Plan : 
#11: Sort<Bit> ({<0, ASC> , <1, DESC> }) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 o_year, #2 shared-float sum_profit) order by: {<0, ASC> , <1, DESC> }, cost est: 1385772, output card: 175
    #10: SortMergeAggregate<Bit> (group-by: (0, 1) aggs: (SUM($2) sum_profit)) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32 o_year, #2 shared-float sum_profit) order by: {<0, ASC> , <1, ASC> }, cost est: 2325000, output card: 175
        #-1: Sort<Bit> ({<0, ASC> , <1, ASC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32 o_year, #2 shared-float anonymous) order by: {<0, ASC> , <1, ASC> }, cost est: 22987542, output card: 1500
            #9: Project<Bit> ((<0, P$0(200) shared-varchar>, <1, P$8(32) shared-int32>, <2, $7 - ($3 * $6) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32 o_year, #2 shared-float anonymous) order by: {<-1, ASC> }, cost est: 6835500, output card: 1500
                #8: KeyedSortMergeJoin<Bit> ((P$2(7) == P$5(7)) AND (P$1(11) == P$4(11)) - sortCompatible) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32(11) partsupp.ps_partkey, #2 shared-int32(7) partsupp.ps_suppkey, #3 shared-float partsupp.ps_supplycost, #4 shared-int32(11) lineitem.l_partkey, #5 shared-int32(7) lineitem.l_suppkey, #6 shared-float l_quantity, #7 shared-float volume, #8 shared-int32 o_year) order by: {<-1, ASC> , <2, ASC> , <5, ASC> , <1, ASC> , <4, ASC> }, cost est: 42243602, output card: 1500
                    #3: Project<Bit> ((<0, P$1(200) shared-varchar>, <1, P$2(11) shared-int32>, <2, P$3(7) shared-int32>, <3, P$4(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32(11) partsupp.ps_partkey, #2 shared-int32(7) partsupp.ps_suppkey, #3 shared-float partsupp.ps_supplycost) order by: {<2, ASC> , <1, ASC> }, cost est: 0, output card: 448
                        #2: KeyedJoin<Bit> (P$0(7) == P$3(7)) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(11) partsupp.ps_partkey, #3 shared-int32(7) partsupp.ps_suppkey, #4 shared-float partsupp.ps_supplycost) order by: {<3, ASC> , <2, ASC> }, cost est: 9766400, output card: 448
                            #0: SecureSqlInput<Bit> ("SELECT s_suppkey, n_name FROM supplier JOIN nation ON s_nationkey = n_nationkey ORDER BY s_suppkey", tuple_count=100) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-varchar(25) nation.n_name) order by: {}, cost est: 0, output card: 100
                            #1: SecureSqlInput<Bit> ("SELECT ps_partkey, ps_suppkey, ps_supplycost FROM partsupp JOIN part ON ps_partkey = p_partkey WHERE p_name LIKE '%yellow%' ORDER BY ps_suppkey, ps_partkey", tuple_count=448) : (#0 shared-int32(11) partsupp.ps_partkey, #1 shared-int32(7) partsupp.ps_suppkey, #2 shared-float partsupp.ps_supplycost) order by: {<1, ASC> , <0, ASC> }, cost est: 0, output card: 448
                    #-1: Sort<Bit> ({<1, ASC> , <0, ASC> }) : (#0 shared-int32(11) lineitem.l_partkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float l_quantity, #3 shared-float volume, #4 shared-int32 o_year) order by: {<1, ASC> , <0, ASC> }, cost est: 6352422, output card: 1500
                        #-1: Sort<Bit> ({}) : (#0 shared-int32(11) lineitem.l_partkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float l_quantity, #3 shared-float volume, #4 shared-int32 o_year) order by: {}, cost est: 5255601, output card: 1500
                            #7: Project<Bit> ((<0, P$1(11) shared-int32>, <1, P$2(7) shared-int32>, <2, P$3(32) shared-float>, <3, P$4(32) shared-float>, <4, P$5(32) shared-int32>)) : (#0 shared-int32(11) lineitem.l_partkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float l_quantity, #3 shared-float volume, #4 shared-int32 o_year) order by: {<-1, ASC> }, cost est: 0, output card: 1500
                                #6: KeyedSortMergeJoin<Bit> (P$0(16) == P$6(16) - sortCompatible) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(11) lineitem.l_partkey, #2 shared-int32(7) lineitem.l_suppkey, #3 shared-float l_quantity, #4 shared-float volume, #5 shared-int32 o_year, #6 shared-int32(16) orders.o_orderkey) order by: {<-1, ASC> , <0, ASC> , <6, ASC> }, cost est: 47512121, output card: 1500
                                    #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_partkey, l_suppkey, l_quantity::float4, l_extendedprice * (1.0 - l_discount) AS volume FROM lineitem ORDER BY l_orderkey, l_suppkey, l_partkey", tuple_count=1500) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(11) lineitem.l_partkey, #2 shared-int32(7) lineitem.l_suppkey, #3 shared-float l_quantity, #4 shared-float volume) order by: {<0, ASC> , <2, ASC> , <1, ASC> }, cost est: 0, output card: 1500
                                    #5: SecureSqlInput<Bit> ("SELECT EXTRACT('year' FROM o_orderdate)::INT AS o_year, o_orderkey FROM orders ORDER BY o_orderkey", tuple_count=1500) : (#0 shared-int32 o_year, #1 shared-int32(16) orders.o_orderkey) order by: {<1, ASC> }, cost est: 0, output card: 1500

Cost Optimization Time : 0.02647 sec
Operator #0 SecureSqlInput ran for 2.859000 ms, gate count: 0 output cardinality: 100, row width=208
Operator #1 SecureSqlInput ran for 3.162000 ms, gate count: 0 output cardinality: 448, row width=51
extension finished! takes 733.882ms to extend lpn
Operator #2 KeyedJoin ran for 6672.240000 ms, gate count: 9811200 output cardinality: 448, row width=258
Operator #3 Project ran for 8.835000 ms, gate count: 0 output cardinality: 448, row width=251
Operator #4 SecureSqlInput ran for 18.921000 ms, gate count: 0 output cardinality: 1500, row width=99
Operator #5 SecureSqlInput ran for 8.831000 ms, gate count: 0 output cardinality: 1500, row width=49
extension finished! takes 741.386ms to extend lpn
extension finished! takes 767.376ms to extend lpn
extension finished! takes 757.152ms to extend lpn
extension finished! takes 763.11ms to extend lpn
extension finished! takes 755.407ms to extend lpn
extension finished! takes 756.261ms to extend lpn
extension finished! takes 762.642ms to extend lpn
extension finished! takes 749.078ms to extend lpn
Operator #6 KeyedSortMergeJoin ran for 30620.956000 ms, gate count: 46864515 output cardinality: 1500, row width=147
Operator #7 Project ran for 11.295000 ms, gate count: 0 output cardinality: 1500, row width=115
extension finished! takes 730.407ms to extend lpn
Operator #-1 Sort ran for 4651.039000 ms, gate count: 5010090 output cardinality: 1500, row width=115
extension finished! takes 736.144ms to extend lpn
Operator #-1 Sort ran for 4404.525000 ms, gate count: 6926994 output cardinality: 1500, row width=115
extension finished! takes 769.698ms to extend lpn
extension finished! takes 762.227ms to extend lpn
extension finished! takes 756.196ms to extend lpn
extension finished! takes 753.645ms to extend lpn
extension finished! takes 744.694ms to extend lpn
extension finished! takes 758.04ms to extend lpn
extension finished! takes 768.401ms to extend lpn
extension finished! takes 778.292ms to extend lpn
extension finished! takes 785.325ms to extend lpn
extension finished! takes 776.741ms to extend lpn
Operator #8 KeyedSortMergeJoin ran for 39525.023000 ms, gate count: 107236868 output cardinality: 1500, row width=365
extension finished! takes 785.145ms to extend lpn
Operator #9 Project ran for 6094.915000 ms, gate count: 6835500 output cardinality: 1500, row width=265
extension finished! takes 748.168ms to extend lpn
extension finished! takes 751.455ms to extend lpn
extension finished! takes 737.659ms to extend lpn
extension finished! takes 768.195ms to extend lpn
extension finished! takes 761.249ms to extend lpn
extension finished! takes 758.75ms to extend lpn
extension finished! takes 744.262ms to extend lpn
Operator #-1 Sort ran for 26205.283000 ms, gate count: 31933878 output cardinality: 1500, row width=265
Operator #10 SortMergeAggregate ran for 1875.993000 ms, gate count: 2278512 output cardinality: 1500, row width=265
extension finished! takes 760.99ms to extend lpn
extension finished! takes 748.59ms to extend lpn
extension finished! takes 747.323ms to extend lpn
extension finished! takes 750.394ms to extend lpn
extension finished! takes 740.314ms to extend lpn
extension finished! takes 746.415ms to extend lpn
Operator #11 Sort ran for 24967.645000 ms, gate count: 31933878 output cardinality: 1500, row width=265
Runtime: 145.139 sec, CPU Time: 139.617 sec, CPU clock ticks: 1.39617e+08, CPU clock ticks per second: 1000000
End-to-end estimated gates: 1.44664e+08. observed gates: 180218636 gates, relative error (%)=19.7286
[Linux]Peak resident set size: 2059870208 bytes, current memory size: 1775726592 bytes.
Initial Memory: 2032340992 bytes, Peak Memory After Execution: 2059870208 bytes, Memory Usage: 27529216 bytes
Bandwidth: 2.38407e+08 Bps
party 3 send 34601978112 bytes to party 1
party 3 send 0 bytes to TP 
total AND gate: 180218636
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
[       OK ] GeneralizedComparisonTest.cost_optimized_tpch_q9 (146083 ms)
[ RUN      ] GeneralizedComparisonTest.cost_optimized_tpch_q18
Connecting to 127.0.0.1 on ports 7654, 65482 as 3
party 3 connected to TP
party 3 connected to GB
party 3 connected to TP
party 3 connected to GB
initializing cot
setup finished! takes 875.888ms to finish setup
Memory usage of backend setup: [Linux]Peak resident set size: 2059870208 bytes, current memory size: 1838751744 bytes.
2059870208
EMP mode: outsourced, storage mode: column store
Code version: 5520450e48d58739c9c30b64a3a3a0430a5aede3
GFlags: --flagfile=	--alice_db=tpch_alice_1500	--alice_host=127.0.0.1	--bob_db=tpch_bob_1500	--ctrl_port=65482	--cutoff=100	--filter=*	--party=3	--port=7654	--storage=column	--unioned_db=tpch_unioned_1500	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 2059870208 bytes, current memory size: 1838751744 bytes.
Original Tree : 
#11: Sort<Bit> ({<-1, ASC> , <4, DESC> , <3, ASC> }) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32(11) customer.c_custkey, #2 shared-int32(16) order_keys.o_orderkey, #3 shared-int64(28) orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float sum_qty) order by: {<-1, ASC> , <4, DESC> , <3, ASC> }, cost est: 495150, output card: 100
    #10: Project<Bit> ((<0, P$6(200) shared-varchar>, <1, P$5(11) shared-int32>, <2, P$0(16) shared-int32>, <3, P$3(28) shared-int64>, <4, P$2(32) shared-float>, <5, P$4(32) shared-float>)) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32(11) customer.c_custkey, #2 shared-int32(16) order_keys.o_orderkey, #3 shared-int64(28) orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float sum_qty) order by: {<-1, ASC> , <1, ASC> }, cost est: 0, output card: 1500
        #9: KeyedSortMergeJoin<Bit> (P$1(11) == P$5(11) - sortCompatible) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate, #4 shared-float sum_qty, #5 shared-int32(11) customer.c_custkey, #6 shared-varchar(25) customer.c_name) order by: {<-1, ASC> , <1, ASC> , <5, ASC> }, cost est: 75183353, output card: 1500
            #-1: Sort<Bit> ({<1, ASC> }) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate, #4 shared-float sum_qty) order by: {<1, ASC> }, cost est: 6123918, output card: 1500
                #7: Project<Bit> ((<0, P$0(16) shared-int32>, <1, P$3(11) shared-int32>, <2, P$4(32) shared-float>, <3, P$5(28) shared-int64>, <4, P$1(32) shared-float>)) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate, #4 shared-float sum_qty) order by: {<0, ASC> }, cost est: 0, output card: 1500
                    #6: MergeJoin<Bit> (no-op) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-float sum_qty, #2 shared-int32(16) orders.o_orderkey, #3 shared-int32(11) orders.o_custkey, #4 shared-float orders.o_totalprice, #5 shared-int64(28) orders.o_orderdate) order by: {<0, ASC> }, cost est: 4500, output card: 1500
                        #4: Filter<Bit> (P$1(32) > SECRET FLOAT) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 319500, output card: 1500
                            #3: Project<Bit> ((<0, P$0(16) shared-int32>, <1, $1 + $3 shared-float>)) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 1479000, output card: 1500
                                #2: MergeJoin<Bit> (no-op) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-float sum_qty, #2 shared-int32(16) order_keys.o_orderkey, #3 shared-float sum_qty) order by: {<0, ASC> }, cost est: 4500, output card: 1500
                                    #0: SecureSqlInput<Bit> ("WITH all_keys AS (SELECT o_orderkey  FROM order_keys), sum_qtys AS (SELECT l_orderkey, sum(l_quantity) as sum_qty, false AS dummy_tag FROM lineitem GROUP BY l_orderkey ORDER BY l_orderkey) SELECT o_orderkey, COALESCE(sum_qty, 0.0) sum_qty, COALESCE(dummy_tag, true) dummy_tag FROM all_keys LEFT JOIN sum_qtys ON l_orderkey = o_orderkey ORDER BY o_orderkey ", tuple_count=1500) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 0, output card: 1500
                                    #1: SecureSqlInput<Bit> ("WITH all_keys AS (SELECT o_orderkey  FROM order_keys), sum_qtys AS (SELECT l_orderkey, sum(l_quantity) as sum_qty, false AS dummy_tag FROM lineitem GROUP BY l_orderkey ORDER BY l_orderkey) SELECT o_orderkey, COALESCE(sum_qty, 0.0) sum_qty, COALESCE(dummy_tag, true) dummy_tag FROM all_keys LEFT JOIN sum_qtys ON l_orderkey = o_orderkey ORDER BY o_orderkey ", tuple_count=0) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 0, output card: 0
                        #5: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_totalprice, o_orderdate, false dummy_tag FROM orders ORDER BY o_orderkey", tuple_count=1500) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate) order by: {<0, ASC> }, cost est: 0, output card: 1500
            #8: SecureSqlInput<Bit> ("SELECT c_custkey, c_name FROM customer ORDER BY c_custkey", tuple_count=1500) : (#0 shared-int32(11) customer.c_custkey, #1 shared-varchar(25) customer.c_name) order by: {<0, ASC> }, cost est: 0, output card: 1500

Total Plans : 4
Cost Optimized Plan : 
#11: Sort<Bit> ({<-1, ASC> , <4, DESC> , <3, ASC> }) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32(11) customer.c_custkey, #2 shared-int32(16) order_keys.o_orderkey, #3 shared-int64(28) orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float sum_qty) order by: {<-1, ASC> , <4, DESC> , <3, ASC> }, cost est: 495150, output card: 100
    #10: Project<Bit> ((<0, P$6(200) shared-varchar>, <1, P$5(11) shared-int32>, <2, P$0(16) shared-int32>, <3, P$3(28) shared-int64>, <4, P$2(32) shared-float>, <5, P$4(32) shared-float>)) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32(11) customer.c_custkey, #2 shared-int32(16) order_keys.o_orderkey, #3 shared-int64(28) orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float sum_qty) order by: {<-1, ASC> , <1, ASC> }, cost est: 0, output card: 1500
        #9: KeyedSortMergeJoin<Bit> (P$1(11) == P$5(11) - sortCompatible) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate, #4 shared-float sum_qty, #5 shared-int32(11) customer.c_custkey, #6 shared-varchar(25) customer.c_name) order by: {<-1, ASC> , <1, ASC> , <5, ASC> }, cost est: 75183353, output card: 1500
            #-1: Sort<Bit> ({<1, ASC> }) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate, #4 shared-float sum_qty) order by: {<1, ASC> }, cost est: 6123918, output card: 1500
                #7: Project<Bit> ((<0, P$0(16) shared-int32>, <1, P$3(11) shared-int32>, <2, P$4(32) shared-float>, <3, P$5(28) shared-int64>, <4, P$1(32) shared-float>)) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate, #4 shared-float sum_qty) order by: {<0, ASC> }, cost est: 0, output card: 1500
                    #6: MergeJoin<Bit> (no-op) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-float sum_qty, #2 shared-int32(16) orders.o_orderkey, #3 shared-int32(11) orders.o_custkey, #4 shared-float orders.o_totalprice, #5 shared-int64(28) orders.o_orderdate) order by: {<0, ASC> }, cost est: 4500, output card: 1500
                        #4: Filter<Bit> (P$1(32) > SECRET FLOAT) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 319500, output card: 1500
                            #3: Project<Bit> ((<0, P$0(16) shared-int32>, <1, $1 + $3 shared-float>)) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-float anonymous) order by: {<0, ASC> }, cost est: 1479000, output card: 1500
                                #2: MergeJoin<Bit> (no-op) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-float sum_qty, #2 shared-int32(16) order_keys.o_orderkey, #3 shared-float sum_qty) order by: {<0, ASC> }, cost est: 4500, output card: 1500
                                    #0: SecureSqlInput<Bit> ("WITH all_keys AS (SELECT o_orderkey  FROM order_keys), sum_qtys AS (SELECT l_orderkey, sum(l_quantity) as sum_qty, false AS dummy_tag FROM lineitem GROUP BY l_orderkey ORDER BY l_orderkey) SELECT o_orderkey, COALESCE(sum_qty, 0.0) sum_qty, COALESCE(dummy_tag, true) dummy_tag FROM all_keys LEFT JOIN sum_qtys ON l_orderkey = o_orderkey ORDER BY o_orderkey ", tuple_count=1500) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 0, output card: 1500
                                    #1: SecureSqlInput<Bit> ("WITH all_keys AS (SELECT o_orderkey  FROM order_keys), sum_qtys AS (SELECT l_orderkey, sum(l_quantity) as sum_qty, false AS dummy_tag FROM lineitem GROUP BY l_orderkey ORDER BY l_orderkey) SELECT o_orderkey, COALESCE(sum_qty, 0.0) sum_qty, COALESCE(dummy_tag, true) dummy_tag FROM all_keys LEFT JOIN sum_qtys ON l_orderkey = o_orderkey ORDER BY o_orderkey ", tuple_count=0) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 0, output card: 0
                        #5: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_totalprice, o_orderdate, false dummy_tag FROM orders ORDER BY o_orderkey", tuple_count=1500) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate) order by: {<0, ASC> }, cost est: 0, output card: 1500
            #8: SecureSqlInput<Bit> ("SELECT c_custkey, c_name FROM customer ORDER BY c_custkey", tuple_count=1500) : (#0 shared-int32(11) customer.c_custkey, #1 shared-varchar(25) customer.c_name) order by: {<0, ASC> }, cost est: 0, output card: 1500

Cost Optimization Time : 0.001076 sec
Operator #0 SecureSqlInput ran for 9.058000 ms, gate count: 0 output cardinality: 1500, row width=49
Operator #1 SecureSqlInput ran for 0.011000 ms, gate count: 0 output cardinality: 0, row width=49
Operator #2 MergeJoin ran for 9.844000 ms, gate count: 0 output cardinality: 1500, row width=97
Operator #3 Project ran for 1755.685000 ms, gate count: 1479000 output cardinality: 1500, row width=49
Operator #4 Filter ran for 171.833000 ms, gate count: 321000 output cardinality: 1500, row width=49
Operator #5 SecureSqlInput ran for 16.135000 ms, gate count: 0 output cardinality: 1500, row width=88
Operator #6 MergeJoin ran for 18.337000 ms, gate count: 3000 output cardinality: 1500, row width=136
Operator #7 Project ran for 13.279000 ms, gate count: 0 output cardinality: 1500, row width=120
extension finished! takes 733.316ms to extend lpn
party 3 send 942640512 bytes to party 1
party 3 send 0 bytes to TP 
total AND gate: 4909587
total pack call: 0
total unpack call: 0
total packed wire: 0
total unpacked wire: 0
Buffer pool requests: 0 hit rate: 0/0: -nan, pack calls: 0 unpack calls: 0 pinned pages: 0


