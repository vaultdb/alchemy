connected
Parsing query plan from /home/vaultdb/vaultdb-core-emp-operators/src/main/cpp/conf/plans/sort_opt_experiment/sandbox/baseline-q9.json
Running plan: #11: Sort<Bit> ({<0, ASC> , <1, DESC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32 o_year, #2 shared-float sum_profit) order by: {<0, ASC> , <1, DESC> }, cost est: 682897856, output card: 24000
    #10: SortMergeAggregate<Bit> (group-by: (0, 1) aggs: (SUM($2) sum_profit)) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32 o_year, #2 shared-float sum_profit) order by: {<0, ASC> , <1, ASC> }, cost est: 37200000, output card: 24000
        #-1: Sort<Bit> ({<0, ASC> , <1, ASC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32 o_year, #2 shared-float amount) order by: {<0, ASC> , <1, ASC> }, cost est: 682897856, output card: 24000
            #9: Project<Bit> ((<0, P$0(200) shared-varchar>, <1, P$6(32) shared-int32>, <2, ($3 * (SECRET FLOAT - $4)) - ($1 * $5) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32 o_year, #2 shared-float amount) order by: {<-1, ASC> }, cost est: 437472000, output card: 24000
                #8: KeyedSortMergeJoin<Bit> ($2 == $7 - not sort compatible, need sort in smj) : (#0 shared-varchar(25) nation.n_name, #1 shared-float partsupp.ps_supplycost, #2 shared-int32 lineitem.l_orderkey, #3 shared-float lineitem.l_extendedprice, #4 shared-float lineitem.l_discount, #5 shared-float l_quantity, #6 shared-int32 o_year, #7 shared-int32 orders.o_orderkey) order by: {<-1, ASC> , <2, ASC> , <7, ASC> }, cost est: 2099983728, output card: 24000
                    #6: Project<Bit> ((<0, P$0(200) shared-varchar>, <1, P$3(32) shared-float>, <2, P$4(32) shared-int32>, <3, P$8(32) shared-float>, <4, P$9(32) shared-float>, <5, P$7(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float partsupp.ps_supplycost, #2 shared-int32 lineitem.l_orderkey, #3 shared-float lineitem.l_extendedprice, #4 shared-float lineitem.l_discount, #5 shared-float l_quantity) order by: {<-1, ASC> }, cost est: 0, output card: 24000
                        #5: KeyedSortMergeJoin<Bit> (($2 == $6) AND ($1 == $5) - not sort compatible, need sort in smj) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32 partsupp.ps_partkey, #2 shared-int32 partsupp.ps_suppkey, #3 shared-float partsupp.ps_supplycost, #4 shared-int32 lineitem.l_orderkey, #5 shared-int32 lineitem.l_partkey, #6 shared-int32 lineitem.l_suppkey, #7 shared-float l_quantity, #8 shared-float lineitem.l_extendedprice, #9 shared-float lineitem.l_discount) order by: {<-1, ASC> , <2, ASC> , <6, ASC> , <1, ASC> , <5, ASC> }, cost est: 1383466448, output card: 24000
                            #3: Project<Bit> ((<0, P$1(200) shared-varchar>, <1, P$2(32) shared-int32>, <2, P$3(32) shared-int32>, <3, P$4(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32 partsupp.ps_partkey, #2 shared-int32 partsupp.ps_suppkey, #3 shared-float partsupp.ps_supplycost) order by: {<-1, ASC> , <2, ASC> }, cost est: 0, output card: 188
                                #2: KeyedSortMergeJoin<Bit> ($0 == $3 - not sort compatible, need sort in smj) : (#0 shared-int32 supplier.s_suppkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32 partsupp.ps_partkey, #3 shared-int32 partsupp.ps_suppkey, #4 shared-float partsupp.ps_supplycost) order by: {<-1, ASC> , <0, ASC> , <3, ASC> }, cost est: 3586818, output card: 188
                                    #0: SecureSqlInput<Bit> ("SELECT s_suppkey, n_name FROM supplier JOIN nation ON s_nationkey = n_nationkey", tuple_count=40) : (#0 shared-int32 supplier.s_suppkey, #1 shared-varchar(25) nation.n_name) order by: {}, cost est: 0, output card: 40
                                    #1: SecureSqlInput<Bit> ("SELECT ps_partkey, ps_suppkey, ps_supplycost FROM partsupp JOIN part ON ps_partkey = p_partkey WHERE p_name LIKE '%yellow%'", tuple_count=188) : (#0 shared-int32 partsupp.ps_partkey, #1 shared-int32 partsupp.ps_suppkey, #2 shared-float partsupp.ps_supplycost) order by: {<1, ASC> , <0, ASC> }, cost est: 118570, output card: 188
                            #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_partkey, l_suppkey, l_quantity::float4, l_extendedprice, l_discount FROM lineitem", tuple_count=24000) : (#0 shared-int32 lineitem.l_orderkey, #1 shared-int32 lineitem.l_partkey, #2 shared-int32 lineitem.l_suppkey, #3 shared-float l_quantity, #4 shared-float lineitem.l_extendedprice, #5 shared-float lineitem.l_discount) order by: {}, cost est: 0, output card: 24000
                    #7: SecureSqlInput<Bit> ("SELECT EXTRACT('year' FROM o_orderdate)::INT AS o_year, o_orderkey FROM orders", tuple_count=6000) : (#0 shared-int32 o_year, #1 shared-int32 orders.o_orderkey) order by: {}, cost est: 0, output card: 6000

Operator #0 SecureSqlInput ran for 1.113000 ms, gate count: 0 output cardinality: 40, row width=233
Operator #1 SecureSqlInput ran for 48.735000 ms, gate count: 110160 output cardinality: 188, row width=97
Operator #2 KeyedSortMergeJoin ran for 1018.359000 ms, gate count: 3825756 output cardinality: 188, row width=329
Operator #3 Project ran for 0.255000 ms, gate count: 0 output cardinality: 188, row width=297
Operator #4 SecureSqlInput ran for 487.579000 ms, gate count: 0 output cardinality: 24000, row width=193
Operator #5 KeyedSortMergeJoin ran for 482762.583000 ms, gate count: 1711394156 output cardinality: 24000, row width=489
Operator #6 Project ran for 106.587000 ms, gate count: 0 output cardinality: 24000, row width=361
Operator #7 SecureSqlInput ran for 21.086000 ms, gate count: 0 output cardinality: 6000, row width=65
Operator #8 KeyedSortMergeJoin ran for 665420.471000 ms, gate count: 4064523980 output cardinality: 24000, row width=425
Operator #9 Project ran for 61944.558000 ms, gate count: 218736000 output cardinality: 24000, row width=265
Operator #-1 Sort ran for 188378.302000 ms, gate count: 651160896 output cardinality: 24000, row width=265
Operator #10 SortMergeAggregate ran for 10494.289000 ms, gate count: 36478512 output cardinality: 24000, row width=265
Operator #11 Sort ran for 190059.870000 ms, gate count: 652648896 output cardinality: 24000, row width=265
Query execution time: 1600.83s
