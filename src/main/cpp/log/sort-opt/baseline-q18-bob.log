connected
Parsing query plan from /home/vaultdb/vaultdb-core-emp-operators/src/main/cpp/conf/plans/sort_opt_experiment/sandbox/baseline-q18.json
Running plan: #14: Sort<Bit> ({<-1, ASC> , <4, DESC> , <3, ASC> }) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32 customer.c_custkey, #2 shared-int32 orders.o_orderkey, #3 shared-int64 orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float sum_qty) order by: {<-1, ASC> , <4, DESC> , <3, ASC> }, cost est: 633538, output card: 100
    #13: SortMergeAggregate<Bit> (group-by: (0, 1, 2, 3, 4) aggs: (SUM($5) sum_qty)) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32 customer.c_custkey, #2 shared-int32 orders.o_orderkey, #3 shared-int64 orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float sum_qty) order by: {<0, ASC> , <1, ASC> , <2, ASC> , <3, ASC> , <4, ASC> }, cost est: 43344000, output card: 24000
        #-1: Sort<Bit> ({<0, ASC> , <1, ASC> , <2, ASC> , <3, ASC> , <4, ASC> }) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32 customer.c_custkey, #2 shared-int32 orders.o_orderkey, #3 shared-int64 orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float lineitem.l_quantity) order by: {<0, ASC> , <1, ASC> , <2, ASC> , <3, ASC> , <4, ASC> }, cost est: 1042675072, output card: 24000
            #12: Project<Bit> ((<0, P$0(200) shared-varchar>, <1, P$1(32) shared-int32>, <2, P$2(32) shared-int32>, <3, P$3(64) shared-int64>, <4, P$4(32) shared-float>, <5, P$6(32) shared-float>)) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32 customer.c_custkey, #2 shared-int32 orders.o_orderkey, #3 shared-int64 orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float lineitem.l_quantity) order by: {<-1, ASC> , <2, ASC> }, cost est: 0, output card: 24000
                #11: KeyedSortMergeJoin<Bit> ($2 == $5 - not sort compatible, need sort in smj) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32 customer.c_custkey, #2 shared-int32 orders.o_orderkey, #3 shared-int64 orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-int32 lineitem.l_orderkey, #6 shared-float lineitem.l_quantity) order by: {<-1, ASC> , <2, ASC> , <5, ASC> }, cost est: 4332969088, output card: 24000
                    #9: Project<Bit> ((<0, P$1(200) shared-varchar>, <1, P$2(32) shared-int32>, <2, P$3(32) shared-int32>, <3, P$4(64) shared-int64>, <4, P$5(32) shared-float>)) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32 customer.c_custkey, #2 shared-int32 orders.o_orderkey, #3 shared-int64 orders.o_orderdate, #4 shared-float orders.o_totalprice) order by: {<-1, ASC> , <2, ASC> }, cost est: 0, output card: 24000
                        #8: KeyedSortMergeJoin<Bit> ($0 == $3 - not sort compatible, need sort in smj) : (#0 shared-int32 lineitem.l_orderkey, #1 shared-varchar(25) customer.c_name, #2 shared-int32 customer.c_custkey, #3 shared-int32 orders.o_orderkey, #4 shared-int64 orders.o_orderdate, #5 shared-float orders.o_totalprice) order by: {<-1, ASC> , <0, ASC> , <3, ASC> }, cost est: 2099983728, output card: 24000
                            #3: Project<Bit> ((<0, P$0(32) shared-int32>)) : (#0 shared-int32 lineitem.l_orderkey) order by: {<0, ASC> }, cost est: 0, output card: 24000
                                #2: Filter<Bit> (P$1(32) > SECRET FLOAT) : (#0 shared-int32 lineitem.l_orderkey, #1 shared-float null) order by: {<0, ASC> }, cost est: 5112000, output card: 24000
                                    #1: SortMergeAggregate<Bit> (group-by: (0) aggs: (SUM($1) null)) : (#0 shared-int32 lineitem.l_orderkey, #1 shared-float null) order by: {<0, ASC> }, cost est: 27600000, output card: 24000
                                        #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32 lineitem.l_orderkey, #1 shared-float lineitem.l_quantity) order by: {<0, ASC> }, cost est: 135764992, output card: 24000
                                            #0: SecureSqlInput<Bit> ("SELECT l_orderkey, l_quantity FROM lineitem", tuple_count=24000) : (#0 shared-int32 lineitem.l_orderkey, #1 shared-float lineitem.l_quantity) order by: {}, cost est: 0, output card: 24000
                            #7: Project<Bit> ((<0, P$5(200) shared-varchar>, <1, P$4(32) shared-int32>, <2, P$0(32) shared-int32>, <3, P$3(64) shared-int64>, <4, P$2(32) shared-float>)) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32 customer.c_custkey, #2 shared-int32 orders.o_orderkey, #3 shared-int64 orders.o_orderdate, #4 shared-float orders.o_totalprice) order by: {<-1, ASC> , <1, ASC> }, cost est: 0, output card: 6000
                                #6: KeyedSortMergeJoin<Bit> ($1 == $4 - not sort compatible, need sort in smj) : (#0 shared-int32 orders.o_orderkey, #1 shared-int32 orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64 orders.o_orderdate, #4 shared-int32 customer.c_custkey, #5 shared-varchar(25) customer.c_name) order by: {<-1, ASC> , <1, ASC> , <4, ASC> }, cost est: 233713046, output card: 6000
                                    #4: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_totalprice, o_orderdate FROM orders", tuple_count=6000) : (#0 shared-int32 orders.o_orderkey, #1 shared-int32 orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64 orders.o_orderdate) order by: {}, cost est: 0, output card: 6000
                                    #5: SecureSqlInput<Bit> ("SELECT c_custkey, c_name FROM customer", tuple_count=600) : (#0 shared-int32 customer.c_custkey, #1 shared-varchar(25) customer.c_name) order by: {}, cost est: 0, output card: 600
                    #10: SecureSqlInput<Bit> ("SELECT L2.l_orderkey, L2.l_quantity FROM lineitem L2", tuple_count=24000) : (#0 shared-int32 lineitem.l_orderkey, #1 shared-float lineitem.l_quantity) order by: {}, cost est: 0, output card: 24000

Operator #0 SecureSqlInput ran for 190.872000 ms, gate count: 0 output cardinality: 24000, row width=65
Operator #-1 Sort ran for 35232.973000 ms, gate count: 128140096 output cardinality: 24000, row width=65
Operator #1 SortMergeAggregate ran for 7322.247000 ms, gate count: 26854916 output cardinality: 24000, row width=65
Operator #2 Filter ran for 1401.812000 ms, gate count: 5136000 output cardinality: 24000, row width=65
Operator #3 Project ran for 10.417000 ms, gate count: 0 output cardinality: 24000, row width=33
Operator #4 SecureSqlInput ran for 106.665000 ms, gate count: 0 output cardinality: 6000, row width=161
Operator #5 SecureSqlInput ran for 28.025000 ms, gate count: 0 output cardinality: 600, row width=233
Operator #6 KeyedSortMergeJoin ran for 75892.872000 ms, gate count: 429457156 output cardinality: 6000, row width=393
Operator #7 Project ran for 17.185000 ms, gate count: 0 output cardinality: 6000, row width=361
Operator #8 KeyedSortMergeJoin ran for 657080.711000 ms, gate count: 2782586980 output cardinality: 24000, row width=393
Operator #9 Project ran for 109.441000 ms, gate count: 0 output cardinality: 24000, row width=361
Operator #10 SecureSqlInput ran for 136.349000 ms, gate count: 0 output cardinality: 24000, row width=65
Operator #11 KeyedSortMergeJoin ran for 1073675.498000 ms, gate count: 6624290836 output cardinality: 24000, row width=425
Operator #12 Project ran for 116.567000 ms, gate count: 0 output cardinality: 24000, row width=393
Operator #-1 Sort ran for 277815.322000 ms, gate count: 988918208 output cardinality: 24000, row width=393
Operator #13 SortMergeAggregate ran for 13416.084000 ms, gate count: 47014076 output cardinality: 24000, row width=393
Operator #14 Sort ran for 178699.255000 ms, gate count: 646339584 output cardinality: 100, row width=393
Query execution time: 2321.33s
