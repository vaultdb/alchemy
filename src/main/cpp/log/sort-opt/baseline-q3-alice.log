connected
Parsing query plan from /home/vaultdb/vaultdb-core-emp-operators/src/main/cpp/conf/plans/sort_opt_experiment/sandbox/baseline-q3.json
Running plan: #9: Project<Bit> ((<0, P$0(32) shared-int32>, <1, P$3(32) shared-float>, <2, P$1(64) shared-int64>, <3, P$2(32) shared-int32>)) : (#0 shared-int32 lineitem.l_orderkey, #1 shared-float revenue, #2 shared-int64 orders.o_orderdate, #3 shared-int32 orders.o_shippriority) order by: {<-1, ASC> , <1, DESC> , <2, ASC> }, cost est: 0, output card: 10
    #8: Sort<Bit> ({<-1, ASC> , <3, DESC> , <1, ASC> }) : (#0 shared-int32 lineitem.l_orderkey, #1 shared-int64 orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<-1, ASC> , <3, DESC> , <1, ASC> }, cost est: 9583, output card: 10
        #7: SortMergeAggregate<Bit> (group-by: (0, 1, 2) aggs: (SUM($3) revenue)) : (#0 shared-int32 lineitem.l_orderkey, #1 shared-int64 orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<0, ASC> , <1, ASC> , <2, ASC> }, cost est: 32208000, output card: 24000
            #-1: Sort<Bit> ({<0, ASC> , <1, ASC> , <2, ASC> }) : (#0 shared-int32 lineitem.l_orderkey, #1 shared-int64 orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<0, ASC> , <1, ASC> , <2, ASC> }, cost est: 404579648, output card: 24000
                #6: Project<Bit> ((<0, P$3(32) shared-int32>, <1, P$1(64) shared-int64>, <2, P$2(32) shared-int32>, <3, P$4(32) shared-float>)) : (#0 shared-int32 lineitem.l_orderkey, #1 shared-int64 orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<-1, ASC> , <0, ASC> }, cost est: 0, output card: 24000
                    #5: KeyedSortMergeJoin<Bit> ($0 == $3 - not sort compatible, need sort in smj) : (#0 shared-int32 orders.o_orderkey, #1 shared-int64 orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-int32 lineitem.l_orderkey, #4 shared-float revenue) order by: {<-1, ASC> , <0, ASC> , <3, ASC> }, cost est: 993053040, output card: 24000
                        #3: Project<Bit> ((<0, P$0(32) shared-int32>, <1, P$2(64) shared-int64>, <2, P$3(32) shared-int32>)) : (#0 shared-int32 orders.o_orderkey, #1 shared-int64 orders.o_orderdate, #2 shared-int32 orders.o_shippriority) order by: {<-1, ASC> }, cost est: 0, output card: 6000
                            #2: KeyedSortMergeJoin<Bit> ($1 == $4 - not sort compatible, need sort in smj) : (#0 shared-int32 orders.o_orderkey, #1 shared-int32 orders.o_custkey, #2 shared-int64 orders.o_orderdate, #3 shared-int32 orders.o_shippriority, #4 shared-int32 customer.c_custkey) order by: {<-1, ASC> , <1, ASC> , <4, ASC> }, cost est: 179175648, output card: 6000
                                #0: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_orderdate, o_shippriority, NOT o_orderdate < DATE '1995-03-25' AS dummy_tag FROM orders", tuple_count=6000) : (#0 shared-int32 orders.o_orderkey, #1 shared-int32 orders.o_custkey, #2 shared-int64 orders.o_orderdate, #3 shared-int32 orders.o_shippriority) order by: {}, cost est: 0, output card: 6000
                                #1: SecureSqlInput<Bit> ("SELECT c_custkey, NOT c_mktsegment = 'HOUSEHOLD' AS dummy_tag FROM customer", tuple_count=600) : (#0 shared-int32 customer.c_custkey) order by: {}, cost est: 0, output card: 600
                        #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_extendedprice * (1 - l_discount) AS revenue, NOT l_shipdate > DATE '1995-03-25' AS dummy_tag FROM lineitem", tuple_count=24000) : (#0 shared-int32 lineitem.l_orderkey, #1 shared-float revenue) order by: {}, cost est: 0, output card: 24000

Operator #0 SecureSqlInput ran for 131.173000 ms, gate count: 0 output cardinality: 6000, row width=161
Operator #1 SecureSqlInput ran for 4.096000 ms, gate count: 0 output cardinality: 600, row width=33
Operator #2 KeyedSortMergeJoin ran for 55066.343000 ms, gate count: 200253812 output cardinality: 6000, row width=193
Operator #3 Project ran for 5.692000 ms, gate count: 0 output cardinality: 6000, row width=129
Operator #4 SecureSqlInput ran for 374.753000 ms, gate count: 0 output cardinality: 24000, row width=65
Operator #5 KeyedSortMergeJoin ran for 286590.420000 ms, gate count: 1228971268 output cardinality: 24000, row width=193
Operator #6 Project ran for 30.389000 ms, gate count: 0 output cardinality: 24000, row width=161
Operator #-1 Sort ran for 110567.097000 ms, gate count: 379190080 output cardinality: 24000, row width=161
Operator #7 SortMergeAggregate ran for 8887.136000 ms, gate count: 31510720 output cardinality: 24000, row width=161
Operator #8 Sort ran for 99353.136000 ms, gate count: 342987520 output cardinality: 10, row width=161
Operator #9 Project ran for 0.030000 ms, gate count: 0 output cardinality: 10, row width=161
Query execution time: 561.037s
