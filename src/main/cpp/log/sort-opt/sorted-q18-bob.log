connected
Parsing query plan from /home/vaultdb/vaultdb-core-emp-operators/src/main/cpp/conf/plans/sort_opt_experiment/sandbox/sorted-q18.json
Running plan: #16: Sort<Bit> ({<-1, ASC> , <4, DESC> , <3, ASC> }) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32 customer.c_custkey, #2 shared-int32 orders.o_orderkey, #3 shared-int64 orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float sum_qty) order by: {<-1, ASC> , <4, DESC> , <3, ASC> }, cost est: 633538, output card: 100
    #15: SortMergeAggregate<Bit> (group-by: (0, 1, 2, 3, 4) aggs: (SUM($5) sum_qty)) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32 customer.c_custkey, #2 shared-int32 orders.o_orderkey, #3 shared-int64 orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float sum_qty) order by: {<0, ASC> , <1, ASC> , <2, ASC> , <3, ASC> , <4, INVALID> }, cost est: 43344000, output card: 24000
        #14: Project<Bit> ((<0, P$0(200) shared-varchar>, <1, P$1(32) shared-int32>, <2, P$2(32) shared-int32>, <3, P$3(64) shared-int64>, <4, P$4(32) shared-float>, <5, P$6(32) shared-float>)) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32 customer.c_custkey, #2 shared-int32 orders.o_orderkey, #3 shared-int64 orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float lineitem.l_quantity) order by: {<-1, ASC> , <2, ASC> }, cost est: 0, output card: 24000
            #13: KeyedSortMergeJoin<Bit> ($2 == $5 - sortCompatible) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32 customer.c_custkey, #2 shared-int32 orders.o_orderkey, #3 shared-int64 orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-int32 lineitem.l_orderkey, #6 shared-float lineitem.l_quantity) order by: {<-1, ASC> , <2, ASC> , <5, ASC> }, cost est: 3200689152, output card: 24000
                #11: Sort<Bit> ({<2, ASC> }) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32 customer.c_custkey, #2 shared-int32 orders.o_orderkey, #3 shared-int64 orders.o_orderdate, #4 shared-float orders.o_totalprice) order by: {<2, ASC> }, cost est: 537629376, output card: 24000
                    #10: Project<Bit> ((<0, P$1(200) shared-varchar>, <1, P$2(32) shared-int32>, <2, P$3(32) shared-int32>, <3, P$4(64) shared-int64>, <4, P$5(32) shared-float>)) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32 customer.c_custkey, #2 shared-int32 orders.o_orderkey, #3 shared-int64 orders.o_orderdate, #4 shared-float orders.o_totalprice) order by: {<-1, ASC> , <2, ASC> }, cost est: 0, output card: 24000
                        #9: KeyedSortMergeJoin<Bit> ($0 == $3 - sortCompatible) : (#0 shared-int32 lineitem.l_orderkey, #1 shared-varchar(25) customer.c_name, #2 shared-int32 customer.c_custkey, #3 shared-int32 orders.o_orderkey, #4 shared-int64 orders.o_orderdate, #5 shared-float orders.o_totalprice) order by: {<-1, ASC> , <0, ASC> , <3, ASC> }, cost est: 1456253536, output card: 24000
                            #3: Project<Bit> ((<0, P$0(32) shared-int32>)) : (#0 shared-int32 lineitem.l_orderkey) order by: {<0, ASC> }, cost est: 0, output card: 24000
                                #2: Filter<Bit> (P$1(32) > SECRET FLOAT) : (#0 shared-int32 lineitem.l_orderkey, #1 shared-float null) order by: {<0, ASC> }, cost est: 5112000, output card: 24000
                                    #1: SortMergeAggregate<Bit> (group-by: (0) aggs: (SUM($1) null)) : (#0 shared-int32 lineitem.l_orderkey, #1 shared-float null) order by: {<0, ASC> }, cost est: 27600000, output card: 24000
                                        #0: SecureSqlInput<Bit> ("SELECT l_orderkey, l_quantity FROM lineitem ORDER BY l_orderkey", tuple_count=24000) : (#0 shared-int32 lineitem.l_orderkey, #1 shared-float lineitem.l_quantity) order by: {<0, ASC> }, cost est: 17460800, output card: 24000
                            #8: Sort<Bit> ({<2, ASC> }) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32 customer.c_custkey, #2 shared-int32 orders.o_orderkey, #3 shared-int64 orders.o_orderdate, #4 shared-float orders.o_totalprice) order by: {<2, ASC> }, cost est: 101022760, output card: 6000
                                #7: Project<Bit> ((<0, P$5(200) shared-varchar>, <1, P$4(32) shared-int32>, <2, P$0(32) shared-int32>, <3, P$3(64) shared-int64>, <4, P$2(32) shared-float>)) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32 customer.c_custkey, #2 shared-int32 orders.o_orderkey, #3 shared-int64 orders.o_orderdate, #4 shared-float orders.o_totalprice) order by: {<-1, ASC> , <1, ASC> }, cost est: 0, output card: 6000
                                    #6: KeyedSortMergeJoin<Bit> ($1 == $4 - sortCompatible) : (#0 shared-int32 orders.o_orderkey, #1 shared-int32 orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64 orders.o_orderdate, #4 shared-int32 customer.c_custkey, #5 shared-varchar(25) customer.c_name) order by: {<-1, ASC> , <1, ASC> , <4, ASC> }, cost est: 163728649, output card: 6000
                                        #4: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_totalprice, o_orderdate FROM orders ORDER BY o_custkey", tuple_count=6000) : (#0 shared-int32 orders.o_orderkey, #1 shared-int32 orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64 orders.o_orderdate) order by: {<1, ASC> }, cost est: 7379792, output card: 6000
                                        #5: SecureSqlInput<Bit> ("SELECT c_custkey, c_name FROM customer ORDER BY c_custkey", tuple_count=600) : (#0 shared-int32 customer.c_custkey, #1 shared-varchar(25) customer.c_name) order by: {<0, ASC> }, cost est: 741824, output card: 600
                #12: SecureSqlInput<Bit> ("SELECT L2.l_orderkey, L2.l_quantity FROM lineitem L2 ORDER BY L2.l_orderkey", tuple_count=24000) : (#0 shared-int32 lineitem.l_orderkey, #1 shared-float lineitem.l_quantity) order by: {<0, ASC> }, cost est: 17460800, output card: 24000

Operator #0 SecureSqlInput ran for 5162.483000 ms, gate count: 16721152 output cardinality: 24000, row width=65
Operator #1 SortMergeAggregate ran for 7309.707000 ms, gate count: 26854916 output cardinality: 24000, row width=65
Operator #2 Filter ran for 1417.740000 ms, gate count: 5136000 output cardinality: 24000, row width=65
Operator #3 Project ran for 6.050000 ms, gate count: 0 output cardinality: 24000, row width=33
Operator #4 SecureSqlInput ran for 2293.927000 ms, gate count: 7111264 output cardinality: 6000, row width=161
Operator #5 SecureSqlInput ran for 226.825000 ms, gate count: 707560 output cardinality: 600, row width=233
Operator #6 KeyedSortMergeJoin ran for 57088.880000 ms, gate count: 260068192 output cardinality: 6000, row width=393
Operator #7 Project ran for 17.161000 ms, gate count: 0 output cardinality: 6000, row width=361
Operator #8 Sort ran for 27458.035000 ms, gate count: 96362944 output cardinality: 6000, row width=361
Operator #9 KeyedSortMergeJoin ran for 487821.746000 ms, gate count: 2089963664 output cardinality: 24000, row width=393
Operator #10 Project ran for 147.336000 ms, gate count: 0 output cardinality: 24000, row width=361
Operator #11 Sort ran for 143202.297000 ms, gate count: 515175488 output cardinality: 24000, row width=361
Operator #12 SecureSqlInput ran for 4998.243000 ms, gate count: 16721152 output cardinality: 24000, row width=65
Operator #13 KeyedSortMergeJoin ran for 775421.243000 ms, gate count: 5386141312 output cardinality: 24000, row width=425
Operator #14 Project ran for 115.629000 ms, gate count: 0 output cardinality: 24000, row width=393
Operator #15 SortMergeAggregate ran for 13291.426000 ms, gate count: 47014076 output cardinality: 24000, row width=393
Operator #16 Sort ran for 179730.391000 ms, gate count: 646339584 output cardinality: 100, row width=393
Query execution time: 1705.76s
