Starting tests on Thu Oct 24 21:03:40 UTC 2024
Running *.card_bound_tpch_q1...
Note: Google Test filter = *.card_bound_tpch_q1
[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from CostOptimizedTest
[ RUN      ] CostOptimizedTest.card_bound_tpch_q1
Connecting to 126.137.1.10 on ports 7654, 65482 as 2
connected
EMP mode: sh2pc, storage mode: column store
Code version: 0bfea0350f47ede98a64050e75230ef84e54e428
GFlags: --flagfile=	--alice_db=tpch_alice_1500	--alice_host=126.137.1.10	--bob_db=tpch_bob_1500	--ctrl_port=65483	--cutoff=100	--filter=*.card_bound_tpch_q1	--party=2	--port=7655	--storage=column	--unioned_db=tpch_unioned_1500	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 16515072 bytes, current memory size: 16515072 bytes.
Original Tree : 
#3: Project<Bit> ((<0, P$0(8) shared-varchar>, <1, P$1(8) shared-varchar>, <2, $2 + $15 shared-float>, <3, $3 + $16 shared-float>, <4, $4 + $17 shared-float>, <5, $5 + $18 shared-float>, <6, ($6 + $19) / ($7 + $20) shared-float>, <7, ($8 + $21) / ($9 + $22) shared-float>, <8, ($10 + $23) / ($11 + $24) shared-float>, <9, $12 + $25 shared-int64>)) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty, #7 shared-float avg_price, #8 shared-float avg_disc, #9 shared-int64 count_order) order by: {<0, ASC> , <1, ASC> }, cost est: 163596, output card: 6
    #2: MergeJoin<Bit> (no-op) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty_sum, #7 shared-float avg_qty_cnt, #8 shared-float avg_price_sum, #9 shared-float avg_price_cnt, #10 shared-float avg_discount_sum, #11 shared-float avg_discount_cnt, #12 shared-int64 cnt, #13 shared-varchar(1) l_returnflag, #14 shared-varchar(1) l_linestatus, #15 shared-float sum_qty, #16 shared-float sum_base_price, #17 shared-float sum_disc_price, #18 shared-float sum_charge, #19 shared-float avg_qty_sum, #20 shared-float avg_qty_cnt, #21 shared-float avg_price_sum, #22 shared-float avg_price_cnt, #23 shared-float avg_discount_sum, #24 shared-float avg_discount_cnt, #25 shared-int64 cnt) order by: {<0, ASC> , <1, ASC> }, cost est: 18, output card: 6
        #0: SecureSqlInput<Bit> ("WITH output_domain AS (
    SELECT  *
    FROM (VALUES('R'::char(1), 'F'::char(1)), ('A', 'F'), ('N', 'F'), ('R', 'O'), ('A', 'O'), ('N', 'O')) AS li(l_returnflag, l_linestatus)
    ORDER BY l_returnflag, l_linestatus),
     partial_aggs AS (
         SELECT l_returnflag, l_linestatus, SUM(l_quantity) sum_qty, SUM(l_extendedprice) sum_base_price,
                SUM(l_extendedprice*(1-l_discount)) sum_disc_price, SUM(l_extendedprice*(1-l_discount)*(1+l_tax)) sum_charge,
                SUM(l_quantity) avg_qty_sum, COUNT(l_quantity)::FLOAT4 avg_qty_cnt,
                 SUM(l_extendedprice) avg_price_sum, COUNT(l_extendedprice)::FLOAT4 avg_price_cnt,
                 SUM(l_discount) avg_discount_sum, COUNT(l_discount)::FLOAT4 avg_discount_cnt, COUNT(*) cnt
         FROM lineitem
         WHERE l_shipdate  <= date '1998-08-03'
         GROUP BY l_returnflag, l_linestatus
         ORDER BY l_returnflag, l_linestatus)
SELECT o.l_returnflag, o.l_linestatus, COALESCE(sum_qty, 0) sum_qty, COALESCE(sum_base_price, 0) sum_base_price, COALESCE(sum_disc_price, 0) sum_disc_price, COALESCE(sum_charge, 0) sum_charge, COALESCE(avg_qty_sum, 0) avg_qty_sum, COALESCE(avg_qty_cnt, 0) avg_qty_cnt,  COALESCE(avg_price_sum, 0) avg_price_sum, COALESCE(avg_price_cnt, 0) avg_price_cnt,  COALESCE(avg_discount_sum, 0) avg_discount_sum, COALESCE(avg_discount_cnt, 0) avg_discount_cnt,  COALESCE(cnt, 0)::BIGINT cnt, CASE WHEN p.l_returnflag IS NULL THEN true ELSE false END AS dummy_tag
FROM output_domain o LEFT JOIN partial_aggs p ON o.l_returnflag = p.l_returnflag AND o.l_linestatus = p.l_linestatus
ORDER BY o.l_returnflag, o.l_linestatus", tuple_count=6) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty_sum, #7 shared-float avg_qty_cnt, #8 shared-float avg_price_sum, #9 shared-float avg_price_cnt, #10 shared-float avg_discount_sum, #11 shared-float avg_discount_cnt, #12 shared-int64 cnt) order by: {<0, ASC> , <1, ASC> }, cost est: 0, output card: 6
        #1: SecureSqlInput<Bit> ("WITH output_domain AS (
    SELECT  *
    FROM (VALUES('R'::char(1), 'F'::char(1)), ('A', 'F'), ('N', 'F'), ('R', 'O'), ('A', 'O'), ('N', 'O')) AS li(l_returnflag, l_linestatus)
    ORDER BY l_returnflag, l_linestatus),
     partial_aggs AS (
         SELECT l_returnflag, l_linestatus, SUM(l_quantity) sum_qty, SUM(l_extendedprice) sum_base_price,
                SUM(l_extendedprice*(1-l_discount)) sum_disc_price, SUM(l_extendedprice*(1-l_discount)*(1+l_tax)) sum_charge,
                SUM(l_quantity) avg_qty_sum, COUNT(l_quantity)::FLOAT4 avg_qty_cnt,
                 SUM(l_extendedprice) avg_price_sum, COUNT(l_extendedprice)::FLOAT4 avg_price_cnt,
                 SUM(l_discount) avg_discount_sum, COUNT(l_discount)::FLOAT4 avg_discount_cnt, COUNT(*) cnt
         FROM lineitem
         WHERE l_shipdate  <= date '1998-08-03'
         GROUP BY l_returnflag, l_linestatus
         ORDER BY l_returnflag, l_linestatus)
SELECT o.l_returnflag, o.l_linestatus, COALESCE(sum_qty, 0) sum_qty, COALESCE(sum_base_price, 0) sum_base_price, COALESCE(sum_disc_price, 0) sum_disc_price, COALESCE(sum_charge, 0) sum_charge, COALESCE(avg_qty_sum, 0) avg_qty_sum, COALESCE(avg_qty_cnt, 0) avg_qty_cnt,  COALESCE(avg_price_sum, 0) avg_price_sum, COALESCE(avg_price_cnt, 0) avg_price_cnt,  COALESCE(avg_discount_sum, 0) avg_discount_sum, COALESCE(avg_discount_cnt, 0) avg_discount_cnt,  COALESCE(cnt, 0)::BIGINT cnt, CASE WHEN p.l_returnflag IS NULL THEN true ELSE false END AS dummy_tag
FROM output_domain o LEFT JOIN partial_aggs p ON o.l_returnflag = p.l_returnflag AND o.l_linestatus = p.l_linestatus
ORDER BY o.l_returnflag, o.l_linestatus", tuple_count=6) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty_sum, #7 shared-float avg_qty_cnt, #8 shared-float avg_price_sum, #9 shared-float avg_price_cnt, #10 shared-float avg_discount_sum, #11 shared-float avg_discount_cnt, #12 shared-int64 cnt) order by: {<0, ASC> , <1, ASC> }, cost est: 0, output card: 6

Operator #0 SecureSqlInput ran for 0.305000 ms, gate count: 0 output cardinality: 6, row width=401
Operator #1 SecureSqlInput ran for 0.272000 ms, gate count: 0 output cardinality: 6, row width=401
Operator #2 MergeJoin ran for 2.339000 ms, gate count: 12 output cardinality: 6, row width=801
Operator #3 Project ran for 8.224000 ms, gate count: 128100 output cardinality: 6, row width=305
Runtime: 0.297955 sec, CPU Time: 0.011529 sec, CPU clock ticks: 11529, CPU clock ticks per second: 1000000
End-to-end estimated gates: 163614. observed gates: 128112 gates, relative error (%)=27.7117
[Linux]Peak resident set size: 18087936 bytes, current memory size: 18059264 bytes.
Initial Memory: 16515072 bytes, Peak Memory After Execution: 18087936 bytes, Memory Usage: 1572864 bytes
Bandwidth: 8450.94 Bps
[       OK ] CostOptimizedTest.card_bound_tpch_q1 (430 ms)
[----------] 1 test from CostOptimizedTest (430 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (430 ms total)
[  PASSED  ] 1 test.
Finished *.card_bound_tpch_q1.
---------------------------------
Running *.card_bound_tpch_q3...
Note: Google Test filter = *.card_bound_tpch_q3
[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from CostOptimizedTest
[ RUN      ] CostOptimizedTest.card_bound_tpch_q3
Connecting to 126.137.1.10 on ports 7654, 65482 as 2
connected
EMP mode: sh2pc, storage mode: column store
Code version: 0bfea0350f47ede98a64050e75230ef84e54e428
GFlags: --flagfile=	--alice_db=tpch_alice_1500	--alice_host=126.137.1.10	--bob_db=tpch_bob_1500	--ctrl_port=65483	--cutoff=100	--filter=*.card_bound_tpch_q3	--party=2	--port=7655	--storage=column	--unioned_db=tpch_unioned_1500	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 17039360 bytes, current memory size: 17039360 bytes.
Original Tree : 
#9: Project<Bit> ((<0, P$0(16) shared-int32>, <1, P$3(32) shared-float>, <2, P$1(28) shared-int64>, <3, P$2(1) shared-int32>)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-float revenue, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32(1) orders.o_shippriority) order by: {<-1, ASC> , <1, DESC> , <2, ASC> }, cost est: 0, output card: 10
    #8: Sort<Bit> ({<-1, ASC> , <3, DESC> , <1, ASC> }) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority, #3 shared-float revenue) order by: {<-1, ASC> , <3, DESC> , <1, ASC> }, cost est: 5312, output card: 10
        #7: SortMergeAggregate<Bit> (group-by: (0, 1, 2) aggs: (SUM($3) revenue)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority, #3 shared-float revenue) order by: {<0, ASC> }, cost est: 71126850, output card: 60175
            #-1: Sort<Bit> ({<0, ASC> , <1, ASC> , <2, ASC> }) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority, #3 shared-float revenue) order by: {<0, ASC> , <1, ASC> , <2, ASC> }, cost est: 532092576, output card: 60175
                #6: Project<Bit> ((<0, P$0(16) shared-int32>, <1, P$1(28) shared-int64>, <2, P$2(1) shared-int32>, <3, P$4(32) shared-float>)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority, #3 shared-float revenue) order by: {}, cost est: 0, output card: 60175
                    #5: KeyedJoin<Bit> (P$0(16) == P$3(16)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority, #3 shared-int32(16) lineitem.l_orderkey, #4 shared-float revenue) order by: {}, cost est: 58670625000, output card: 60175
                        #3: Project<Bit> ((<0, P$0(16) shared-int32>, <1, P$2(28) shared-int64>, <2, P$3(1) shared-int32>)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority) order by: {}, cost est: 0, output card: 15000
                            #2: KeyedJoin<Bit> (P$1(11) == P$4(11)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32(1) orders.o_shippriority, #4 shared-int32(11) customer.c_custkey) order by: {}, cost est: 585000000, output card: 15000
                                #0: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_orderdate, o_shippriority, NOT o_orderdate < DATE '1995-03-25' AS dummy_tag FROM orders ORDER BY o_orderkey, o_orderdate, o_shippriority", tuple_count=15000) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32(1) orders.o_shippriority) order by: {}, cost est: 0, output card: 15000
                                #1: SecureSqlInput<Bit> ("SELECT c_custkey, NOT c_mktsegment = 'HOUSEHOLD' AS dummy_tag FROM customer ORDER BY c_custkey", tuple_count=1500) : (#0 shared-int32(11) customer.c_custkey) order by: {}, cost est: 0, output card: 1500
                        #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_extendedprice * (1 - l_discount) AS revenue, NOT l_shipdate > DATE '1995-03-25' AS dummy_tag FROM lineitem ORDER BY l_orderkey", tuple_count=60175) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-float revenue) order by: {}, cost est: 0, output card: 60175

Operator #0 SecureSqlInput ran for 48.807000 ms, gate count: 0 output cardinality: 15000, row width=57
Operator #1 SecureSqlInput ran for 3.063000 ms, gate count: 0 output cardinality: 1500, row width=12
Operator #2 KeyedJoin ran for 52751.743000 ms, gate count: 607500000 output cardinality: 15000, row width=68
Operator #3 Project ran for 8.097000 ms, gate count: 0 output cardinality: 15000, row width=46
Operator #4 SecureSqlInput ran for 148.699000 ms, gate count: 0 output cardinality: 60175, row width=49
Operator #5 KeyedJoin ran for 4262134.657000 ms, gate count: 59573250000 output cardinality: 60175, row width=94
Operator #6 Project ran for 45.304000 ms, gate count: 0 output cardinality: 60175, row width=78
Operator #-1 Sort ran for 44334.352000 ms, gate count: 488372760 output cardinality: 60175, row width=78
Operator #7 SortMergeAggregate ran for 4160.385000 ms, gate count: 69380656 output cardinality: 60175, row width=78
Operator #8 Sort ran for 50166.410000 ms, gate count: 562909140 output cardinality: 10, row width=78
Operator #9 Project ran for 0.021000 ms, gate count: 0 output cardinality: 10, row width=78
Runtime: 4413.96 sec, CPU Time: 3698.57 sec, CPU clock ticks: 3.69857e+09, CPU clock ticks per second: 1000000
End-to-end estimated gates: 5.98588e+10. observed gates: 61301412556 gates, relative error (%)=2.35323
[Linux]Peak resident set size: 422125568 bytes, current memory size: 20422656 bytes.
Initial Memory: 17039360 bytes, Peak Memory After Execution: 422125568 bytes, Memory Usage: 405086208 bytes
Bandwidth: 6943.23 Bps
[       OK ] CostOptimizedTest.card_bound_tpch_q3 (4414046 ms)
[----------] 1 test from CostOptimizedTest (4414046 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (4414046 ms total)
[  PASSED  ] 1 test.
Finished *.card_bound_tpch_q3.
---------------------------------
Running *.card_bound_tpch_q5...
Note: Google Test filter = *.card_bound_tpch_q5
[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from CostOptimizedTest
[ RUN      ] CostOptimizedTest.card_bound_tpch_q5
Connecting to 126.137.1.10 on ports 7654, 65482 as 2
connected
EMP mode: sh2pc, storage mode: column store
Code version: 0bfea0350f47ede98a64050e75230ef84e54e428
GFlags: --flagfile=	--alice_db=tpch_alice_1500	--alice_host=126.137.1.10	--bob_db=tpch_bob_1500	--ctrl_port=65483	--cutoff=100	--filter=*.card_bound_tpch_q5	--party=2	--port=7655	--storage=column	--unioned_db=tpch_unioned_1500	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 16777216 bytes, current memory size: 16777216 bytes.
Original Tree : 
#11: Sort<Bit> ({<1, DESC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<1, DESC> }, cost est: 2583, output card: 5
    #10: SortMergeAggregate<Bit> (group-by: (0) aggs: (SUM($1) revenue)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 89420050, output card: 5
        #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 1757517824, output card: 60175
            #9: Project<Bit> ((<0, P$5(200) shared-varchar>, <1, P$1(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {}, cost est: 0, output card: 60175
                #8: KeyedJoin<Bit> ((P$0(5) == P$4(5)) AND (P$2(11) == P$3(11))) : (#0 shared-int32(5) supplier.c_nationkey, #1 shared-float revenue, #2 shared-int32(11) orders.o_custkey, #3 shared-int32(11) customer.c_custkey, #4 shared-int32(5) customer.c_nationkey, #5 shared-varchar(25) nation.n_name) order by: {}, cost est: 4091900000, output card: 60175
                    #6: Project<Bit> ((<0, P$0(5) shared-int32>, <1, P$2(32) shared-float>, <2, P$4(11) shared-int32>)) : (#0 shared-int32(5) supplier.c_nationkey, #1 shared-float revenue, #2 shared-int32(11) orders.o_custkey) order by: {}, cost est: 0, output card: 60175
                        #5: KeyedJoin<Bit> (P$1(16) == P$3(16)) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(16) lineitem.l_orderkey, #2 shared-float revenue, #3 shared-int32(16) orders.o_orderkey, #4 shared-int32(11) orders.o_custkey) order by: {}, cost est: 42423375000, output card: 60175
                            #3: Project<Bit> ((<0, P$1(5) shared-int32>, <1, P$2(16) shared-int32>, <2, P$4(32) shared-float>)) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(16) lineitem.l_orderkey, #2 shared-float revenue) order by: {}, cost est: 0, output card: 60175
                                #2: KeyedJoin<Bit> (P$0(7) == P$3(7)) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey, #2 shared-int32(16) lineitem.l_orderkey, #3 shared-int32(7) lineitem.l_suppkey, #4 shared-float revenue) order by: {}, cost est: 27680500, output card: 60175
                                    #0: SecureSqlInput<Bit> ("SELECT s_suppkey, s_nationkey FROM supplier JOIN nation ON s_nationkey = n_nationkey JOIN region ON n_regionkey = r_regionkey WHERE r_name = 'EUROPE' ORDER BY s_suppkey", tuple_count=20) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey) order by: {}, cost est: 0, output card: 20
                                    #1: SecureSqlInput<Bit> ("SELECT l_orderkey, l_suppkey, l_extendedprice * (1 - l_discount) AS revenue FROM lineitem ORDER BY l_orderkey", tuple_count=60175) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float revenue) order by: {}, cost est: 0, output card: 60175
                            #4: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, NOT (o_orderdate >= DATE '1993-01-01' AND o_orderdate < DATE '1994-01-01') AS dummy_tag FROM orders ORDER BY o_orderkey, o_custkey, o_orderdate", tuple_count=15000) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey) order by: {}, cost est: 0, output card: 15000
                    #7: SecureSqlInput<Bit> ("SELECT t2.c_custkey, t2.c_nationkey, t1.n_name FROM (SELECT r_regionkey, r_name FROM region WHERE r_name = 'EUROPE') AS t0 INNER JOIN (SELECT n_nationkey, n_name, n_regionkey FROM nation) AS t1 ON t0.r_regionkey = t1.n_regionkey INNER JOIN (SELECT c_custkey, c_nationkey FROM customer) AS t2 ON t1.n_nationkey = t2.c_nationkey ORDER BY t2.c_custkey ASC", tuple_count=272) : (#0 shared-int32(11) customer.c_custkey, #1 shared-int32(5) customer.c_nationkey, #2 shared-varchar(25) nation.n_name) order by: {}, cost est: 0, output card: 272

Operator #0 SecureSqlInput ran for 0.153000 ms, gate count: 0 output cardinality: 20, row width=13
Operator #1 SecureSqlInput ran for 189.962000 ms, gate count: 0 output cardinality: 60175, row width=56
Operator #2 KeyedJoin ran for 2561.409000 ms, gate count: 28884000 output cardinality: 60175, row width=68
Operator #3 Project ran for 36.453000 ms, gate count: 0 output cardinality: 60175, row width=54
Operator #4 SecureSqlInput ran for 19.028000 ms, gate count: 0 output cardinality: 15000, row width=28
Operator #5 KeyedJoin ran for 3337803.406000 ms, gate count: 43326000000 output cardinality: 60175, row width=81
Operator #6 Project ran for 14.594000 ms, gate count: 0 output cardinality: 60175, row width=49
Operator #7 SecureSqlInput ran for 2.881000 ms, gate count: 0 output cardinality: 272, row width=217
Operator #8 KeyedJoin ran for 246074.659000 ms, gate count: 3911856400 output cardinality: 60175, row width=265
Operator #9 Project ran for 229.555000 ms, gate count: 0 output cardinality: 60175, row width=233
Operator #-1 Sort ran for 141823.562000 ms, gate count: 1709304660 output cardinality: 60175, row width=233
Operator #10 SortMergeAggregate ran for 7231.635000 ms, gate count: 87553204 output cardinality: 60175, row width=233
Operator #11 Sort ran for 77176.084000 ms, gate count: 1055220388 output cardinality: 60175, row width=233
Runtime: 3813.36 sec, CPU Time: 3164.49 sec, CPU clock ticks: 3.16449e+09, CPU clock ticks per second: 1000000
End-to-end estimated gates: 4.83899e+10. observed gates: 50118818652 gates, relative error (%)=3.44965
[Linux]Peak resident set size: 1190920192 bytes, current memory size: 329011200 bytes.
Initial Memory: 16777216 bytes, Peak Memory After Execution: 1190920192 bytes, Memory Usage: 1174142976 bytes
Bandwidth: 8399.94 Bps
[       OK ] CostOptimizedTest.card_bound_tpch_q5 (3813454 ms)
[----------] 1 test from CostOptimizedTest (3813454 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (3813454 ms total)
[  PASSED  ] 1 test.
Finished *.card_bound_tpch_q5.
---------------------------------
Running *.card_bound_tpch_q8...
Note: Google Test filter = *.card_bound_tpch_q8
[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from CostOptimizedTest
[ RUN      ] CostOptimizedTest.card_bound_tpch_q8
Connecting to 126.137.1.10 on ports 7654, 65482 as 2
connected
EMP mode: sh2pc, storage mode: column store
Code version: 0bfea0350f47ede98a64050e75230ef84e54e428
GFlags: --flagfile=	--alice_db=tpch_alice_1500	--alice_host=126.137.1.10	--bob_db=tpch_bob_1500	--ctrl_port=65483	--cutoff=100	--filter=*.card_bound_tpch_q8	--party=2	--port=7655	--storage=column	--unioned_db=tpch_unioned_1500	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 16646144 bytes, current memory size: 16646144 bytes.
Original Tree : 
#12: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32 orders.o_year, #1 shared-float mkt_share) order by: {<0, ASC> }, cost est: 100, output card: 2
    #11: Project<Bit> ((<0, P$0(32) shared-int32>, <1, $2 / $1 shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float mkt_share) order by: {<0, ASC> }, cost est: 7618, output card: 2
        #10: SortMergeAggregate<Bit> (group-by: (0) aggs: (SUM($1) null, SUM($2) null)) : (#0 shared-int32 orders.o_year, #1 shared-float null, #2 shared-float null) order by: {<0, ASC> }, cost est: 138402500, output card: 2
            #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32 orders.o_year, #1 shared-float volume, #2 shared-float selected_volume) order by: {<0, ASC> }, cost est: 532092576, output card: 60175
                #9: Project<Bit> ((<0, P$0(32) shared-int32>, <1, P$2(32) shared-float>, <2, CASE($4, $2, SECRET FLOAT) shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float volume, #2 shared-float selected_volume) order by: {}, cost est: 0, output card: 60175
                    #8: KeyedJoin<Bit> (P$1(7) == P$3(7)) : (#0 shared-int32 orders.o_year, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float volume, #3 shared-int32(7) supplier.s_suppkey, #4 shared-bool nation_check) order by: {}, cost est: 114332500, output card: 60175
                        #6: Project<Bit> ((<0, P$1(32) shared-int32>, <1, P$3(7) shared-int32>, <2, P$4(32) shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float volume) order by: {}, cost est: 0, output card: 60175
                            #5: KeyedJoin<Bit> (P$0(16) == P$2(16)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32 orders.o_year, #2 shared-int32(16) lineitem.l_orderkey, #3 shared-int32(7) lineitem.l_suppkey, #4 shared-float volume) order by: {}, cost est: 61378500000, output card: 60175
                                #3: Project<Bit> ((<0, P$1(16) shared-int32>, <1, P$3(32) shared-int32>)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32 orders.o_year) order by: {}, cost est: 0, output card: 15000
                                    #2: KeyedJoin<Bit> (P$0(11) == P$2(11)) : (#0 shared-int32(11) customer.c_custkey, #1 shared-int32(16) orders.o_orderkey, #2 shared-int32(11) orders.o_custkey, #3 shared-int32 orders.o_year) order by: {}, cost est: 117780000, output card: 15000
                                        #0: SecureSqlInput<Bit> ("SELECT c_custkey FROM customer c JOIN nation n1 ON c_nationkey = n_nationkey JOIN region ON r_regionkey = n_regionkey WHERE r_name = 'AFRICA' ORDER BY c_custkey", tuple_count=302) : (#0 shared-int32(11) customer.c_custkey) order by: {}, cost est: 0, output card: 302
                                        #1: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_orderyear::INT AS o_year, NOT (o_orderdate >= date '1995-01-01' and o_orderdate < date '1996-12-31') dummy_tag FROM orders ORDER BY o_year, o_orderkey", tuple_count=15000) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-int32 orders.o_year) order by: {}, cost est: 0, output card: 15000
                                #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_suppkey, l_extendedprice * (1.0 - l_discount) AS volume,        CASE            WHEN p_type = 'LARGE ANODIZED STEEL' AND p_partkey = l_partkey THEN FALSE            ELSE TRUE            END AS dummy_tag FROM lineitem LEFT JOIN part ON p_partkey = l_partkey ORDER BY l_orderkey", tuple_count=60175) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float volume) order by: {}, cost est: 0, output card: 60175
                        #7: SecureSqlInput<Bit> ("SELECT s_suppkey, CASE WHEN n_name = 'KENYA' THEN true ELSE false END AS nation_check FROM supplier JOIN nation ON n_nationkey = s_nationkey ORDER BY s_suppkey", tuple_count=100) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-bool nation_check) order by: {}, cost est: 0, output card: 100

Operator #0 SecureSqlInput ran for 0.285000 ms, gate count: 0 output cardinality: 302, row width=12
Operator #1 SecureSqlInput ran for 43.273000 ms, gate count: 0 output cardinality: 15000, row width=60
Operator #2 KeyedJoin ran for 10599.037000 ms, gate count: 122310000 output cardinality: 15000, row width=71
Operator #3 Project ran for 9.296000 ms, gate count: 0 output cardinality: 15000, row width=49
Operator #4 SecureSqlInput ran for 169.181000 ms, gate count: 0 output cardinality: 60175, row width=56
Operator #5 KeyedJoin ran for 4480426.288000 ms, gate count: 62281125000 output cardinality: 60175, row width=104
Operator #6 Project ran for 35.004000 ms, gate count: 0 output cardinality: 60175, row width=72
Operator #7 SecureSqlInput ran for 0.171000 ms, gate count: 0 output cardinality: 100, row width=9
Operator #8 KeyedJoin ran for 12341.175000 ms, gate count: 120350000 output cardinality: 60175, row width=80
Operator #9 Project ran for 390.156000 ms, gate count: 1925600 output cardinality: 60175, row width=97
Operator #-1 Sort ran for 46865.457000 ms, gate count: 512003700 output cardinality: 60175, row width=97
Operator #10 SortMergeAggregate ran for 10406.686000 ms, gate count: 130517472 output cardinality: 60175, row width=97
Operator #11 Project ran for 16953.937000 ms, gate count: 229206576 output cardinality: 60175, row width=65
Operator #12 Sort ran for 36614.736000 ms, gate count: 385972020 output cardinality: 60175, row width=65
Runtime: 4615.04 sec, CPU Time: 3715.18 sec, CPU clock ticks: 3.71518e+09, CPU clock ticks per second: 1000000
End-to-end estimated gates: 6.22811e+10. observed gates: 63783410368 gates, relative error (%)=2.35531
[Linux]Peak resident set size: 445550592 bytes, current memory size: 150130688 bytes.
Initial Memory: 16646144 bytes, Peak Memory After Execution: 445550592 bytes, Memory Usage: 428904448 bytes
Bandwidth: 7484.03 Bps
[       OK ] CostOptimizedTest.card_bound_tpch_q8 (4615134 ms)
[----------] 1 test from CostOptimizedTest (4615134 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (4615134 ms total)
[  PASSED  ] 1 test.
Finished *.card_bound_tpch_q8.
---------------------------------
Running *.card_bound_tpch_q9...
Note: Google Test filter = *.card_bound_tpch_q9
[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from CostOptimizedTest
[ RUN      ] CostOptimizedTest.card_bound_tpch_q9
Connecting to 126.137.1.10 on ports 7654, 65482 as 2
connected
EMP mode: sh2pc, storage mode: column store
Code version: 0bfea0350f47ede98a64050e75230ef84e54e428
GFlags: --flagfile=	--alice_db=tpch_alice_1500	--alice_host=126.137.1.10	--bob_db=tpch_bob_1500	--ctrl_port=65483	--cutoff=100	--filter=*.card_bound_tpch_q9	--party=2	--port=7655	--storage=column	--unioned_db=tpch_unioned_1500	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 16646144 bytes, current memory size: 16646144 bytes.
Original Tree : 
#11: Sort<Bit> ({<0, ASC> , <1, DESC> }) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 amount, #2 shared-float sum_profit) order by: {<0, ASC> , <1, DESC> }, cost est: 1385772, output card: 175
    #10: SortMergeAggregate<Bit> (group-by: (0, 1) aggs: (SUM($2) sum_profit)) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 amount, #2 shared-float sum_profit) order by: {<0, ASC> , <1, DESC> }, cost est: 93271250, output card: 175
        #-1: Sort<Bit> ({<0, ASC> , <1, ASC> }) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 amount, #2 shared-float o_year) order by: {<0, ASC> , <1, ASC> }, cost est: 2027595136, output card: 60175
            #9: Project<Bit> ((<0, P$0(200) shared-varchar>, <1, P$3(32) shared-int32>, <2, P$2(32) shared-float>)) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 amount, #2 shared-float o_year) order by: {}, cost est: 0, output card: 60175
                #8: KeyedJoin<Bit> (P$1(16) == P$4(16)) : (#0 shared-varchar(25) nation.nation, #1 shared-int32(16) lineitem.l_orderkey, #2 shared-float amount, #3 shared-int32 o_year, #4 shared-int32(16) orders.o_orderkey) order by: {}, cost est: 61378500000, output card: 60175
                    #6: Project<Bit> ((<0, P$0(200) shared-varchar>, <1, P$4(16) shared-int32>, <2, $8 - ($3 * $7) shared-float>)) : (#0 shared-varchar(25) nation.nation, #1 shared-int32(16) lineitem.l_orderkey, #2 shared-float amount) order by: {}, cost est: 274217475, output card: 60175
                        #5: KeyedJoin<Bit> ((P$2(7) == P$6(7)) AND (P$1(11) == P$5(11))) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32(11) partsupp.ps_partkey, #2 shared-int32(7) partsupp.ps_suppkey, #3 shared-float partsupp.ps_supplycost, #4 shared-int32(16) lineitem.l_orderkey, #5 shared-int32(11) lineitem.l_partkey, #6 shared-int32(7) lineitem.l_suppkey, #7 shared-float l_quantity, #8 shared-float volume) order by: {}, cost est: 7817936000, output card: 60175
                            #3: Project<Bit> ((<0, P$1(200) shared-varchar>, <1, P$2(11) shared-int32>, <2, P$3(7) shared-int32>, <3, P$4(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32(11) partsupp.ps_partkey, #2 shared-int32(7) partsupp.ps_suppkey, #3 shared-float partsupp.ps_supplycost) order by: {}, cost est: 0, output card: 448
                                #2: KeyedJoin<Bit> (P$0(7) == P$3(7)) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(11) partsupp.ps_partkey, #3 shared-int32(7) partsupp.ps_suppkey, #4 shared-float partsupp.ps_supplycost) order by: {}, cost est: 9766400, output card: 448
                                    #0: SecureSqlInput<Bit> ("SELECT s_suppkey, n_name FROM supplier JOIN nation ON s_nationkey = n_nationkey ORDER BY n_name, s_suppkey", tuple_count=100) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-varchar(25) nation.n_name) order by: {}, cost est: 0, output card: 100
                                    #1: SecureSqlInput<Bit> ("SELECT ps_partkey, ps_suppkey, ps_supplycost FROM partsupp JOIN part ON ps_partkey = p_partkey WHERE p_name LIKE '%yellow%' ORDER BY ps_suppkey, ps_partkey", tuple_count=448) : (#0 shared-int32(11) partsupp.ps_partkey, #1 shared-int32(7) partsupp.ps_suppkey, #2 shared-float partsupp.ps_supplycost) order by: {}, cost est: 0, output card: 448
                            #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_partkey, l_suppkey, l_quantity::float4, l_extendedprice * (1.0 - l_discount) AS volume FROM lineitem ORDER BY l_orderkey, l_partkey, l_suppkey", tuple_count=60175) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(11) lineitem.l_partkey, #2 shared-int32(7) lineitem.l_suppkey, #3 shared-float l_quantity, #4 shared-float volume) order by: {}, cost est: 0, output card: 60175
                    #7: SecureSqlInput<Bit> ("SELECT EXTRACT('year' FROM o_orderdate)::INT AS o_year, o_orderkey FROM orders ORDER BY o_orderkey", tuple_count=15000) : (#0 shared-int32 o_year, #1 shared-int32(16) orders.o_orderkey) order by: {}, cost est: 0, output card: 15000

Operator #0 SecureSqlInput ran for 1.050000 ms, gate count: 0 output cardinality: 100, row width=208
Operator #1 SecureSqlInput ran for 1.686000 ms, gate count: 0 output cardinality: 448, row width=51
Operator #2 KeyedJoin ran for 721.176000 ms, gate count: 9811200 output cardinality: 448, row width=258
Operator #3 Project ran for 1.057000 ms, gate count: 0 output cardinality: 448, row width=251
Operator #4 SecureSqlInput ran for 334.083000 ms, gate count: 0 output cardinality: 60175, row width=99
Operator #5 KeyedJoin ran for 555739.024000 ms, gate count: 7413560000 output cardinality: 60175, row width=349
Operator #6 Project ran for 21996.289000 ms, gate count: 274217476 output cardinality: 60175, row width=249
Operator #7 SecureSqlInput ran for 26.885000 ms, gate count: 0 output cardinality: 15000, row width=49
Operator #8 KeyedJoin ran for 4819972.288000 ms, gate count: 62281125000 output cardinality: 60175, row width=297
Operator #9 Project ran for 234.333000 ms, gate count: 0 output cardinality: 60175, row width=265
Operator #-1 Sort ran for 165128.142000 ms, gate count: 1961368020 output cardinality: 60175, row width=265
Operator #10 SortMergeAggregate ran for 7535.829000 ms, gate count: 91464512 output cardinality: 60175, row width=265
Operator #11 Sort ran for 171536.204000 ms, gate count: 1965098872 output cardinality: 60175, row width=265
Runtime: 5743.49 sec, CPU Time: 4493.77 sec, CPU clock ticks: 4.49377e+09, CPU clock ticks per second: 1000000
End-to-end estimated gates: 7.16027e+10. observed gates: 73996645080 gates, relative error (%)=3.23524
[Linux]Peak resident set size: 1295589376 bytes, current memory size: 462807040 bytes.
Initial Memory: 16646144 bytes, Peak Memory After Execution: 1295589376 bytes, Memory Usage: 1278943232 bytes
Bandwidth: 9457.23 Bps
[       OK ] CostOptimizedTest.card_bound_tpch_q9 (5747379 ms)
[----------] 1 test from CostOptimizedTest (5747379 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (5747379 ms total)
[  PASSED  ] 1 test.
Finished *.card_bound_tpch_q9.
---------------------------------
Running *.card_bound_tpch_q18...
Note: Google Test filter = *.card_bound_tpch_q18
[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from CostOptimizedTest
[ RUN      ] CostOptimizedTest.card_bound_tpch_q18
Connecting to 126.137.1.10 on ports 7654, 65482 as 2
connected
EMP mode: sh2pc, storage mode: column store
Code version: 0bfea0350f47ede98a64050e75230ef84e54e428
GFlags: --flagfile=	--alice_db=tpch_alice_1500	--alice_host=126.137.1.10	--bob_db=tpch_bob_1500	--ctrl_port=65483	--cutoff=100	--filter=*.card_bound_tpch_q18	--party=2	--port=7655	--storage=column	--unioned_db=tpch_unioned_1500	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 16777216 bytes, current memory size: 16777216 bytes.
Original Tree : 
#11: Sort<Bit> ({<-1, ASC> , <4, DESC> , <3, ASC> }) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32(11) customer.c_custkey, #2 shared-int32(16) order_keys.o_orderkey, #3 shared-int64(28) orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float sum_qty) order by: {<-1, ASC> , <4, DESC> , <3, ASC> }, cost est: 495150, output card: 100
    #10: Project<Bit> ((<0, P$6(200) shared-varchar>, <1, P$5(11) shared-int32>, <2, P$0(16) shared-int32>, <3, P$3(28) shared-int64>, <4, P$2(32) shared-float>, <5, P$4(32) shared-float>)) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32(11) customer.c_custkey, #2 shared-int32(16) order_keys.o_orderkey, #3 shared-int64(28) orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float sum_qty) order by: {<2, ASC> }, cost est: 0, output card: 15000
        #9: KeyedJoin<Bit> (P$1(11) == P$5(11)) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate, #4 shared-float sum_qty, #5 shared-int32(11) customer.c_custkey, #6 shared-varchar(25) customer.c_name) order by: {<0, ASC> }, cost est: 5085000000, output card: 15000
            #7: Project<Bit> ((<0, P$0(16) shared-int32>, <1, P$3(11) shared-int32>, <2, P$4(32) shared-float>, <3, P$5(28) shared-int64>, <4, P$1(32) shared-float>)) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate, #4 shared-float sum_qty) order by: {<0, ASC> }, cost est: 0, output card: 15000
                #6: MergeJoin<Bit> (no-op) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-float sum_qty, #2 shared-int32(16) orders.o_orderkey, #3 shared-int32(11) orders.o_custkey, #4 shared-float orders.o_totalprice, #5 shared-int64(28) orders.o_orderdate) order by: {<0, ASC> }, cost est: 45000, output card: 15000
                    #4: Filter<Bit> (P$1(32) > SECRET FLOAT) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 3195000, output card: 15000
                        #3: Project<Bit> ((<0, P$0(16) shared-int32>, <1, $1 + $3 shared-float>)) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 14790000, output card: 15000
                            #2: MergeJoin<Bit> (no-op) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-float sum_qty, #2 shared-int32(16) order_keys.o_orderkey, #3 shared-float sum_qty) order by: {<0, ASC> }, cost est: 45000, output card: 15000
                                #0: SecureSqlInput<Bit> ("WITH all_keys AS (SELECT o_orderkey  FROM order_keys), sum_qtys AS (SELECT l_orderkey, sum(l_quantity) as sum_qty, false AS dummy_tag FROM lineitem GROUP BY l_orderkey ORDER BY l_orderkey) SELECT o_orderkey, COALESCE(sum_qty, 0.0) sum_qty, COALESCE(dummy_tag, true) dummy_tag FROM all_keys LEFT JOIN sum_qtys ON l_orderkey = o_orderkey ORDER BY o_orderkey ", tuple_count=15000) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 0, output card: 15000
                                #1: SecureSqlInput<Bit> ("WITH all_keys AS (SELECT o_orderkey  FROM order_keys), sum_qtys AS (SELECT l_orderkey, sum(l_quantity) as sum_qty, false AS dummy_tag FROM lineitem GROUP BY l_orderkey ORDER BY l_orderkey) SELECT o_orderkey, COALESCE(sum_qty, 0.0) sum_qty, COALESCE(dummy_tag, true) dummy_tag FROM all_keys LEFT JOIN sum_qtys ON l_orderkey = o_orderkey ORDER BY o_orderkey ", tuple_count=15000) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 0, output card: 15000
                    #5: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_totalprice, o_orderdate, false dummy_tag FROM orders ORDER BY o_orderkey", tuple_count=15000) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate) order by: {<0, ASC> }, cost est: 11132815, output card: 15000
            #8: SecureSqlInput<Bit> ("SELECT c_custkey, c_name FROM customer ORDER BY c_custkey", tuple_count=1500) : (#0 shared-int32(11) customer.c_custkey, #1 shared-varchar(25) customer.c_name) order by: {}, cost est: 0, output card: 1500

Operator #0 SecureSqlInput ran for 29.452000 ms, gate count: 0 output cardinality: 15000, row width=49
Operator #1 SecureSqlInput ran for 51.278000 ms, gate count: 0 output cardinality: 15000, row width=49
Operator #2 MergeJoin ran for 35.731000 ms, gate count: 30000 output cardinality: 15000, row width=97
Operator #3 Project ran for 992.860000 ms, gate count: 14790000 output cardinality: 15000, row width=49
Operator #4 Filter ran for 210.417000 ms, gate count: 3210000 output cardinality: 15000, row width=49
Operator #5 SecureSqlInput ran for 1060.526000 ms, gate count: 10736460 output cardinality: 15000, row width=88
Operator #6 MergeJoin ran for 15.060000 ms, gate count: 30000 output cardinality: 15000, row width=136
Operator #7 Project ran for 7.203000 ms, gate count: 0 output cardinality: 15000, row width=120
Operator #8 SecureSqlInput ran for 14.019000 ms, gate count: 0 output cardinality: 1500, row width=212
Operator #9 KeyedJoin ran for 311996.767000 ms, gate count: 5107500000 output cardinality: 15000, row width=331
Operator #10 Project ran for 64.066000 ms, gate count: 0 output cardinality: 15000, row width=320
Operator #11 Sort ran for 21799.149000 ms, gate count: 290583144 output cardinality: 100, row width=320
Runtime: 336.523 sec, CPU Time: 316.414 sec, CPU clock ticks: 3.16414e+08, CPU clock ticks per second: 1000000
End-to-end estimated gates: 5.1147e+09. observed gates: 5426879604 gates, relative error (%)=5.75242
[Linux]Peak resident set size: 400764928 bytes, current memory size: 192630784 bytes.
Initial Memory: 16777216 bytes, Peak Memory After Execution: 400764928 bytes, Memory Usage: 383987712 bytes
Bandwidth: 83628.9 Bps
[       OK ] CostOptimizedTest.card_bound_tpch_q18 (336701 ms)
[----------] 1 test from CostOptimizedTest (336701 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (336701 ms total)
[  PASSED  ] 1 test.
Finished *.card_bound_tpch_q18.
---------------------------------
Running *.bushy_plan_tpch_q5...
Note: Google Test filter = *.bushy_plan_tpch_q5
[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from CostOptimizedTest
[ RUN      ] CostOptimizedTest.bushy_plan_tpch_q5
Connecting to 126.137.1.10 on ports 7654, 65482 as 2
connected
EMP mode: sh2pc, storage mode: column store
Code version: a6f2ed7fab287091a13af5a5eef83fda5072b853
GFlags: --flagfile=	--alice_db=tpch_alice_1500	--alice_host=126.137.1.10	--bob_db=tpch_bob_150--ctrl_port=65483	--cutoff=100	--filter=*.bushy_plan_tpch_q5	--party=2	--port=7655	--storage=column	--unioned_db=tpch_unioned_1500	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 16908288 bytes, current memory size: 16908288 bytes.
Original Tree : 
#11: Sort<Bit> ({<1, DESC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<1, DESC> }, cost est: 2583, output card: 5
    #10: SortMergeAggregate<Bit> (group-by: (0) aggs: (SUM($1) revenue)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 89420050, output card: 5
        #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 1757517824, output card: 60175
            #9: Project<Bit> ((<0, P$4(200) shared-varchar>, <1, P$2(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {}, cost est: 0, output card: 60175
                #8: KeyedJoin<Bit> ((P$1(16) == P$5(16)) AND (P$0(5) == P$3(5))) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(16) lineitem.l_orderkey, #2 shared-float revenue, #3 shared-int32(5) customer.c_nationkey, #4 shared-varchar(25) nation.n_name, #5 shared-int32(16) orders.o_orderkey) order by: {}, cost est: 254540250000, output card: 60175
                    #3: Project<Bit> ((<0, P$1(5) shared-int32>, <1, P$2(16) shared-int32>, <2, P$4(32) shared-float>)) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(16) lineitem.l_orderkey, #2 shared-float revenue) order by: {}, cost est: 0, output card: 60175
                        #2: KeyedJoin<Bit> (P$0(7) == P$3(7)) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey, #2 shared-int32(16) lineitem.l_orderkey, #3 shared-int32(7) lineitem.l_suppkey, #4 shared-float revenue) order by: {<3, ASC> , <0, ASC> }, cost est: 27680500, output card: 60175
                            #0: SecureSqlInput<Bit> ("SELECT s_suppkey, s_nationkey FROM supplier JOIN nation ON s_nationkey = n_nationkey JOIN region ON n_regionkey = r_regionkey WHERE r_name = 'EUROPE' ORDER BY s_suppkey", tuple_count=20) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey) order by: {<0, ASC> }, cost est: 989, output card: 20
                            #1: SecureSqlInput<Bit> ("SELECT l_orderkey, l_suppkey, l_extendedprice * (1 - l_discount) AS revenue FROM lineitem ORDER BY l_suppkey", tuple_count=60175) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float revenue) order by: {<1, ASC> }, cost est: 31527870, output card: 60175
                    #7: Project<Bit> ((<0, P$1(5) shared-int32>, <1, P$2(200) shared-varchar>, <2, P$3(16) shared-int32>)) : (#0 shared-int32(5) customer.c_nationkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(16) orders.o_orderkey) order by: {}, cost est: 0, output card: 15000
                        #6: KeyedJoin<Bit> (P$0(11) == P$4(11)) : (#0 shared-int32(11) customer.c_custkey, #1 shared-int32(5) customer.c_nationkey, #2 shared-varchar(25) nation.n_name, #3 shared-int32(16) orders.o_orderkey, #4 shared-int32(11) orders.o_custkey) order by: {<4, ASC> , <0, ASC> }, cost est: 942480000, output card: 15000
                            #4: SecureSqlInput<Bit> ("SELECT t2.c_custkey, t2.c_nationkey, t1.n_name FROM (SELECT r_regionkey, r_name FROM region WHERE r_name = 'EUROPE') AS t0 INNER JOIN (SELECT n_nationkey, n_name, n_regionkey FROM nation) AS t1 ON t0.r_regionkey = t1.n_regionkey INNER JOIN (SELECT c_custkey, c_nationkey FROM customer) AS t2 ON t1.n_nationkey = t2.c_nationkey ORDER BY t2.c_custkey ASC", tuple_count=272) : (#0 shared-int32(11) customer.c_custkey, #1 shared-int32(5) customer.c_nationkey, #2 shared-varchar(25) nation.n_name) order by: {<0, ASC> }, cost est: 253869, output card: 272
                            #5: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, NOT (o_orderdate >= DATE '1993-01-01' AND o_orderdate < DATE '1994-01-01') AS dummy_tag FROM orders ORDER BY o_custkey, o_orderdate", tuple_count=15000) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey) order by: {<1, ASC> }, cost est: 4369890, output card: 15000

Operator #0 SecureSqlInput ran for 0.646000 ms, gate count: 840 output cardinality: 20, row width=13
Operator #1 SecureSqlInput ran for 3036.564000 ms, gate count: 30121344 output cardinality: 60175, row width=56
Operator #2 KeyedJoin ran for 2466.372000 ms, gate count: 28884000 output cardinality: 60175, row width=68
Operator #3 Project ran for 16.695000 ms, gate count: 0 output cardinality: 60175, row width=54
Operator #4 SecureSqlInput ran for 25.340000 ms, gate count: 245488 output cardinality: 272, row width=217
Operator #5 SecureSqlInput ran for 444.774000 ms, gate count: 4090080 output cardinality: 15000, row width=28
Operator #6 KeyedJoin ran for 57796.508000 ms, gate count: 946560000 output cardinality: 15000, row width=244
Operator #7 Project ran for 52.255000 ms, gate count: 0 output cardinality: 15000, row width=222
Operator #8 KeyedJoin ran for 15122011.631000 ms, gate count: 224753625000 output cardinality: 60175, row width=275
Operator #9 Project ran for 216.708000 ms, gate count: 0 output cardinality: 60175, row width=233
Operator #-1 Sort ran for 140927.694000 ms, gate count: 1709304660 output cardinality: 60175, row width=233
Operator #10 SortMergeAggregate ran for 7163.239000 ms, gate count: 87553204 output cardinality: 60175, row width=233
Operator #11 Sort ran for 77014.944000 ms, gate count: 1055220388 output cardinality: 60175, row width=233
Runtime: 15411.4 sec, CPU Time: 12845.7 sec, CPU clock ticks: 1.28457e+10, CPU clock ticks per second: 1000000
End-to-end estimated gates: 2.57394e+11. observed gates: 228615605004 gates, relative error (%)=12.5879
[Linux]Peak resident set size: 1197780992 bytes, current memory size: 400609280 bytes.
Initial Memory: 16908288 bytes, Peak Memory After Execution: 1197780992 bytes, Memory Usage: 1180872704 bytes
Bandwidth: 2078.47 Bps
[       OK ] CostOptimizedTest.bushy_plan_tpch_q5 (15411436 ms)
[----------] 1 test from CostOptimizedTest (15411436 ms total)
Finished *.bushy_plan_tpch_q5.
---------------------------------
Running *.bushy_plan_tpch_q8...
Note: Google Test filter = *.bushy_plan_tpch_q8
[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from CostOptimizedTest
[ RUN      ] CostOptimizedTest.bushy_plan_tpch_q8
Connecting to 126.137.1.10 on ports 7654, 65482 as 2
connected
EMP mode: sh2pc, storage mode: column store
Code version: 0bfea0350f47ede98a64050e75230ef84e54e428
GFlags: --flagfile=	--alice_db=tpch_alice_1500	--alice_host=126.137.1.10	--bob_db=tpch_bob_1500	--ctrl_port=65483	--cutoff=100	--filter=*.bushy_plan_tpch_q8	--party=2	--port=7655	--storage=column	--unioned_db=tpch_unioned_1500	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 16384000 bytes, current memory size: 16384000 bytes.
Original Tree : 
#12: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32 orders.o_year, #1 shared-float mkt_share) order by: {<0, ASC> }, cost est: 100, output card: 2
    #11: Project<Bit> ((<0, P$0(32) shared-int32>, <1, $2 / $1 shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float mkt_share) order by: {<0, ASC> }, cost est: 7618, output card: 2
        #10: SortMergeAggregate<Bit> (group-by: (0) aggs: (SUM($1) null, SUM($2) null)) : (#0 shared-int32 orders.o_year, #1 shared-float null, #2 shared-float null) order by: {<0, ASC> }, cost est: 138402500, output card: 2
            #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32 orders.o_year, #1 shared-float volume, #2 shared-float selected_volume) order by: {<0, ASC> }, cost est: 532092576, output card: 60175
                #9: Project<Bit> ((<0, P$1(32) shared-int32>, <1, P$3(32) shared-float>, <2, CASE($4, $3, SECRET FLOAT) shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float volume, #2 shared-float selected_volume) order by: {}, cost est: 0, output card: 60175
                    #8: KeyedJoin<Bit> (P$0(16) == P$2(16)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32 orders.o_year, #2 shared-int32(16) lineitem.l_orderkey, #3 shared-float volume, #4 shared-bool nation_check) order by: {}, cost est: 61378500000, output card: 60175
                        #3: Project<Bit> ((<0, P$1(16) shared-int32>, <1, P$3(32) shared-int32>)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32 orders.o_year) order by: {}, cost est: 0, output card: 15000
                            #2: KeyedJoin<Bit> (P$0(11) == P$2(11)) : (#0 shared-int32(11) customer.c_custkey, #1 shared-int32(16) orders.o_orderkey, #2 shared-int32(11) orders.o_custkey, #3 shared-int32 orders.o_year) order by: {}, cost est: 117780000, output card: 15000
                                #0: SecureSqlInput<Bit> ("SELECT c_custkey FROM customer c JOIN nation n1 ON c_nationkey = n_nationkey JOIN region ON r_regionkey = n_regionkey WHERE r_name = 'AFRICA' ORDER BY c_custkey", tuple_count=302) : (#0 shared-int32(11) customer.c_custkey) order by: {}, cost est: 0, output card: 302
                                #1: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_orderyear::INT AS o_year, NOT (o_orderdate >= date '1995-01-01' and o_orderdate < date '1996-12-31') dummy_tag FROM orders ORDER BY o_year, o_orderkey", tuple_count=15000) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-int32 orders.o_year) order by: {}, cost est: 0, output card: 15000
                        #7: Project<Bit> ((<0, P$0(16) shared-int32>, <1, P$2(32) shared-float>, <2, P$4(1) shared-bool>)) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-float volume, #2 shared-bool nation_check) order by: {}, cost est: 0, output card: 60175
                            #6: KeyedJoin<Bit> (P$1(7) == P$3(7)) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float volume, #3 shared-int32(7) supplier.s_suppkey, #4 shared-bool nation_check) order by: {}, cost est: 114332500, output card: 60175
                                #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_suppkey, l_extendedprice * (1.0 - l_discount) AS volume,        CASE            WHEN p_type = 'LARGE ANODIZED STEEL' AND p_partkey = l_partkey THEN FALSE            ELSE TRUE            END AS dummy_tag FROM lineitem LEFT JOIN part ON p_partkey = l_partkey ORDER BY l_orderkey", tuple_count=60175) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float volume) order by: {}, cost est: 0, output card: 60175
                                #5: SecureSqlInput<Bit> ("SELECT s_suppkey, CASE WHEN n_name = 'KENYA' THEN true ELSE false END AS nation_check FROM supplier JOIN nation ON n_nationkey = s_nationkey ORDER BY s_suppkey", tuple_count=100) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-bool nation_check) order by: {}, cost est: 0, output card: 100

Operator #0 SecureSqlInput ran for 0.301000 ms, gate count: 0 output cardinality: 302, row width=12
Operator #1 SecureSqlInput ran for 44.110000 ms, gate count: 0 output cardinality: 15000, row width=60
Operator #2 KeyedJoin ran for 10460.414000 ms, gate count: 122310000 output cardinality: 15000, row width=71
Operator #3 Project ran for 9.585000 ms, gate count: 0 output cardinality: 15000, row width=49
Operator #4 SecureSqlInput ran for 177.831000 ms, gate count: 0 output cardinality: 60175, row width=56
Operator #5 SecureSqlInput ran for 1.854000 ms, gate count: 0 output cardinality: 100, row width=9
Operator #6 KeyedJoin ran for 11317.472000 ms, gate count: 120350000 output cardinality: 60175, row width=64
Operator #7 Project ran for 38.704000 ms, gate count: 0 output cardinality: 60175, row width=50
Operator #8 KeyedJoin ran for 4274497.657000 ms, gate count: 62281125000 output cardinality: 60175, row width=98
Operator #9 Project ran for 333.532000 ms, gate count: 1925600 output cardinality: 60175, row width=97
Operator #-1 Sort ran for 41668.873000 ms, gate count: 512003700 output cardinality: 60175, row width=97
Operator #10 SortMergeAggregate ran for 9192.829000 ms, gate count: 130517472 output cardinality: 60175, row width=97
Operator #11 Project ran for 14962.030000 ms, gate count: 229206576 output cardinality: 60175, row width=65
Operator #12 Sort ran for 32707.940000 ms, gate count: 385972020 output cardinality: 60175, row width=65
Runtime: 4395.56 sec, CPU Time: 3785.86 sec, CPU clock ticks: 3.78586e+09, CPU clock ticks per second: 1000000
End-to-end estimated gates: 6.22811e+10. observed gates: 63783410368 gates, relative error (%)=2.35531
[Linux]Peak resident set size: 451973120 bytes, current memory size: 243650560 bytes.
Initial Memory: 16384000 bytes, Peak Memory After Execution: 451973120 bytes, Memory Usage: 435589120 bytes
Bandwidth: 7857.71 Bps
[       OK ] CostOptimizedTest.bushy_plan_tpch_q8 (4395643 ms)
[----------] 1 test from CostOptimizedTest (4395643 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (4395643 ms total)
[  PASSED  ] 1 test.
Finished *.bushy_plan_tpch_q8.
---------------------------------
Running *.bushy_plan_tpch_q9...
Note: Google Test filter = *.bushy_plan_tpch_q9
[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from CostOptimizedTest
[ RUN      ] CostOptimizedTest.bushy_plan_tpch_q9
Connecting to 126.137.1.10 on ports 7654, 65482 as 2
connected
EMP mode: sh2pc, storage mode: column store
Code version: 0bfea0350f47ede98a64050e75230ef84e54e428
GFlags: --flagfile=	--alice_db=tpch_alice_1500	--alice_host=126.137.1.10	--bob_db=tpch_bob_1500	--ctrl_port=65483	--cutoff=100	--filter=*.bushy_plan_tpch_q9	--party=2	--port=7655	--storage=column	--unioned_db=tpch_unioned_1500	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 16777216 bytes, current memory size: 16777216 bytes.
Original Tree : 
#11: Sort<Bit> ({<0, ASC> , <1, DESC> }) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 o_year, #2 shared-float sum_profit) order by: {<0, ASC> , <1, DESC> }, cost est: 1385772, output card: 175
    #10: SortMergeAggregate<Bit> (group-by: (0, 1) aggs: (SUM($2) sum_profit)) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 o_year, #2 shared-float sum_profit) order by: {<0, ASC> , <1, DESC> }, cost est: 93271250, output card: 175
        #-1: Sort<Bit> ({<0, ASC> , <1, ASC> }) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 o_year, #2 shared-float amount) order by: {<0, ASC> , <1, ASC> }, cost est: 2027595136, output card: 60175
            #9: Project<Bit> ((<0, P$0(200) shared-varchar>, <1, P$8(32) shared-int32>, <2, $7 - ($3 * $6) shared-float>)) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 o_year, #2 shared-float amount) order by: {}, cost est: 274217475, output card: 60175
                #8: KeyedJoin<Bit> ((P$2(7) == P$5(7)) AND (P$1(11) == P$4(11))) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32(11) partsupp.ps_partkey, #2 shared-int32(7) partsupp.ps_suppkey, #3 shared-float partsupp.ps_supplycost, #4 shared-int32(11) lineitem.l_partkey, #5 shared-int32(7) lineitem.l_suppkey, #6 shared-float l_quantity, #7 shared-float volume, #8 shared-int32 o_year) order by: {}, cost est: 7817936000, output card: 60175
                    #3: Project<Bit> ((<0, P$1(200) shared-varchar>, <1, P$2(11) shared-int32>, <2, P$3(7) shared-int32>, <3, P$4(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32(11) partsupp.ps_partkey, #2 shared-int32(7) partsupp.ps_suppkey, #3 shared-float partsupp.ps_supplycost) order by: {}, cost est: 0, output card: 448
                        #2: KeyedJoin<Bit> (P$0(7) == P$3(7)) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(11) partsupp.ps_partkey, #3 shared-int32(7) partsupp.ps_suppkey, #4 shared-float partsupp.ps_supplycost) order by: {}, cost est: 9766400, output card: 448
                            #0: SecureSqlInput<Bit> ("SELECT s_suppkey, n_name FROM supplier JOIN nation ON s_nationkey = n_nationkey ORDER BY n_name, s_suppkey", tuple_count=100) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-varchar(25) nation.n_name) order by: {}, cost est: 0, output card: 100
                            #1: SecureSqlInput<Bit> ("SELECT ps_partkey, ps_suppkey, ps_supplycost FROM partsupp JOIN part ON ps_partkey = p_partkey WHERE p_name LIKE '%yellow%' ORDER BY ps_suppkey, ps_partkey", tuple_count=448) : (#0 shared-int32(11) partsupp.ps_partkey, #1 shared-int32(7) partsupp.ps_suppkey, #2 shared-float partsupp.ps_supplycost) order by: {}, cost est: 0, output card: 448
                    #7: Project<Bit> ((<0, P$1(11) shared-int32>, <1, P$2(7) shared-int32>, <2, P$3(32) shared-float>, <3, P$4(32) shared-float>, <4, P$5(32) shared-int32>)) : (#0 shared-int32(11) lineitem.l_partkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float l_quantity, #3 shared-float volume, #4 shared-int32 o_year) order by: {}, cost est: 0, output card: 60175
                        #6: KeyedJoin<Bit> (P$0(16) == P$6(16)) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(11) lineitem.l_partkey, #2 shared-int32(7) lineitem.l_suppkey, #3 shared-float l_quantity, #4 shared-float volume, #5 shared-int32 o_year, #6 shared-int32(16) orders.o_orderkey) order by: {}, cost est: 61378500000, output card: 60175
                            #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_partkey, l_suppkey, l_quantity::float4, l_extendedprice * (1.0 - l_discount) AS volume FROM lineitem ORDER BY l_orderkey, l_partkey, l_suppkey", tuple_count=60175) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(11) lineitem.l_partkey, #2 shared-int32(7) lineitem.l_suppkey, #3 shared-float l_quantity, #4 shared-float volume) order by: {}, cost est: 0, output card: 60175
                            #5: SecureSqlInput<Bit> ("SELECT EXTRACT('year' FROM o_orderdate)::INT AS o_year, o_orderkey FROM orders ORDER BY o_orderkey", tuple_count=15000) : (#0 shared-int32 o_year, #1 shared-int32(16) orders.o_orderkey) order by: {}, cost est: 0, output card: 15000

Operator #0 SecureSqlInput ran for 1.051000 ms, gate count: 0 output cardinality: 100, row width=208
Operator #1 SecureSqlInput ran for 1.982000 ms, gate count: 0 output cardinality: 448, row width=51
Operator #2 KeyedJoin ran for 635.500000 ms, gate count: 9811200 output cardinality: 448, row width=258
Operator #3 Project ran for 1.158000 ms, gate count: 0 output cardinality: 448, row width=251
Operator #4 SecureSqlInput ran for 313.792000 ms, gate count: 0 output cardinality: 60175, row width=99
Operator #5 SecureSqlInput ran for 31.759000 ms, gate count: 0 output cardinality: 15000, row width=49
Operator #6 KeyedJoin ran for 4393719.025000 ms, gate count: 62281125000 output cardinality: 60175, row width=147
Operator #7 Project ran for 60.731000 ms, gate count: 0 output cardinality: 60175, row width=115
Operator #8 KeyedJoin ran for 441280.820000 ms, gate count: 7413560000 output cardinality: 60175, row width=365
Operator #9 Project ran for 20685.824000 ms, gate count: 274217476 output cardinality: 60175, row width=265
Operator #-1 Sort ran for 164306.925000 ms, gate count: 1961368020 output cardinality: 60175, row width=265
Operator #10 SortMergeAggregate ran for 7561.068000 ms, gate count: 91464512 output cardinality: 60175, row width=265
Operator #11 Sort ran for 164142.443000 ms, gate count: 1965098872 output cardinality: 60175, row width=265
Runtime: 5192.96 sec, CPU Time: 4387.22 sec, CPU clock ticks: 4.38722e+09, CPU clock ticks per second: 1000000
End-to-end estimated gates: 7.16027e+10. observed gates: 73996645080 gates, relative error (%)=3.23524
[Linux]Peak resident set size: 1309040640 bytes, current memory size: 430313472 bytes.
Initial Memory: 16777216 bytes, Peak Memory After Execution: 1309040640 bytes, Memory Usage: 1292263424 bytes
Bandwidth: 10459.8 Bps
[       OK ] CostOptimizedTest.bushy_plan_tpch_q9 (5197626 ms)
[----------] 1 test from CostOptimizedTest (5197626 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (5197626 ms total)
[  PASSED  ] 1 test.
Finished *.bushy_plan_tpch_q9.
---------------------------------
Running *.cost_optimized_tpch_q1...
Note: Google Test filter = *.cost_optimized_tpch_q1
[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from CostOptimizedTest
[ RUN      ] CostOptimizedTest.cost_optimized_tpch_q1
Connecting to 126.137.1.10 on ports 7654, 65482 as 2
connected
EMP mode: sh2pc, storage mode: column store
Code version: 0bfea0350f47ede98a64050e75230ef84e54e428
GFlags: --flagfile=	--alice_db=tpch_alice_1500	--alice_host=126.137.1.10	--bob_db=tpch_bob_1500	--ctrl_port=65483	--cutoff=100	--filter=*.cost_optimized_tpch_q1	--party=2	--port=7655	--storage=column	--unioned_db=tpch_unioned_1500	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 16384000 bytes, current memory size: 16384000 bytes.
Original Tree : 
#4: Sort<Bit> ({<0, ASC> , <1, ASC> }) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty, #7 shared-float avg_price, #8 shared-float avg_disc, #9 shared-int64 count_order) order by: {<0, ASC> , <1, ASC> }, cost est: 4545, output card: 6
    #3: Project<Bit> ((<0, P$0(8) shared-varchar>, <1, P$1(8) shared-varchar>, <2, $2 + $15 shared-float>, <3, $3 + $16 shared-float>, <4, $4 + $17 shared-float>, <5, $5 + $18 shared-float>, <6, ($6 + $19) / ($7 + $20) shared-float>, <7, ($8 + $21) / ($9 + $22) shared-float>, <8, ($10 + $23) / ($11 + $24) shared-float>, <9, $12 + $25 shared-int64>)) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty, #7 shared-float avg_price, #8 shared-float avg_disc, #9 shared-int64 count_order) order by: {<0, ASC> , <1, ASC> }, cost est: 163596, output card: 6
        #2: MergeJoin<Bit> (no-op) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty_sum, #7 shared-float avg_qty_cnt, #8 shared-float avg_price_sum, #9 shared-float avg_price_cnt, #10 shared-float avg_discount_sum, #11 shared-float avg_discount_cnt, #12 shared-int64 cnt, #13 shared-varchar(1) l_returnflag, #14 shared-varchar(1) l_linestatus, #15 shared-float sum_qty, #16 shared-float sum_base_price, #17 shared-float sum_disc_price, #18 shared-float sum_charge, #19 shared-float avg_qty_sum, #20 shared-float avg_qty_cnt, #21 shared-float avg_price_sum, #22 shared-float avg_price_cnt, #23 shared-float avg_discount_sum, #24 shared-float avg_discount_cnt, #25 shared-int64 cnt) order by: {<0, ASC> , <1, ASC> }, cost est: 18, output card: 6
            #0: SecureSqlInput<Bit> ("WITH output_domain AS (
    SELECT  *
    FROM (VALUES('R'::char(1), 'F'::char(1)), ('A', 'F'), ('N', 'F'), ('R', 'O'), ('A', 'O'), ('N', 'O')) AS li(l_returnflag, l_linestatus)
    ORDER BY l_returnflag, l_linestatus),
     partial_aggs AS (
         SELECT l_returnflag, l_linestatus, SUM(l_quantity) sum_qty, SUM(l_extendedprice) sum_base_price,
                SUM(l_extendedprice*(1-l_discount)) sum_disc_price, SUM(l_extendedprice*(1-l_discount)*(1+l_tax)) sum_charge,
                SUM(l_quantity) avg_qty_sum, COUNT(l_quantity)::FLOAT4 avg_qty_cnt,
                 SUM(l_extendedprice) avg_price_sum, COUNT(l_extendedprice)::FLOAT4 avg_price_cnt,
                 SUM(l_discount) avg_discount_sum, COUNT(l_discount)::FLOAT4 avg_discount_cnt, COUNT(*) cnt
         FROM lineitem
         WHERE l_shipdate  <= date '1998-08-03'
         GROUP BY l_returnflag, l_linestatus
         ORDER BY l_returnflag, l_linestatus)
SELECT o.l_returnflag, o.l_linestatus, COALESCE(sum_qty, 0) sum_qty, COALESCE(sum_base_price, 0) sum_base_price, COALESCE(sum_disc_price, 0) sum_disc_price, COALESCE(sum_charge, 0) sum_charge, COALESCE(avg_qty_sum, 0) avg_qty_sum, COALESCE(avg_qty_cnt, 0) avg_qty_cnt,  COALESCE(avg_price_sum, 0) avg_price_sum, COALESCE(avg_price_cnt, 0) avg_price_cnt,  COALESCE(avg_discount_sum, 0) avg_discount_sum, COALESCE(avg_discount_cnt, 0) avg_discount_cnt,  COALESCE(cnt, 0)::BIGINT cnt, CASE WHEN p.l_returnflag IS NULL THEN true ELSE false END AS dummy_tag
FROM output_domain o LEFT JOIN partial_aggs p ON o.l_returnflag = p.l_returnflag AND o.l_linestatus = p.l_linestatus
ORDER BY o.l_returnflag, o.l_linestatus", tuple_count=6) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty_sum, #7 shared-float avg_qty_cnt, #8 shared-float avg_price_sum, #9 shared-float avg_price_cnt, #10 shared-float avg_discount_sum, #11 shared-float avg_discount_cnt, #12 shared-int64 cnt) order by: {<0, ASC> , <1, ASC> }, cost est: 0, output card: 6
            #1: SecureSqlInput<Bit> ("WITH output_domain AS (
    SELECT  *
    FROM (VALUES('R'::char(1), 'F'::char(1)), ('A', 'F'), ('N', 'F'), ('R', 'O'), ('A', 'O'), ('N', 'O')) AS li(l_returnflag, l_linestatus)
    ORDER BY l_returnflag, l_linestatus),
     partial_aggs AS (
         SELECT l_returnflag, l_linestatus, SUM(l_quantity) sum_qty, SUM(l_extendedprice) sum_base_price,
                SUM(l_extendedprice*(1-l_discount)) sum_disc_price, SUM(l_extendedprice*(1-l_discount)*(1+l_tax)) sum_charge,
                SUM(l_quantity) avg_qty_sum, COUNT(l_quantity)::FLOAT4 avg_qty_cnt,
                 SUM(l_extendedprice) avg_price_sum, COUNT(l_extendedprice)::FLOAT4 avg_price_cnt,
                 SUM(l_discount) avg_discount_sum, COUNT(l_discount)::FLOAT4 avg_discount_cnt, COUNT(*) cnt
         FROM lineitem
         WHERE l_shipdate  <= date '1998-08-03'
         GROUP BY l_returnflag, l_linestatus
         ORDER BY l_returnflag, l_linestatus)
SELECT o.l_returnflag, o.l_linestatus, COALESCE(sum_qty, 0) sum_qty, COALESCE(sum_base_price, 0) sum_base_price, COALESCE(sum_disc_price, 0) sum_disc_price, COALESCE(sum_charge, 0) sum_charge, COALESCE(avg_qty_sum, 0) avg_qty_sum, COALESCE(avg_qty_cnt, 0) avg_qty_cnt,  COALESCE(avg_price_sum, 0) avg_price_sum, COALESCE(avg_price_cnt, 0) avg_price_cnt,  COALESCE(avg_discount_sum, 0) avg_discount_sum, COALESCE(avg_discount_cnt, 0) avg_discount_cnt,  COALESCE(cnt, 0)::BIGINT cnt, CASE WHEN p.l_returnflag IS NULL THEN true ELSE false END AS dummy_tag
FROM output_domain o LEFT JOIN partial_aggs p ON o.l_returnflag = p.l_returnflag AND o.l_linestatus = p.l_linestatus
ORDER BY o.l_returnflag, o.l_linestatus", tuple_count=6) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty_sum, #7 shared-float avg_qty_cnt, #8 shared-float avg_price_sum, #9 shared-float avg_price_cnt, #10 shared-float avg_discount_sum, #11 shared-float avg_discount_cnt, #12 shared-int64 cnt) order by: {<0, ASC> , <1, ASC> }, cost est: 0, output card: 6

Total Plans : 1
Cost Optimized Plan : 
#3: Project<Bit> ((<0, P$0(8) shared-varchar>, <1, P$1(8) shared-varchar>, <2, $2 + $15 shared-float>, <3, $3 + $16 shared-float>, <4, $4 + $17 shared-float>, <5, $5 + $18 shared-float>, <6, ($6 + $19) / ($7 + $20) shared-float>, <7, ($8 + $21) / ($9 + $22) shared-float>, <8, ($10 + $23) / ($11 + $24) shared-float>, <9, $12 + $25 shared-int64>)) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float anonymous, #3 shared-float anonymous, #4 shared-float anonymous, #5 shared-float anonymous, #6 shared-float anonymous, #7 shared-float anonymous, #8 shared-float anonymous, #9 shared-int64 anonymous) order by: {<0, ASC> , <1, ASC> }, cost est: 163596, output card: 6
    #2: MergeJoin<Bit> (no-op) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty_sum, #7 shared-float avg_qty_cnt, #8 shared-float avg_price_sum, #9 shared-float avg_price_cnt, #10 shared-float avg_discount_sum, #11 shared-float avg_discount_cnt, #12 shared-int64 cnt, #13 shared-varchar(1) l_returnflag, #14 shared-varchar(1) l_linestatus, #15 shared-float sum_qty, #16 shared-float sum_base_price, #17 shared-float sum_disc_price, #18 shared-float sum_charge, #19 shared-float avg_qty_sum, #20 shared-float avg_qty_cnt, #21 shared-float avg_price_sum, #22 shared-float avg_price_cnt, #23 shared-float avg_discount_sum, #24 shared-float avg_discount_cnt, #25 shared-int64 cnt) order by: {<0, ASC> , <1, ASC> }, cost est: 18, output card: 6
        #0: SecureSqlInput<Bit> ("WITH output_domain AS (
    SELECT  *
    FROM (VALUES('R'::char(1), 'F'::char(1)), ('A', 'F'), ('N', 'F'), ('R', 'O'), ('A', 'O'), ('N', 'O')) AS li(l_returnflag, l_linestatus)
    ORDER BY l_returnflag, l_linestatus),
     partial_aggs AS (
         SELECT l_returnflag, l_linestatus, SUM(l_quantity) sum_qty, SUM(l_extendedprice) sum_base_price,
                SUM(l_extendedprice*(1-l_discount)) sum_disc_price, SUM(l_extendedprice*(1-l_discount)*(1+l_tax)) sum_charge,
                SUM(l_quantity) avg_qty_sum, COUNT(l_quantity)::FLOAT4 avg_qty_cnt,
                 SUM(l_extendedprice) avg_price_sum, COUNT(l_extendedprice)::FLOAT4 avg_price_cnt,
                 SUM(l_discount) avg_discount_sum, COUNT(l_discount)::FLOAT4 avg_discount_cnt, COUNT(*) cnt
         FROM lineitem
         WHERE l_shipdate  <= date '1998-08-03'
         GROUP BY l_returnflag, l_linestatus
         ORDER BY l_returnflag, l_linestatus)
SELECT o.l_returnflag, o.l_linestatus, COALESCE(sum_qty, 0) sum_qty, COALESCE(sum_base_price, 0) sum_base_price, COALESCE(sum_disc_price, 0) sum_disc_price, COALESCE(sum_charge, 0) sum_charge, COALESCE(avg_qty_sum, 0) avg_qty_sum, COALESCE(avg_qty_cnt, 0) avg_qty_cnt,  COALESCE(avg_price_sum, 0) avg_price_sum, COALESCE(avg_price_cnt, 0) avg_price_cnt,  COALESCE(avg_discount_sum, 0) avg_discount_sum, COALESCE(avg_discount_cnt, 0) avg_discount_cnt,  COALESCE(cnt, 0)::BIGINT cnt, CASE WHEN p.l_returnflag IS NULL THEN true ELSE false END AS dummy_tag
FROM output_domain o LEFT JOIN partial_aggs p ON o.l_returnflag = p.l_returnflag AND o.l_linestatus = p.l_linestatus
ORDER BY o.l_returnflag, o.l_linestatus", tuple_count=6) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty_sum, #7 shared-float avg_qty_cnt, #8 shared-float avg_price_sum, #9 shared-float avg_price_cnt, #10 shared-float avg_discount_sum, #11 shared-float avg_discount_cnt, #12 shared-int64 cnt) order by: {<0, ASC> , <1, ASC> }, cost est: 0, output card: 6
        #1: SecureSqlInput<Bit> ("WITH output_domain AS (
    SELECT  *
    FROM (VALUES('R'::char(1), 'F'::char(1)), ('A', 'F'), ('N', 'F'), ('R', 'O'), ('A', 'O'), ('N', 'O')) AS li(l_returnflag, l_linestatus)
    ORDER BY l_returnflag, l_linestatus),
     partial_aggs AS (
         SELECT l_returnflag, l_linestatus, SUM(l_quantity) sum_qty, SUM(l_extendedprice) sum_base_price,
                SUM(l_extendedprice*(1-l_discount)) sum_disc_price, SUM(l_extendedprice*(1-l_discount)*(1+l_tax)) sum_charge,
                SUM(l_quantity) avg_qty_sum, COUNT(l_quantity)::FLOAT4 avg_qty_cnt,
                 SUM(l_extendedprice) avg_price_sum, COUNT(l_extendedprice)::FLOAT4 avg_price_cnt,
                 SUM(l_discount) avg_discount_sum, COUNT(l_discount)::FLOAT4 avg_discount_cnt, COUNT(*) cnt
         FROM lineitem
         WHERE l_shipdate  <= date '1998-08-03'
         GROUP BY l_returnflag, l_linestatus
         ORDER BY l_returnflag, l_linestatus)
SELECT o.l_returnflag, o.l_linestatus, COALESCE(sum_qty, 0) sum_qty, COALESCE(sum_base_price, 0) sum_base_price, COALESCE(sum_disc_price, 0) sum_disc_price, COALESCE(sum_charge, 0) sum_charge, COALESCE(avg_qty_sum, 0) avg_qty_sum, COALESCE(avg_qty_cnt, 0) avg_qty_cnt,  COALESCE(avg_price_sum, 0) avg_price_sum, COALESCE(avg_price_cnt, 0) avg_price_cnt,  COALESCE(avg_discount_sum, 0) avg_discount_sum, COALESCE(avg_discount_cnt, 0) avg_discount_cnt,  COALESCE(cnt, 0)::BIGINT cnt, CASE WHEN p.l_returnflag IS NULL THEN true ELSE false END AS dummy_tag
FROM output_domain o LEFT JOIN partial_aggs p ON o.l_returnflag = p.l_returnflag AND o.l_linestatus = p.l_linestatus
ORDER BY o.l_returnflag, o.l_linestatus", tuple_count=6) : (#0 shared-varchar(1) l_returnflag, #1 shared-varchar(1) l_linestatus, #2 shared-float sum_qty, #3 shared-float sum_base_price, #4 shared-float sum_disc_price, #5 shared-float sum_charge, #6 shared-float avg_qty_sum, #7 shared-float avg_qty_cnt, #8 shared-float avg_price_sum, #9 shared-float avg_price_cnt, #10 shared-float avg_discount_sum, #11 shared-float avg_discount_cnt, #12 shared-int64 cnt) order by: {<0, ASC> , <1, ASC> }, cost est: 0, output card: 6

Cost Optimization Time : 0.000405 sec
Operator #0 SecureSqlInput ran for 0.384000 ms, gate count: 0 output cardinality: 6, row width=401
Operator #1 SecureSqlInput ran for 0.235000 ms, gate count: 0 output cardinality: 6, row width=401
Operator #2 MergeJoin ran for 2.460000 ms, gate count: 12 output cardinality: 6, row width=801
Operator #3 Project ran for 10.220000 ms, gate count: 128100 output cardinality: 6, row width=305
Runtime: 0.304104 sec, CPU Time: 0.01495 sec, CPU clock ticks: 14950, CPU clock ticks per second: 1000000
End-to-end estimated gates: 163614. observed gates: 128112 gates, relative error (%)=27.7117
[Linux]Peak resident set size: 17825792 bytes, current memory size: 17825792 bytes.
Initial Memory: 16384000 bytes, Peak Memory After Execution: 17825792 bytes, Memory Usage: 1441792 bytes
Bandwidth: 8280.06 Bps
[       OK ] CostOptimizedTest.cost_optimized_tpch_q1 (434 ms)
[----------] 1 test from CostOptimizedTest (434 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (434 ms total)
[  PASSED  ] 1 test.
Finished *.cost_optimized_tpch_q1.
---------------------------------
Running *.cost_optimized_tpch_q3...
Note: Google Test filter = *.cost_optimized_tpch_q3
[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from CostOptimizedTest
[ RUN      ] CostOptimizedTest.cost_optimized_tpch_q3
Connecting to 126.137.1.10 on ports 7654, 65482 as 2
connected
EMP mode: sh2pc, storage mode: column store
Code version: 0bfea0350f47ede98a64050e75230ef84e54e428
GFlags: --flagfile=	--alice_db=tpch_alice_1500	--alice_host=126.137.1.10	--bob_db=tpch_bob_1500	--ctrl_port=65483	--cutoff=100	--filter=*.cost_optimized_tpch_q3	--party=2	--port=7655	--storage=column	--unioned_db=tpch_unioned_1500	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 16908288 bytes, current memory size: 16908288 bytes.
Operator (2). smj cost : 262659348, nlj cost : 585000000, join type : keyed-sort-merge-join
Operator (5). smj cost : 1636120488, nlj cost : 58670625000, join type : keyed-sort-merge-join
Operator (7). sma cost : 71126850, nla cost : 4395931178750, agg type : sort-merge-aggregate
Original Tree : 
#9: Project<Bit> ((<0, P$0(16) shared-int32>, <1, P$3(32) shared-float>, <2, P$1(28) shared-int64>, <3, P$2(1) shared-int32>)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-float revenue, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32(1) orders.o_shippriority) order by: {<-1, ASC> , <1, DESC> , <2, ASC> }, cost est: 0, output card: 10
    #8: Sort<Bit> ({<-1, ASC> , <3, DESC> , <1, ASC> }) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority, #3 shared-float revenue) order by: {<-1, ASC> , <3, DESC> , <1, ASC> }, cost est: 5312, output card: 10
        #7: SortMergeAggregate<Bit> (group-by: (0, 1, 2) aggs: (SUM($3) revenue)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority, #3 shared-float revenue) order by: {<0, ASC> }, cost est: 71126850, output card: 60175
            #-1: Sort<Bit> ({<0, ASC> , <1, ASC> , <2, ASC> }) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority, #3 shared-float revenue) order by: {<0, ASC> , <1, ASC> , <2, ASC> }, cost est: 532092576, output card: 60175
                #6: Project<Bit> ((<0, P$0(16) shared-int32>, <1, P$1(28) shared-int64>, <2, P$2(1) shared-int32>, <3, P$4(32) shared-float>)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority, #3 shared-float revenue) order by: {<-1, ASC> , <0, ASC> }, cost est: 0, output card: 60175
                    #5: SortMergeJoin<Bit> (P$0(16) == P$3(16)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority, #3 shared-int32(16) lineitem.l_orderkey, #4 shared-float revenue) order by: {<-1, ASC> , <0, ASC> , <3, ASC> }, cost est: 1636120488, output card: 60175
                        #3: Project<Bit> ((<0, P$0(16) shared-int32>, <1, P$2(28) shared-int64>, <2, P$3(1) shared-int32>)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority) order by: {<-1, ASC> }, cost est: 0, output card: 15000
                            #2: SortMergeJoin<Bit> (P$1(11) == P$4(11)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32(1) orders.o_shippriority, #4 shared-int32(11) customer.c_custkey) order by: {<-1, ASC> , <1, ASC> , <4, ASC> }, cost est: 262659348, output card: 15000
                                #0: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_orderdate, o_shippriority, NOT o_orderdate < DATE '1995-03-25' AS dummy_tag FROM orders ORDER BY o_orderkey, o_orderdate, o_shippriority", tuple_count=15000) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32(1) orders.o_shippriority) order by: {<0, ASC> }, cost est: 7907420, output card: 15000
                                #1: SecureSqlInput<Bit> ("SELECT c_custkey, NOT c_mktsegment = 'HOUSEHOLD' AS dummy_tag FROM customer ORDER BY c_custkey", tuple_count=1500) : (#0 shared-int32(11) customer.c_custkey) order by: {<0, ASC> }, cost est: 205738, output card: 1500
                        #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_extendedprice * (1 - l_discount) AS revenue, NOT l_shipdate > DATE '1995-03-25' AS dummy_tag FROM lineitem ORDER BY l_orderkey", tuple_count=60175) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 32483260, output card: 60175

Total Plans : 96
Cost Optimized Plan : 
#9: Project<Bit> ((<0, P$0(16) shared-int32>, <1, P$3(32) shared-float>, <2, P$1(28) shared-int64>, <3, P$2(1) shared-int32>)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-float revenue, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32(1) orders.o_shippriority) order by: {<-1, ASC> , <1, DESC> , <2, ASC> }, cost est: 0, output card: 10
    #8: Sort<Bit> ({<-1, ASC> , <3, DESC> , <1, ASC> }) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority, #3 shared-float revenue) order by: {<-1, ASC> , <3, DESC> , <1, ASC> }, cost est: 5312, output card: 10
        #7: SortMergeAggregate<Bit> (group-by: (0, 1, 2) aggs: (SUM($3) revenue)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority, #3 shared-float revenue) order by: {<0, ASC> }, cost est: 71126850, output card: 60175
            #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority, #3 shared-float revenue) order by: {<0, ASC> }, cost est: 391007424, output card: 60175
                #6: Project<Bit> ((<0, P$0(16) shared-int32>, <1, P$1(28) shared-int64>, <2, P$2(1) shared-int32>, <3, P$4(32) shared-float>)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority, #3 shared-float revenue) order by: {<-1, ASC> , <0, ASC> }, cost est: 0, output card: 60175
                    #5: SortMergeJoin<Bit> (P$0(16) == P$3(16)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority, #3 shared-int32(16) lineitem.l_orderkey, #4 shared-float revenue) order by: {<-1, ASC> , <0, ASC> , <3, ASC> }, cost est: 1219728984, output card: 60175
                        #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority) order by: {<0, ASC> }, cost est: 50291424, output card: 15000
                            #3: Project<Bit> ((<0, P$0(16) shared-int32>, <1, P$2(28) shared-int64>, <2, P$3(1) shared-int32>)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int64(28) orders.o_orderdate, #2 shared-int32(1) orders.o_shippriority) order by: {<-1, ASC> }, cost est: 0, output card: 15000
                                #2: SortMergeJoin<Bit> (P$1(11) == P$4(11)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32(1) orders.o_shippriority, #4 shared-int32(11) customer.c_custkey) order by: {<-1, ASC> , <1, ASC> , <4, ASC> }, cost est: 194237898, output card: 15000
                                    #0: SecureSqlInput<Bit> ("SELECT * FROM (SELECT o_orderkey, o_custkey, o_orderdate, o_shippriority, NOT o_orderdate < DATE '1995-03-25' AS dummy_tag FROM orders ORDER BY o_orderkey, o_orderdate, o_shippriority) to_sort ORDER BY (2)  ASC ", tuple_count=15000) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-int64(28) orders.o_orderdate, #3 shared-int32(1) orders.o_shippriority) order by: {<1, ASC> }, cost est: 7387195, output card: 15000
                                    #1: SecureSqlInput<Bit> ("SELECT c_custkey, NOT c_mktsegment = 'HOUSEHOLD' AS dummy_tag FROM customer ORDER BY c_custkey", tuple_count=1500) : (#0 shared-int32(11) customer.c_custkey) order by: {<0, ASC> }, cost est: 205738, output card: 1500
                        #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_extendedprice * (1 - l_discount) AS revenue, NOT l_shipdate > DATE '1995-03-25' AS dummy_tag FROM lineitem ORDER BY l_orderkey", tuple_count=60175) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 32483260, output card: 60175

Cost Optimization Time : 0.049726 sec
Operator #0 SecureSqlInput ran for 757.554000 ms, gate count: 7055388 output cardinality: 15000, row width=57
Operator #1 SecureSqlInput ran for 27.721000 ms, gate count: 183936 output cardinality: 1500, row width=12
Operator #2 SortMergeJoin ran for 18865.396000 ms, gate count: 224472448 output cardinality: 15000, row width=68
Operator #3 Project ran for 7.890000 ms, gate count: 0 output cardinality: 15000, row width=46
Operator #-1 Sort ran for 4170.513000 ms, gate count: 47487384 output cardinality: 15000, row width=46
Operator #4 SecureSqlInput ran for 3187.169000 ms, gate count: 31062636 output cardinality: 60175, row width=49
Operator #5 SortMergeJoin ran for 103144.817000 ms, gate count: 1493311200 output cardinality: 60175, row width=94
Operator #6 Project ran for 36.966000 ms, gate count: 0 output cardinality: 60175, row width=78
Operator #-1 Sort ran for 30472.718000 ms, gate count: 374156552 output cardinality: 60175, row width=78
Operator #7 SortMergeAggregate ran for 4922.610000 ms, gate count: 69380652 output cardinality: 60175, row width=78
Operator #8 Sort ran for 50443.887000 ms, gate count: 562909140 output cardinality: 10, row width=78
Operator #9 Project ran for 0.034000 ms, gate count: 0 output cardinality: 10, row width=78
Runtime: 216.272 sec, CPU Time: 179.579 sec, CPU clock ticks: 1.79579e+08, CPU clock ticks per second: 1000000
End-to-end estimated gates: 1.96647e+09. observed gates: 2499757544 gates, relative error (%)=21.3334
[Linux]Peak resident set size: 716120064 bytes, current memory size: 50274304 bytes.
Initial Memory: 16908288 bytes, Peak Memory After Execution: 716120064 bytes, Memory Usage: 699211776 bytes
Bandwidth: 141707 Bps
[       OK ] CostOptimizedTest.cost_optimized_tpch_q3 (216354 ms)
[----------] 1 test from CostOptimizedTest (216354 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (216354 ms total)
[  PASSED  ] 1 test.
Finished *.cost_optimized_tpch_q3.
---------------------------------
Running *.cost_optimized_tpch_q5...
Note: Google Test filter = *.cost_optimized_tpch_q5
[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from CostOptimizedTest
[ RUN      ] CostOptimizedTest.cost_optimized_tpch_q5
Connecting to 126.137.1.10 on ports 7654, 65482 as 2
connected
EMP mode: sh2pc, storage mode: column store
Code version: 0bfea0350f47ede98a64050e75230ef84e54e428
GFlags: --flagfile=	--alice_db=tpch_alice_1500	--alice_host=126.137.1.10	--bob_db=tpch_bob_1500	--ctrl_port=65483	--cutoff=100	--filter=*.cost_optimized_tpch_q5	--party=2	--port=7655	--storage=column	--unioned_db=tpch_unioned_1500	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 16252928 bytes, current memory size: 16252928 bytes.
Operator (2). smj cost : 786723256, nlj cost : 27680500, join type : nested-loop-join
Operator (6). smj cost : 380478756, nlj cost : 942480000, join type : keyed-sort-merge-join
Operator (8). smj cost : 4132174152, nlj cost : 254540250000, join type : keyed-sort-merge-join
Operator (10). sma cost : 89420050, nla cost : 456728250, agg type : sort-merge-aggregate
Original Tree : 
#11: Sort<Bit> ({<1, DESC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<1, DESC> }, cost est: 2583, output card: 5
    #10: SortMergeAggregate<Bit> (group-by: (0) aggs: (SUM($1) revenue)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 89420050, output card: 5
        #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 1757517824, output card: 60175
            #9: Project<Bit> ((<0, P$4(200) shared-varchar>, <1, P$2(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<-1, ASC> }, cost est: 0, output card: 60175
                #8: SortMergeJoin<Bit> ((P$1(16) == P$5(16)) AND (P$0(5) == P$3(5))) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(16) lineitem.l_orderkey, #2 shared-float revenue, #3 shared-int32(5) customer.c_nationkey, #4 shared-varchar(25) nation.n_name, #5 shared-int32(16) orders.o_orderkey) order by: {<-1, ASC> , <1, ASC> , <5, ASC> , <0, ASC> , <3, ASC> }, cost est: 4132174152, output card: 60175
                    #3: Project<Bit> ((<0, P$1(5) shared-int32>, <1, P$2(16) shared-int32>, <2, P$4(32) shared-float>)) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(16) lineitem.l_orderkey, #2 shared-float revenue) order by: {}, cost est: 0, output card: 60175
                        #2: KeyedJoin<Bit> (P$0(7) == P$3(7)) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey, #2 shared-int32(16) lineitem.l_orderkey, #3 shared-int32(7) lineitem.l_suppkey, #4 shared-float revenue) order by: {<3, ASC> , <0, ASC> }, cost est: 27680500, output card: 60175
                            #0: SecureSqlInput<Bit> ("SELECT s_suppkey, s_nationkey FROM supplier JOIN nation ON s_nationkey = n_nationkey JOIN region ON n_regionkey = r_regionkey WHERE r_name = 'EUROPE' ORDER BY s_suppkey", tuple_count=20) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey) order by: {<0, ASC> }, cost est: 989, output card: 20
                            #1: SecureSqlInput<Bit> ("SELECT l_orderkey, l_suppkey, l_extendedprice * (1 - l_discount) AS revenue FROM lineitem ORDER BY l_suppkey", tuple_count=60175) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float revenue) order by: {<1, ASC> }, cost est: 31527870, output card: 60175
                    #7: Project<Bit> ((<0, P$1(5) shared-int32>, <1, P$2(200) shared-varchar>, <2, P$3(16) shared-int32>)) : (#0 shared-int32(5) customer.c_nationkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(16) orders.o_orderkey) order by: {<-1, ASC> }, cost est: 0, output card: 15000
                        #6: SortMergeJoin<Bit> (P$0(11) == P$4(11)) : (#0 shared-int32(11) customer.c_custkey, #1 shared-int32(5) customer.c_nationkey, #2 shared-varchar(25) nation.n_name, #3 shared-int32(16) orders.o_orderkey, #4 shared-int32(11) orders.o_custkey) order by: {<-1, ASC> , <0, ASC> , <4, ASC> }, cost est: 380478756, output card: 15000
                            #4: SecureSqlInput<Bit> ("SELECT t2.c_custkey, t2.c_nationkey, t1.n_name FROM (SELECT r_regionkey, r_name FROM region WHERE r_name = 'EUROPE') AS t0 INNER JOIN (SELECT n_nationkey, n_name, n_regionkey FROM nation) AS t1 ON t0.r_regionkey = t1.n_regionkey INNER JOIN (SELECT c_custkey, c_nationkey FROM customer) AS t2 ON t1.n_nationkey = t2.c_nationkey ORDER BY t2.c_custkey ASC", tuple_count=272) : (#0 shared-int32(11) customer.c_custkey, #1 shared-int32(5) customer.c_nationkey, #2 shared-varchar(25) nation.n_name) order by: {<0, ASC> }, cost est: 253869, output card: 272
                            #5: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, NOT (o_orderdate >= DATE '1993-01-01' AND o_orderdate < DATE '1994-01-01') AS dummy_tag FROM orders ORDER BY o_custkey, o_orderdate", tuple_count=15000) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey) order by: {<1, ASC> }, cost est: 4369890, output card: 15000

Total Plans : 1296
Cost Optimized Plan : 
#11: Sort<Bit> ({<1, DESC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<1, DESC> }, cost est: 2583, output card: 5
    #10: NestedLoopAggregate<Bit> (group-by: (0) aggs: (SUM($1) revenue)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {}, cost est: 456728250, output card: 5
        #9: Project<Bit> ((<0, P$4(200) shared-varchar>, <1, P$2(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<-1, ASC> }, cost est: 0, output card: 60175
            #8: SortMergeJoin<Bit> ((P$1(16) == P$5(16)) AND (P$0(5) == P$3(5))) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(16) lineitem.l_orderkey, #2 shared-float revenue, #3 shared-int32(5) customer.c_nationkey, #4 shared-varchar(25) nation.n_name, #5 shared-int32(16) orders.o_orderkey) order by: {<-1, ASC> , <1, ASC> , <5, ASC> , <0, ASC> , <3, ASC> }, cost est: 2878373016, output card: 60175
                #3: Project<Bit> ((<0, P$1(5) shared-int32>, <1, P$2(16) shared-int32>, <2, P$4(32) shared-float>)) : (#0 shared-int32(5) supplier.s_nationkey, #1 shared-int32(16) lineitem.l_orderkey, #2 shared-float revenue) order by: {<1, ASC> , <0, ASC> }, cost est: 0, output card: 60175
                    #2: KeyedJoin<Bit> (P$0(7) == P$3(7)) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey, #2 shared-int32(16) lineitem.l_orderkey, #3 shared-int32(7) lineitem.l_suppkey, #4 shared-float revenue) order by: {<2, ASC> , <1, ASC> }, cost est: 27680500, output card: 60175
                        #0: SecureSqlInput<Bit> ("SELECT * FROM (SELECT s_suppkey, s_nationkey FROM supplier JOIN nation ON s_nationkey = n_nationkey JOIN region ON n_regionkey = r_regionkey WHERE r_name = 'EUROPE' ORDER BY s_suppkey) to_sort ORDER BY (2)  ASC ", tuple_count=20) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-int32(5) supplier.s_nationkey) order by: {<1, ASC> }, cost est: 903, output card: 20
                        #1: SecureSqlInput<Bit> ("SELECT * FROM (SELECT l_orderkey, l_suppkey, l_extendedprice * (1 - l_discount) AS revenue FROM lineitem ORDER BY l_suppkey) to_sort ORDER BY (1)  ASC ", tuple_count=60175) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float revenue) order by: {<0, ASC> }, cost est: 35827125, output card: 60175
                #-1: Sort<Bit> ({<2, ASC> , <0, ASC> }) : (#0 shared-int32(5) customer.c_nationkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(16) orders.o_orderkey) order by: {<2, ASC> , <0, ASC> }, cost est: 192654832, output card: 15000
                    #7: Project<Bit> ((<0, P$1(5) shared-int32>, <1, P$2(200) shared-varchar>, <2, P$3(16) shared-int32>)) : (#0 shared-int32(5) customer.c_nationkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(16) orders.o_orderkey) order by: {<-1, ASC> }, cost est: 0, output card: 15000
                        #6: SortMergeJoin<Bit> (P$0(11) == P$4(11)) : (#0 shared-int32(11) customer.c_custkey, #1 shared-int32(5) customer.c_nationkey, #2 shared-varchar(25) nation.n_name, #3 shared-int32(16) orders.o_orderkey, #4 shared-int32(11) orders.o_custkey) order by: {<-1, ASC> , <0, ASC> , <4, ASC> }, cost est: 380478756, output card: 15000
                            #4: SecureSqlInput<Bit> ("SELECT t2.c_custkey, t2.c_nationkey, t1.n_name FROM (SELECT r_regionkey, r_name FROM region WHERE r_name = 'EUROPE') AS t0 INNER JOIN (SELECT n_nationkey, n_name, n_regionkey FROM nation) AS t1 ON t0.r_regionkey = t1.n_regionkey INNER JOIN (SELECT c_custkey, c_nationkey FROM customer) AS t2 ON t1.n_nationkey = t2.c_nationkey ORDER BY t2.c_custkey ASC", tuple_count=272) : (#0 shared-int32(11) customer.c_custkey, #1 shared-int32(5) customer.c_nationkey, #2 shared-varchar(25) nation.n_name) order by: {<0, ASC> }, cost est: 253869, output card: 272
                            #5: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, NOT (o_orderdate >= DATE '1993-01-01' AND o_orderdate < DATE '1994-01-01') AS dummy_tag FROM orders ORDER BY o_custkey, o_orderdate", tuple_count=15000) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey) order by: {<1, ASC> }, cost est: 4369890, output card: 15000

Cost Optimization Time : 0.449676 sec
Operator #0 SecureSqlInput ran for 39.035000 ms, gate count: 760 output cardinality: 20, row width=13
Operator #1 SecureSqlInput ran for 3615.971000 ms, gate count: 34357160 output cardinality: 60175, row width=56
Operator #2 KeyedJoin ran for 2557.813000 ms, gate count: 28884000 output cardinality: 60175, row width=68
Operator #3 Project ran for 16.981000 ms, gate count: 0 output cardinality: 60175, row width=54
Operator #4 SecureSqlInput ran for 25.918000 ms, gate count: 245488 output cardinality: 272, row width=217
Operator #5 SecureSqlInput ran for 459.118000 ms, gate count: 4090080 output cardinality: 15000, row width=28
Operator #6 SortMergeJoin ran for 42247.610000 ms, gate count: 595694136 output cardinality: 15000, row width=244
Operator #7 Project ran for 52.209000 ms, gate count: 0 output cardinality: 15000, row width=222
Operator #-1 Sort ran for 15505.967000 ms, gate count: 183919392 output cardinality: 15000, row width=222
Operator #8 SortMergeJoin ran for 264162.617000 ms, gate count: 4119791388 output cardinality: 60175, row width=275
Operator #9 Project ran for 209.105000 ms, gate count: 0 output cardinality: 60175, row width=233
Operator #10 NestedLoopAggregate ran for 33442.456000 ms, gate count: 438976624 output cardinality: 5, row width=233
Operator #11 Sort ran for 0.347000 ms, gate count: 3024 output cardinality: 5, row width=233
Runtime: 363.019 sec, CPU Time: 278.206 sec, CPU clock ticks: 2.78206e+08, CPU clock ticks per second: 1000000
End-to-end estimated gates: 3.97637e+09. observed gates: 4558771036 gates, relative error (%)=12.7754
[Linux]Peak resident set size: 2016292864 bytes, current memory size: 384868352 bytes.
Initial Memory: 16252928 bytes, Peak Memory After Execution: 2016292864 bytes, Memory Usage: 2000039936 bytes
Bandwidth: 88237.8 Bps
[       OK ] CostOptimizedTest.cost_optimized_tpch_q5 (363102 ms)
[----------] 1 test from CostOptimizedTest (363102 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (363102 ms total)
[  PASSED  ] 1 test.
Finished *.cost_optimized_tpch_q5.
---------------------------------
Running *.cost_optimized_tpch_q8...
Note: Google Test filter = *.cost_optimized_tpch_q8
[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from CostOptimizedTest
[ RUN      ] CostOptimizedTest.cost_optimized_tpch_q8
Connecting to 126.137.1.10 on ports 7654, 65482 as 2
connected
EMP mode: sh2pc, storage mode: column store
Code version: 0bfea0350f47ede98a64050e75230ef84e54e428
GFlags: --flagfile=	--alice_db=tpch_alice_1500	--alice_host=126.137.1.10	--bob_db=tpch_bob_1500	--ctrl_port=65483	--cutoff=100	--filter=*.cost_optimized_tpch_q8	--party=2	--port=7655	--storage=column	--unioned_db=tpch_unioned_1500	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 16515072 bytes, current memory size: 16515072 bytes.
Original Tree : 
#12: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32 orders.o_year, #1 shared-float mkt_share) order by: {<0, ASC> }, cost est: 100, output card: 2
    #11: Project<Bit> ((<0, P$0(32) shared-int32>, <1, $2 / $1 shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float mkt_share) order by: {<0, ASC> }, cost est: 7618, output card: 2
        #10: SortMergeAggregate<Bit> (group-by: (0) aggs: (SUM($1) null, SUM($2) null)) : (#0 shared-int32 orders.o_year, #1 shared-float null, #2 shared-float null) order by: {<0, ASC> }, cost est: 138402500, output card: 2
            #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32 orders.o_year, #1 shared-float volume, #2 shared-float selected_volume) order by: {<0, ASC> }, cost est: 532092576, output card: 60175
                #9: Project<Bit> ((<0, P$1(32) shared-int32>, <1, P$3(32) shared-float>, <2, CASE($4, $3, SECRET FLOAT) shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float volume, #2 shared-float selected_volume) order by: {}, cost est: 0, output card: 60175
                    #8: KeyedJoin<Bit> (P$0(16) == P$2(16)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32 orders.o_year, #2 shared-int32(16) lineitem.l_orderkey, #3 shared-float volume, #4 shared-bool nation_check) order by: {}, cost est: 61378500000, output card: 60175
                        #3: Project<Bit> ((<0, P$1(16) shared-int32>, <1, P$3(32) shared-int32>)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32 orders.o_year) order by: {}, cost est: 0, output card: 15000
                            #2: KeyedJoin<Bit> (P$0(11) == P$2(11)) : (#0 shared-int32(11) customer.c_custkey, #1 shared-int32(16) orders.o_orderkey, #2 shared-int32(11) orders.o_custkey, #3 shared-int32 orders.o_year) order by: {<2, ASC> , <0, ASC> }, cost est: 117780000, output card: 15000
                                #0: SecureSqlInput<Bit> ("SELECT c_custkey FROM customer c JOIN nation n1 ON c_nationkey = n_nationkey JOIN region ON r_regionkey = n_regionkey WHERE r_name = 'AFRICA' ORDER BY c_custkey", tuple_count=302) : (#0 shared-int32(11) customer.c_custkey) order by: {<0, ASC> }, cost est: 32318, output card: 302
                                #1: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_orderyear::INT AS o_year, NOT (o_orderdate >= date '1995-01-01' and o_orderdate < date '1996-12-31') dummy_tag FROM orders ORDER BY o_custkey", tuple_count=15000) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-int32 orders.o_year) order by: {<1, ASC> }, cost est: 7699330, output card: 15000
                        #7: Project<Bit> ((<0, P$0(16) shared-int32>, <1, P$2(32) shared-float>, <2, P$4(1) shared-bool>)) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-float volume, #2 shared-bool nation_check) order by: {}, cost est: 0, output card: 60175
                            #6: KeyedJoin<Bit> (P$1(7) == P$3(7)) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float volume, #3 shared-int32(7) supplier.s_suppkey, #4 shared-bool nation_check) order by: {<1, ASC> , <3, ASC> }, cost est: 114332500, output card: 60175
                                #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_suppkey, l_extendedprice * (1.0 - l_discount) AS volume,        CASE            WHEN p_type = 'LARGE ANODIZED STEEL' AND p_partkey = l_partkey THEN FALSE            ELSE TRUE            END AS dummy_tag FROM lineitem LEFT JOIN part ON p_partkey = l_partkey ORDER BY l_suppkey", tuple_count=60175) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float volume) order by: {<1, ASC> }, cost est: 31527870, output card: 60175
                                #5: SecureSqlInput<Bit> ("SELECT s_suppkey, CASE WHEN n_name = 'KENYA' THEN true ELSE false END AS nation_check FROM supplier JOIN nation ON n_nationkey = s_nationkey ORDER BY s_suppkey", tuple_count=100) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-bool nation_check) order by: {<0, ASC> }, cost est: 6308, output card: 100

Total Plans : 576
Cost Optimized Plan : 
#12: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32 orders.o_year, #1 shared-float mkt_share) order by: {<0, ASC> }, cost est: 100, output card: 2
    #11: Project<Bit> ((<0, P$0(32) shared-int32>, <1, $2 / $1 shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float anonymous) order by: {}, cost est: 7618, output card: 2
        #10: NestedLoopAggregate<Bit> (group-by: (0) aggs: (SUM($1) null, SUM($2) null)) : (#0 shared-int32 orders.o_year, #1 shared-float null, #2 shared-float null) order by: {}, cost est: 284507400, output card: 2
            #9: Project<Bit> ((<0, P$1(32) shared-int32>, <1, P$3(32) shared-float>, <2, CASE($4, $3, SECRET FLOAT) shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float volume, #2 shared-float anonymous) order by: {<-1, ASC> }, cost est: 0, output card: 60175
                #8: SortMergeJoin<Bit> (P$0(16) == P$2(16)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32 orders.o_year, #2 shared-int32(16) lineitem.l_orderkey, #3 shared-float volume, #4 shared-bool nation_check) order by: {<-1, ASC> , <0, ASC> , <2, ASC> }, cost est: 1229046304, output card: 60175
                    #3: Project<Bit> ((<0, P$1(16) shared-int32>, <1, P$3(32) shared-int32>)) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32 orders.o_year) order by: {<0, ASC> }, cost est: 0, output card: 15000
                        #2: KeyedJoin<Bit> (P$0(11) == P$2(11)) : (#0 shared-int32(11) customer.c_custkey, #1 shared-int32(16) orders.o_orderkey, #2 shared-int32(11) orders.o_custkey, #3 shared-int32 orders.o_year) order by: {<1, ASC> }, cost est: 117780000, output card: 15000
                            #0: SecureSqlInput<Bit> ("SELECT c_custkey FROM customer c JOIN nation n1 ON c_nationkey = n_nationkey JOIN region ON r_regionkey = n_regionkey WHERE r_name = 'AFRICA' ORDER BY c_custkey", tuple_count=302) : (#0 shared-int32(11) customer.c_custkey) order by: {}, cost est: 0, output card: 302
                            #1: SecureSqlInput<Bit> ("SELECT * FROM (SELECT o_orderkey, o_custkey, o_orderyear::INT AS o_year, NOT (o_orderdate >= date '1995-01-01' and o_orderdate < date '1996-12-31') dummy_tag FROM orders ORDER BY o_custkey) to_sort ORDER BY (1)  ASC ", tuple_count=15000) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-int32 orders.o_year) order by: {<0, ASC> }, cost est: 8219555, output card: 15000
                    #7: Project<Bit> ((<0, P$0(16) shared-int32>, <1, P$2(32) shared-float>, <2, P$4(1) shared-bool>)) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-float volume, #2 shared-bool nation_check) order by: {<0, ASC> }, cost est: 0, output card: 60175
                        #6: KeyedJoin<Bit> (P$1(7) == P$3(7)) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float volume, #3 shared-int32(7) supplier.s_suppkey, #4 shared-bool nation_check) order by: {<0, ASC> }, cost est: 114332500, output card: 60175
                            #4: SecureSqlInput<Bit> ("SELECT * FROM (SELECT l_orderkey, l_suppkey, l_extendedprice * (1.0 - l_discount) AS volume,        CASE            WHEN p_type = 'LARGE ANODIZED STEEL' AND p_partkey = l_partkey THEN FALSE            ELSE TRUE            END AS dummy_tag FROM lineitem LEFT JOIN part ON p_partkey = l_partkey ORDER BY l_suppkey) to_sort ORDER BY (1)  ASC ", tuple_count=60175) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float volume) order by: {<0, ASC> }, cost est: 35827125, output card: 60175
                            #5: SecureSqlInput<Bit> ("SELECT s_suppkey, CASE WHEN n_name = 'KENYA' THEN true ELSE false END AS nation_check FROM supplier JOIN nation ON n_nationkey = s_nationkey ORDER BY s_suppkey", tuple_count=100) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-bool nation_check) order by: {}, cost est: 0, output card: 100

Cost Optimization Time : 0.349675 sec
Operator #0 SecureSqlInput ran for 29.494000 ms, gate count: 0 output cardinality: 302, row width=12
Operator #1 SecureSqlInput ran for 814.825000 ms, gate count: 7873404 output cardinality: 15000, row width=60
Operator #2 KeyedJoin ran for 10360.969000 ms, gate count: 122310000 output cardinality: 15000, row width=71
Operator #3 Project ran for 3.791000 ms, gate count: 0 output cardinality: 15000, row width=49
Operator #4 SecureSqlInput ran for 3478.716000 ms, gate count: 34357160 output cardinality: 60175, row width=56
Operator #5 SecureSqlInput ran for 0.142000 ms, gate count: 0 output cardinality: 100, row width=9
Operator #6 KeyedJoin ran for 11440.007000 ms, gate count: 120350000 output cardinality: 60175, row width=64
Operator #7 Project ran for 29.102000 ms, gate count: 0 output cardinality: 60175, row width=50
Operator #8 SortMergeJoin ran for 102784.979000 ms, gate count: 1487437008 output cardinality: 60175, row width=98
Operator #9 Project ran for 193.106000 ms, gate count: 1925600 output cardinality: 60175, row width=97
Operator #10 NestedLoopAggregate ran for 17885.805000 ms, gate count: 261881600 output cardinality: 2, row width=97
Operator #11 Project ran for 0.588000 ms, gate count: 7616 output cardinality: 2, row width=65
Operator #12 Sort ran for 0.113000 ms, gate count: 100 output cardinality: 2, row width=65
Runtime: 147.599 sec, CPU Time: 119.642 sec, CPU clock ticks: 1.19642e+08, CPU clock ticks per second: 1000000
End-to-end estimated gates: 1.78972e+09. observed gates: 1751251924 gates, relative error (%)=2.19663
[Linux]Peak resident set size: 1086205952 bytes, current memory size: 414806016 bytes.
Initial Memory: 16515072 bytes, Peak Memory After Execution: 1086205952 bytes, Memory Usage: 1069690880 bytes
Bandwidth: 234006 Bps
[       OK ] CostOptimizedTest.cost_optimized_tpch_q8 (147678 ms)
[----------] 1 test from CostOptimizedTest (147678 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (147678 ms total)
[  PASSED  ] 1 test.
Finished *.cost_optimized_tpch_q8.
---------------------------------
Running *.cost_optimized_tpch_q9...
Note: Google Test filter = *.cost_optimized_tpch_q9
[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from CostOptimizedTest
[ RUN      ] CostOptimizedTest.cost_optimized_tpch_q9
Connecting to 126.137.1.10 on ports 7654, 65482 as 2
connected
EMP mode: sh2pc, storage mode: column store
Code version: 0bfea0350f47ede98a64050e75230ef84e54e428
GFlags: --flagfile=	--alice_db=tpch_alice_1500	--alice_host=126.137.1.10	--bob_db=tpch_bob_1500	--ctrl_port=65483	--cutoff=100	--filter=*.cost_optimized_tpch_q9	--party=2	--port=7655	--storage=column	--unioned_db=tpch_unioned_1500	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 16646144 bytes, current memory size: 16646144 bytes.
Operator (2). smj cost : 7224173, nlj cost : 9766400, join type : keyed-sort-merge-join
Operator (6). smj cost : 1685593152, nlj cost : 61378500000, join type : keyed-sort-merge-join
Operator (8). smj cost : 3184803222, nlj cost : 7817936000, join type : keyed-sort-merge-join
Operator (10). sma cost : 93271250, nla cost : 16659448750, agg type : sort-merge-aggregate
Original Tree : 
#11: Sort<Bit> ({<0, ASC> , <1, DESC> }) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 o_year, #2 shared-float sum_profit) order by: {<0, ASC> , <1, DESC> }, cost est: 1385772, output card: 175
    #10: SortMergeAggregate<Bit> (group-by: (0, 1) aggs: (SUM($2) sum_profit)) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 o_year, #2 shared-float sum_profit) order by: {<0, ASC> , <1, DESC> }, cost est: 93271250, output card: 175
        #-1: Sort<Bit> ({<0, ASC> , <1, ASC> }) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 o_year, #2 shared-float amount) order by: {<0, ASC> , <1, ASC> }, cost est: 2027595136, output card: 60175
            #9: Project<Bit> ((<0, P$0(200) shared-varchar>, <1, P$8(32) shared-int32>, <2, $7 - ($3 * $6) shared-float>)) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 o_year, #2 shared-float amount) order by: {<-1, ASC> }, cost est: 274217475, output card: 60175
                #8: SortMergeJoin<Bit> ((P$2(7) == P$5(7)) AND (P$1(11) == P$4(11))) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32(11) partsupp.ps_partkey, #2 shared-int32(7) partsupp.ps_suppkey, #3 shared-float partsupp.ps_supplycost, #4 shared-int32(11) lineitem.l_partkey, #5 shared-int32(7) lineitem.l_suppkey, #6 shared-float l_quantity, #7 shared-float volume, #8 shared-int32 o_year) order by: {<-1, ASC> , <2, ASC> , <5, ASC> , <1, ASC> , <4, ASC> }, cost est: 3184803222, output card: 60175
                    #3: Project<Bit> ((<0, P$1(200) shared-varchar>, <1, P$2(11) shared-int32>, <2, P$3(7) shared-int32>, <3, P$4(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32(11) partsupp.ps_partkey, #2 shared-int32(7) partsupp.ps_suppkey, #3 shared-float partsupp.ps_supplycost) order by: {<-1, ASC> }, cost est: 0, output card: 448
                        #2: SortMergeJoin<Bit> (P$0(7) == P$3(7)) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(11) partsupp.ps_partkey, #3 shared-int32(7) partsupp.ps_suppkey, #4 shared-float partsupp.ps_supplycost) order by: {<-1, ASC> , <0, ASC> , <3, ASC> }, cost est: 7224173, output card: 448
                            #0: SecureSqlInput<Bit> ("SELECT s_suppkey, n_name FROM supplier JOIN nation ON s_nationkey = n_nationkey ORDER BY s_suppkey", tuple_count=100) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-varchar(25) nation.n_name) order by: {<0, ASC> }, cost est: 72376, output card: 100
                            #1: SecureSqlInput<Bit> ("SELECT ps_partkey, ps_suppkey, ps_supplycost FROM partsupp JOIN part ON ps_partkey = p_partkey WHERE p_name LIKE '%yellow%' ORDER BY ps_suppkey, ps_partkey", tuple_count=448) : (#0 shared-int32(11) partsupp.ps_partkey, #1 shared-int32(7) partsupp.ps_suppkey, #2 shared-float partsupp.ps_supplycost) order by: {<1, ASC> , <0, ASC> }, cost est: 147900, output card: 448
                    #7: Project<Bit> ((<0, P$1(11) shared-int32>, <1, P$2(7) shared-int32>, <2, P$3(32) shared-float>, <3, P$4(32) shared-float>, <4, P$5(32) shared-int32>)) : (#0 shared-int32(11) lineitem.l_partkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float l_quantity, #3 shared-float volume, #4 shared-int32 o_year) order by: {<-1, ASC> }, cost est: 0, output card: 60175
                        #6: SortMergeJoin<Bit> (P$0(16) == P$6(16)) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(11) lineitem.l_partkey, #2 shared-int32(7) lineitem.l_suppkey, #3 shared-float l_quantity, #4 shared-float volume, #5 shared-int32 o_year, #6 shared-int32(16) orders.o_orderkey) order by: {<-1, ASC> , <0, ASC> , <6, ASC> }, cost est: 1685593152, output card: 60175
                            #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_partkey, l_suppkey, l_quantity::float4, l_extendedprice * (1.0 - l_discount) AS volume FROM lineitem ORDER BY l_orderkey, l_suppkey, l_partkey", tuple_count=60175) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(11) lineitem.l_partkey, #2 shared-int32(7) lineitem.l_suppkey, #3 shared-float l_quantity, #4 shared-float volume) order by: {<0, ASC> , <2, ASC> , <1, ASC> }, cost est: 67832690, output card: 60175
                            #5: SecureSqlInput<Bit> ("SELECT EXTRACT('year' FROM o_orderdate)::INT AS o_year, o_orderkey FROM orders ORDER BY o_orderkey", tuple_count=15000) : (#0 shared-int32 o_year, #1 shared-int32(16) orders.o_orderkey) order by: {<1, ASC> }, cost est: 7075060, output card: 15000

Total Plans : 1536
Cost Optimized Plan : 
#10: SortMergeAggregate<Bit> (group-by: (0, 1) aggs: (SUM($2) sum_profit)) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32 o_year, #2 shared-float sum_profit) order by: {<0, ASC> , <1, DESC> }, cost est: 93271250, output card: 175
    #-1: Sort<Bit> ({<0, ASC> , <1, DESC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32 o_year, #2 shared-float anonymous) order by: {<0, ASC> , <1, DESC> }, cost est: 2027595136, output card: 60175
        #9: Project<Bit> ((<0, P$0(200) shared-varchar>, <1, P$8(32) shared-int32>, <2, $7 - ($3 * $6) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32 o_year, #2 shared-float anonymous) order by: {<-1, ASC> }, cost est: 274217475, output card: 60175
            #8: SortMergeJoin<Bit> ((P$2(7) == P$5(7)) AND (P$1(11) == P$4(11))) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32(11) partsupp.ps_partkey, #2 shared-int32(7) partsupp.ps_suppkey, #3 shared-float partsupp.ps_supplycost, #4 shared-int32(11) lineitem.l_partkey, #5 shared-int32(7) lineitem.l_suppkey, #6 shared-float l_quantity, #7 shared-float volume, #8 shared-int32 o_year) order by: {<-1, ASC> , <2, ASC> , <5, ASC> , <1, ASC> , <4, ASC> }, cost est: 2123716534, output card: 60175
                #3: Project<Bit> ((<0, P$1(200) shared-varchar>, <1, P$2(11) shared-int32>, <2, P$3(7) shared-int32>, <3, P$4(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32(11) partsupp.ps_partkey, #2 shared-int32(7) partsupp.ps_suppkey, #3 shared-float partsupp.ps_supplycost) order by: {<2, ASC> , <1, ASC> }, cost est: 0, output card: 448
                    #2: KeyedJoin<Bit> (P$0(7) == P$3(7)) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32(11) partsupp.ps_partkey, #3 shared-int32(7) partsupp.ps_suppkey, #4 shared-float partsupp.ps_supplycost) order by: {<3, ASC> , <2, ASC> }, cost est: 9766400, output card: 448
                        #0: SecureSqlInput<Bit> ("SELECT s_suppkey, n_name FROM supplier JOIN nation ON s_nationkey = n_nationkey ORDER BY s_suppkey", tuple_count=100) : (#0 shared-int32(7) supplier.s_suppkey, #1 shared-varchar(25) nation.n_name) order by: {}, cost est: 0, output card: 100
                        #1: SecureSqlInput<Bit> ("SELECT ps_partkey, ps_suppkey, ps_supplycost FROM partsupp JOIN part ON ps_partkey = p_partkey WHERE p_name LIKE '%yellow%' ORDER BY ps_suppkey, ps_partkey", tuple_count=448) : (#0 shared-int32(11) partsupp.ps_partkey, #1 shared-int32(7) partsupp.ps_suppkey, #2 shared-float partsupp.ps_supplycost) order by: {<1, ASC> , <0, ASC> }, cost est: 147900, output card: 448
                #-1: Sort<Bit> ({<1, ASC> , <0, ASC> }) : (#0 shared-int32(11) lineitem.l_partkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float l_quantity, #3 shared-float volume, #4 shared-int32 o_year) order by: {<1, ASC> , <0, ASC> }, cost est: 560309568, output card: 60175
                    #7: Project<Bit> ((<0, P$1(11) shared-int32>, <1, P$2(7) shared-int32>, <2, P$3(32) shared-float>, <3, P$4(32) shared-float>, <4, P$5(32) shared-int32>)) : (#0 shared-int32(11) lineitem.l_partkey, #1 shared-int32(7) lineitem.l_suppkey, #2 shared-float l_quantity, #3 shared-float volume, #4 shared-int32 o_year) order by: {<-1, ASC> }, cost est: 0, output card: 60175
                        #6: SortMergeJoin<Bit> (P$0(16) == P$6(16)) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(11) lineitem.l_partkey, #2 shared-int32(7) lineitem.l_suppkey, #3 shared-float l_quantity, #4 shared-float volume, #5 shared-int32 o_year, #6 shared-int32(16) orders.o_orderkey) order by: {<-1, ASC> , <0, ASC> , <6, ASC> }, cost est: 1685593152, output card: 60175
                            #4: SecureSqlInput<Bit> ("SELECT * FROM (SELECT l_orderkey, l_partkey, l_suppkey, l_quantity::float4, l_extendedprice * (1.0 - l_discount) AS volume FROM lineitem ORDER BY l_orderkey, l_suppkey, l_partkey) to_sort ORDER BY (1)  ASC ", tuple_count=60175) : (#0 shared-int32(16) lineitem.l_orderkey, #1 shared-int32(11) lineitem.l_partkey, #2 shared-int32(7) lineitem.l_suppkey, #3 shared-float l_quantity, #4 shared-float volume) order by: {<0, ASC> }, cost est: 56368010, output card: 60175
                            #5: SecureSqlInput<Bit> ("SELECT EXTRACT('year' FROM o_orderdate)::INT AS o_year, o_orderkey FROM orders ORDER BY o_orderkey", tuple_count=15000) : (#0 shared-int32 o_year, #1 shared-int32(16) orders.o_orderkey) order by: {<1, ASC> }, cost est: 7075060, output card: 15000

Cost Optimization Time : 0.992849 sec
Operator #0 SecureSqlInput ran for 72.191000 ms, gate count: 0 output cardinality: 100, row width=208
Operator #1 SecureSqlInput ran for 18.060000 ms, gate count: 134400 output cardinality: 448, row width=51
Operator #2 KeyedJoin ran for 672.841000 ms, gate count: 9811200 output cardinality: 448, row width=258
Operator #3 Project ran for 1.469000 ms, gate count: 0 output cardinality: 448, row width=251
Operator #4 SecureSqlInput ran for 5264.206000 ms, gate count: 54594936 output cardinality: 60175, row width=99
Operator #5 SecureSqlInput ran for 679.326000 ms, gate count: 6748632 output cardinality: 15000, row width=49
Operator #6 SortMergeJoin ran for 160519.833000 ms, gate count: 1874463404 output cardinality: 60175, row width=147
Operator #7 Project ran for 28.771000 ms, gate count: 0 output cardinality: 60175, row width=115
Operator #-1 Sort ran for 47232.579000 ms, gate count: 527757660 output cardinality: 60175, row width=115
Operator #8 SortMergeJoin ran for 255465.171000 ms, gate count: 5478847864 output cardinality: 60175, row width=365
Operator #9 Project ran for 21217.626000 ms, gate count: 274217476 output cardinality: 60175, row width=265
Operator #-1 Sort ran for 168467.480000 ms, gate count: 1965098872 output cardinality: 60175, row width=265
Operator #10 SortMergeAggregate ran for 6817.705000 ms, gate count: 91464512 output cardinality: 60175, row width=265
Runtime: 667.72 sec, CPU Time: 513.296 sec, CPU clock ticks: 5.13296e+08, CPU clock ticks per second: 1000000
End-to-end estimated gates: 6.83806e+09. observed gates: 7809628724 gates, relative error (%)=12.4406
[Linux]Peak resident set size: 3250438144 bytes, current memory size: 1532530688 bytes.
Initial Memory: 16646144 bytes, Peak Memory After Execution: 3250438144 bytes, Memory Usage: 3233792000 bytes
Bandwidth: 81347.7 Bps
[       OK ] CostOptimizedTest.cost_optimized_tpch_q9 (667813 ms)
[----------] 1 test from CostOptimizedTest (667813 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (667813 ms total)
[  PASSED  ] 1 test.
Finished *.cost_optimized_tpch_q9.
---------------------------------
Running *.cost_optimized_tpch_q18...
Note: Google Test filter = *.cost_optimized_tpch_q18
[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from CostOptimizedTest
[ RUN      ] CostOptimizedTest.cost_optimized_tpch_q18
Connecting to 126.137.1.10 on ports 7654, 65482 as 2
connected
EMP mode: sh2pc, storage mode: column store
Code version: 0bfea0350f47ede98a64050e75230ef84e54e428
GFlags: --flagfile=	--alice_db=tpch_alice_1500	--alice_host=126.137.1.10	--bob_db=tpch_bob_1500	--ctrl_port=65483	--cutoff=100	--filter=*.cost_optimized_tpch_q18	--party=2	--port=7655	--storage=column	--unioned_db=tpch_unioned_1500	--validation=false	--log_level=2	--logfile=	

[Linux]Peak resident set size: 16515072 bytes, current memory size: 16515072 bytes.
Operator (9). smj cost : 610841708, nlj cost : 5085000000, join type : keyed-sort-merge-join
Original Tree : 
#11: Sort<Bit> ({<-1, ASC> , <4, DESC> , <3, ASC> }) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32(11) customer.c_custkey, #2 shared-int32(16) order_keys.o_orderkey, #3 shared-int64(28) orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float sum_qty) order by: {<-1, ASC> , <4, DESC> , <3, ASC> }, cost est: 495150, output card: 100
    #10: Project<Bit> ((<0, P$6(200) shared-varchar>, <1, P$5(11) shared-int32>, <2, P$0(16) shared-int32>, <3, P$3(28) shared-int64>, <4, P$2(32) shared-float>, <5, P$4(32) shared-float>)) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32(11) customer.c_custkey, #2 shared-int32(16) order_keys.o_orderkey, #3 shared-int64(28) orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float sum_qty) order by: {<-1, ASC> }, cost est: 0, output card: 15000
        #9: SortMergeJoin<Bit> (P$1(11) == P$5(11)) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate, #4 shared-float sum_qty, #5 shared-int32(11) customer.c_custkey, #6 shared-varchar(25) customer.c_name) order by: {<-1, ASC> , <1, ASC> , <5, ASC> }, cost est: 610841708, output card: 15000
            #7: Project<Bit> ((<0, P$0(16) shared-int32>, <1, P$3(11) shared-int32>, <2, P$4(32) shared-float>, <3, P$5(28) shared-int64>, <4, P$1(32) shared-float>)) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate, #4 shared-float sum_qty) order by: {<0, ASC> }, cost est: 0, output card: 15000
                #6: MergeJoin<Bit> (no-op) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-float sum_qty, #2 shared-int32(16) orders.o_orderkey, #3 shared-int32(11) orders.o_custkey, #4 shared-float orders.o_totalprice, #5 shared-int64(28) orders.o_orderdate) order by: {<0, ASC> }, cost est: 45000, output card: 15000
                    #4: Filter<Bit> (P$1(32) > SECRET FLOAT) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 3195000, output card: 15000
                        #3: Project<Bit> ((<0, P$0(16) shared-int32>, <1, $1 + $3 shared-float>)) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 14790000, output card: 15000
                            #2: MergeJoin<Bit> (no-op) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-float sum_qty, #2 shared-int32(16) order_keys.o_orderkey, #3 shared-float sum_qty) order by: {<0, ASC> }, cost est: 45000, output card: 15000
                                #0: SecureSqlInput<Bit> ("WITH all_keys AS (SELECT o_orderkey  FROM order_keys), sum_qtys AS (SELECT l_orderkey, sum(l_quantity) as sum_qty, false AS dummy_tag FROM lineitem GROUP BY l_orderkey ORDER BY l_orderkey) SELECT o_orderkey, COALESCE(sum_qty, 0.0) sum_qty, COALESCE(dummy_tag, true) dummy_tag FROM all_keys LEFT JOIN sum_qtys ON l_orderkey = o_orderkey ORDER BY o_orderkey ", tuple_count=15000) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 0, output card: 15000
                                #1: SecureSqlInput<Bit> ("WITH all_keys AS (SELECT o_orderkey  FROM order_keys), sum_qtys AS (SELECT l_orderkey, sum(l_quantity) as sum_qty, false AS dummy_tag FROM lineitem GROUP BY l_orderkey ORDER BY l_orderkey) SELECT o_orderkey, COALESCE(sum_qty, 0.0) sum_qty, COALESCE(dummy_tag, true) dummy_tag FROM all_keys LEFT JOIN sum_qtys ON l_orderkey = o_orderkey ORDER BY o_orderkey ", tuple_count=15000) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 0, output card: 15000
                    #5: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_totalprice, o_orderdate, false dummy_tag FROM orders ORDER BY o_orderkey", tuple_count=15000) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate) order by: {<0, ASC> }, cost est: 11132815, output card: 15000
            #8: SecureSqlInput<Bit> ("SELECT c_custkey, c_name FROM customer ORDER BY c_custkey", tuple_count=1500) : (#0 shared-int32(11) customer.c_custkey, #1 shared-varchar(25) customer.c_name) order by: {<0, ASC> }, cost est: 1788338, output card: 1500

Total Plans : 4
Cost Optimized Plan : 
#11: Sort<Bit> ({<-1, ASC> , <4, DESC> , <3, ASC> }) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32(11) customer.c_custkey, #2 shared-int32(16) order_keys.o_orderkey, #3 shared-int64(28) orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float sum_qty) order by: {<-1, ASC> , <4, DESC> , <3, ASC> }, cost est: 495150, output card: 100
    #10: Project<Bit> ((<0, P$6(200) shared-varchar>, <1, P$5(11) shared-int32>, <2, P$0(16) shared-int32>, <3, P$3(28) shared-int64>, <4, P$2(32) shared-float>, <5, P$4(32) shared-float>)) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32(11) customer.c_custkey, #2 shared-int32(16) order_keys.o_orderkey, #3 shared-int64(28) orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float sum_qty) order by: {<-1, ASC> }, cost est: 0, output card: 15000
        #9: SortMergeJoin<Bit> (P$1(11) == P$5(11)) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate, #4 shared-float sum_qty, #5 shared-int32(11) customer.c_custkey, #6 shared-varchar(25) customer.c_name) order by: {<-1, ASC> , <1, ASC> , <5, ASC> }, cost est: 425878230, output card: 15000
            #-1: Sort<Bit> ({<1, ASC> }) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate, #4 shared-float sum_qty) order by: {<1, ASC> }, cost est: 103677704, output card: 15000
                #7: Project<Bit> ((<0, P$0(16) shared-int32>, <1, P$3(11) shared-int32>, <2, P$4(32) shared-float>, <3, P$5(28) shared-int64>, <4, P$1(32) shared-float>)) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate, #4 shared-float sum_qty) order by: {<0, ASC> }, cost est: 0, output card: 15000
                    #6: MergeJoin<Bit> (no-op) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-float sum_qty, #2 shared-int32(16) orders.o_orderkey, #3 shared-int32(11) orders.o_custkey, #4 shared-float orders.o_totalprice, #5 shared-int64(28) orders.o_orderdate) order by: {<0, ASC> }, cost est: 45000, output card: 15000
                        #4: Filter<Bit> (P$1(32) > SECRET FLOAT) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 3195000, output card: 15000
                            #3: Project<Bit> ((<0, P$0(16) shared-int32>, <1, $1 + $3 shared-float>)) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-float anonymous) order by: {<0, ASC> }, cost est: 14790000, output card: 15000
                                #2: MergeJoin<Bit> (no-op) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-float sum_qty, #2 shared-int32(16) order_keys.o_orderkey, #3 shared-float sum_qty) order by: {<0, ASC> }, cost est: 45000, output card: 15000
                                    #0: SecureSqlInput<Bit> ("WITH all_keys AS (SELECT o_orderkey  FROM order_keys), sum_qtys AS (SELECT l_orderkey, sum(l_quantity) as sum_qty, false AS dummy_tag FROM lineitem GROUP BY l_orderkey ORDER BY l_orderkey) SELECT o_orderkey, COALESCE(sum_qty, 0.0) sum_qty, COALESCE(dummy_tag, true) dummy_tag FROM all_keys LEFT JOIN sum_qtys ON l_orderkey = o_orderkey ORDER BY o_orderkey ", tuple_count=15000) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 0, output card: 15000
                                    #1: SecureSqlInput<Bit> ("WITH all_keys AS (SELECT o_orderkey  FROM order_keys), sum_qtys AS (SELECT l_orderkey, sum(l_quantity) as sum_qty, false AS dummy_tag FROM lineitem GROUP BY l_orderkey ORDER BY l_orderkey) SELECT o_orderkey, COALESCE(sum_qty, 0.0) sum_qty, COALESCE(dummy_tag, true) dummy_tag FROM all_keys LEFT JOIN sum_qtys ON l_orderkey = o_orderkey ORDER BY o_orderkey ", tuple_count=15000) : (#0 shared-int32(16) order_keys.o_orderkey, #1 shared-float sum_qty) order by: {<0, ASC> }, cost est: 0, output card: 15000
                        #5: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_totalprice, o_orderdate, false dummy_tag FROM orders ORDER BY o_orderkey", tuple_count=15000) : (#0 shared-int32(16) orders.o_orderkey, #1 shared-int32(11) orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64(28) orders.o_orderdate) order by: {<0, ASC> }, cost est: 11132815, output card: 15000
            #8: SecureSqlInput<Bit> ("SELECT c_custkey, c_name FROM customer ORDER BY c_custkey", tuple_count=1500) : (#0 shared-int32(11) customer.c_custkey, #1 shared-varchar(25) customer.c_name) order by: {<0, ASC> }, cost est: 1788338, output card: 1500

Cost Optimization Time : 0.002776 sec
Operator #0 SecureSqlInput ran for 28.177000 ms, gate count: 0 output cardinality: 15000, row width=49
Operator #1 SecureSqlInput ran for 47.363000 ms, gate count: 0 output cardinality: 15000, row width=49
Operator #2 MergeJoin ran for 28.936000 ms, gate count: 30000 output cardinality: 15000, row width=97
Operator #3 Project ran for 908.161000 ms, gate count: 14790000 output cardinality: 15000, row width=49
Operator #4 Filter ran for 210.325000 ms, gate count: 3210000 output cardinality: 15000, row width=49
Operator #5 SecureSqlInput ran for 1056.582000 ms, gate count: 10736460 output cardinality: 15000, row width=88
Operator #6 MergeJoin ran for 32.794000 ms, gate count: 30000 output cardinality: 15000, row width=136
Operator #7 Project ran for 7.678000 ms, gate count: 0 output cardinality: 15000, row width=120
Operator #-1 Sort ran for 7588.383000 ms, gate count: 99497376 output cardinality: 15000, row width=120
Operator #8 SecureSqlInput ran for 150.841000 ms, gate count: 1716736 output cardinality: 1500, row width=212
Operator #9 SortMergeJoin ran for 42766.611000 ms, gate count: 687183188 output cardinality: 15000, row width=331
Operator #10 Project ran for 59.947000 ms, gate count: 0 output cardinality: 15000, row width=320
Operator #11 Sort ran for 22054.789000 ms, gate count: 290583144 output cardinality: 100, row width=320
Runtime: 75.1876 sec, CPU Time: 58.4965 sec, CPU clock ticks: 5.84965e+07, CPU clock ticks per second: 1000000
End-to-end estimated gates: 5.61047e+08. observed gates: 977766332 gates, relative error (%)=42.6195
[Linux]Peak resident set size: 417718272 bytes, current memory size: 221085696 bytes.
Initial Memory: 16515072 bytes, Peak Memory After Execution: 417718272 bytes, Memory Usage: 401203200 bytes
Bandwidth: 374304 Bps
[       OK ] CostOptimizedTest.cost_optimized_tpch_q18 (75359 ms)
[----------] 1 test from CostOptimizedTest (75359 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (75359 ms total)
[  PASSED  ] 1 test.
Finished *.cost_optimized_tpch_q18.
---------------------------------
All tests completed on Fri Oct 25 16:41:39 UTC 2024
