[==========] Running 5 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 5 tests from BaselineComparisonTest
[ RUN      ] BaselineComparisonTest.rewrite_rules_tpch_q3
Connecting to 127.0.0.1 on ports 7654, 65482 as 1
connected
EMP mode: sh2pc, storage mode: column store
Code version: 6f573099aa4c9ebaaafa878d9db0f6ac19a07c93
GFlags: --flagfile=	--alice_db=tpch_alice_10	--alice_host=127.0.0.1	--bob_db=tpch_bob_10	--ctrl_port=65483	--cutoff=100	--filter=*	--party=1	--port=7655	--storage=column	--unioned_db=tpch_unioned_10	--validation=true	--log_level=2	--logfile=	

[Linux]Peak resident set size: 16252928 bytes, current memory size: 16252928 bytes.
#9: Project<Bit> ((<0, P$0(32) shared-int32>, <1, P$3(32) shared-float>, <2, P$1(64) shared-int64>, <3, P$2(32) shared-int32>)) : (#0 shared-int32 orders.o_orderkey, #1 shared-float revenue, #2 shared-int64 orders.o_orderdate, #3 shared-int32 orders.o_shippriority) order by: {<-1, ASC> , <1, DESC> , <2, ASC> }, cost est: 0, output card: 10
    #8: Sort<Bit> ({<-1, ASC> , <3, DESC> , <1, ASC> }) : (#0 shared-int32 orders.o_orderkey, #1 shared-int64 orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<-1, ASC> , <3, DESC> , <1, ASC> }, cost est: 9583, output card: 10
        #7: SortMergeAggregate<Bit> (group-by: (0, 1, 2) aggs: (SUM($3) revenue)) : (#0 shared-int32 orders.o_orderkey, #1 shared-int64 orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<0, ASC> }, cost est: 390092560, output card: 290680
            #-1: Sort<Bit> ({<0, ASC> , <1, ASC> , <2, ASC> }) : (#0 shared-int32 orders.o_orderkey, #1 shared-int64 orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {<0, ASC> , <1, ASC> , <2, ASC> }, cost est: 7526162944, output card: 290680
                #6: Project<Bit> ((<0, P$0(32) shared-int32>, <1, P$1(64) shared-int64>, <2, P$2(32) shared-int32>, <3, P$4(32) shared-float>)) : (#0 shared-int32 orders.o_orderkey, #1 shared-int64 orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-float revenue) order by: {}, cost est: 0, output card: 290680
                    #5: BasicJoin<Bit> ($0 == $3) : (#0 shared-int32 orders.o_orderkey, #1 shared-int64 orders.o_orderdate, #2 shared-int32 orders.o_shippriority, #3 shared-int32 lineitem.l_orderkey, #4 shared-float revenue) order by: {}, cost est: 10173800, output card: 290680
                        #3: Project<Bit> ((<0, P$0(32) shared-int32>, <1, P$2(64) shared-int64>, <2, P$3(32) shared-int32>)) : (#0 shared-int32 orders.o_orderkey, #1 shared-int64 orders.o_orderdate, #2 shared-int32 orders.o_shippriority) order by: {}, cost est: 0, output card: 860
                            #2: BasicJoin<Bit> ($1 == $4) : (#0 shared-int32 orders.o_orderkey, #1 shared-int32 orders.o_custkey, #2 shared-int64 orders.o_orderdate, #3 shared-int32 orders.o_shippriority, #4 shared-int32 customer.c_custkey) order by: {}, cost est: 30100, output card: 860
                                #0: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_orderdate, o_shippriority, NOT o_orderdate < DATE '1995-03-25' AS dummy_tag FROM orders ORDER BY o_orderkey, o_orderdate, o_shippriority", tuple_count=86) : (#0 shared-int32 orders.o_orderkey, #1 shared-int32 orders.o_custkey, #2 shared-int64 orders.o_orderdate, #3 shared-int32 orders.o_shippriority) order by: {}, cost est: 0, output card: 86
                                #1: SecureSqlInput<Bit> ("SELECT c_custkey, NOT c_mktsegment = 'HOUSEHOLD' AS dummy_tag FROM customer ORDER BY c_custkey", tuple_count=10) : (#0 shared-int32 customer.c_custkey) order by: {}, cost est: 0, output card: 10
                        #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_extendedprice * (1 - l_discount) AS revenue, NOT l_shipdate > DATE '1995-03-25' AS dummy_tag FROM lineitem ORDER BY l_orderkey", tuple_count=338) : (#0 shared-int32 lineitem.l_orderkey, #1 shared-float revenue) order by: {}, cost est: 0, output card: 338

Operator #0 SecureSqlInput ran for 0.630000 ms, gate count: 0 output cardinality: 86, row width=161
Operator #1 SecureSqlInput ran for 0.135000 ms, gate count: 0 output cardinality: 10, row width=33
Operator #2 BasicJoin ran for 4.151000 ms, gate count: 29240 output cardinality: 860, row width=193
Operator #3 Project ran for 1.044000 ms, gate count: 0 output cardinality: 860, row width=129
Operator #4 SecureSqlInput ran for 5.243000 ms, gate count: 0 output cardinality: 338, row width=65
Operator #5 BasicJoin ran for 1852.846000 ms, gate count: 9883120 output cardinality: 290680, row width=193
Operator #6 Project ran for 740.272000 ms, gate count: 0 output cardinality: 290680, row width=161
Operator #-1 Sort ran for 614978.881000 ms, gate count: 7127367120 output cardinality: 290680, row width=161
Operator #7 SortMergeAggregate ran for 32637.941000 ms, gate count: 381661560 output cardinality: 290680, row width=161
Operator #8 Sort ran for 541289.796000 ms, gate count: 6426678960 output cardinality: 10, row width=161
Operator #9 Project ran for 0.034000 ms, gate count: 0 output cardinality: 10, row width=161
Runtime: 1191.65 sec, CPU Time: 1181.43 sec, CPU clock ticks: 1.18143e+09, CPU clock ticks per second: 1000000
End-to-end estimated gates: 7.92647e+09. observed gates: 13945620000 gates, relative error (%)=43.1616
[Linux]Peak resident set size: 3175006208 bytes, current memory size: 17117184 bytes.
Initial Memory: 16252928 bytes, Peak Memory After Execution: 3175006208 bytes, Memory Usage: 3158753280 bytes
Bandwidth: 3.74489e+08 Bps
[       OK ] BaselineComparisonTest.rewrite_rules_tpch_q3 (1193720 ms)
[ RUN      ] BaselineComparisonTest.rewrite_rules_tpch_q5
Connecting to 127.0.0.1 on ports 7655, 65483 as 1
connected
EMP mode: sh2pc, storage mode: column store
Code version: 6f573099aa4c9ebaaafa878d9db0f6ac19a07c93
GFlags: --flagfile=	--alice_db=tpch_alice_10	--alice_host=127.0.0.1	--bob_db=tpch_bob_10	--ctrl_port=65484	--cutoff=100	--filter=*	--party=1	--port=7656	--storage=column	--unioned_db=tpch_unioned_10	--validation=true	--log_level=2	--logfile=	

[Linux]Peak resident set size: 3175006208 bytes, current memory size: 17063936 bytes.
#11: Sort<Bit> ({<1, DESC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<1, DESC> }, cost est: 18446744073709551615, output card: 0
    #10: SortMergeAggregate<Bit> (group-by: (0) aggs: (SUM($1) revenue)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 0, output card: 0
        #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {<0, ASC> }, cost est: 18446744073709551615, output card: 0
            #9: Project<Bit> ((<0, P$5(200) shared-varchar>, <1, P$1(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-float revenue) order by: {}, cost est: 0, output card: 0
                #8: BasicJoin<Bit> (($0 == $4) AND ($2 == $3)) : (#0 shared-int32 supplier.c_nationkey, #1 shared-float revenue, #2 shared-int32 orders.o_custkey, #3 shared-int32 customer.c_custkey, #4 shared-int32 customer.c_nationkey, #5 shared-varchar(25) nation.n_name) order by: {}, cost est: 0, output card: 0
                    #6: Project<Bit> ((<0, P$0(32) shared-int32>, <1, P$2(32) shared-float>, <2, P$4(32) shared-int32>)) : (#0 shared-int32 supplier.c_nationkey, #1 shared-float revenue, #2 shared-int32 orders.o_custkey) order by: {}, cost est: 0, output card: 29068
                        #5: BasicJoin<Bit> ($1 == $3) : (#0 shared-int32 supplier.s_nationkey, #1 shared-int32 lineitem.l_orderkey, #2 shared-float revenue, #3 shared-int32 orders.o_orderkey, #4 shared-int32 orders.o_custkey) order by: {}, cost est: 1017380, output card: 29068
                            #3: Project<Bit> ((<0, P$1(32) shared-int32>, <1, P$2(32) shared-int32>, <2, P$4(32) shared-float>)) : (#0 shared-int32 supplier.s_nationkey, #1 shared-int32 lineitem.l_orderkey, #2 shared-float revenue) order by: {}, cost est: 0, output card: 338
                                #2: BasicJoin<Bit> ($0 == $3) : (#0 shared-int32 supplier.s_suppkey, #1 shared-int32 supplier.s_nationkey, #2 shared-int32 lineitem.l_orderkey, #3 shared-int32 lineitem.l_suppkey, #4 shared-float revenue) order by: {}, cost est: 11830, output card: 338
                                    #0: SecureSqlInput<Bit> ("SELECT s_suppkey, s_nationkey FROM supplier JOIN nation ON s_nationkey = n_nationkey JOIN region ON n_regionkey = r_regionkey WHERE r_name = 'EUROPE' ORDER BY s_suppkey", tuple_count=1) : (#0 shared-int32 supplier.s_suppkey, #1 shared-int32 supplier.s_nationkey) order by: {}, cost est: 0, output card: 1
                                    #1: SecureSqlInput<Bit> ("SELECT l_orderkey, l_suppkey, l_extendedprice * (1 - l_discount) AS revenue FROM lineitem ORDER BY l_orderkey", tuple_count=338) : (#0 shared-int32 lineitem.l_orderkey, #1 shared-int32 lineitem.l_suppkey, #2 shared-float revenue) order by: {}, cost est: 0, output card: 338
                            #4: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, NOT (o_orderdate >= DATE '1993-01-01' AND o_orderdate < DATE '1994-01-01') AS dummy_tag FROM orders ORDER BY o_orderkey, o_custkey, o_orderdate", tuple_count=86) : (#0 shared-int32 orders.o_orderkey, #1 shared-int32 orders.o_custkey) order by: {}, cost est: 0, output card: 86
                    #7: SecureSqlInput<Bit> ("SELECT t2.c_custkey, t2.c_nationkey, t1.n_name FROM (SELECT r_regionkey, r_name FROM region WHERE r_name = 'EUROPE') AS t0 INNER JOIN (SELECT n_nationkey, n_name, n_regionkey FROM nation) AS t1 ON t0.r_regionkey = t1.n_regionkey INNER JOIN (SELECT c_custkey, c_nationkey FROM customer) AS t2 ON t1.n_nationkey = t2.c_nationkey ORDER BY t2.c_custkey ASC", tuple_count=0) : (#0 shared-int32 customer.c_custkey, #1 shared-int32 customer.c_nationkey, #2 shared-varchar(25) nation.n_name) order by: {}, cost est: 0, output card: 0

Operator #0 SecureSqlInput ran for 0.162000 ms, gate count: 0 output cardinality: 1, row width=65
Operator #1 SecureSqlInput ran for 1.369000 ms, gate count: 0 output cardinality: 338, row width=97
Operator #2 BasicJoin ran for 1.320000 ms, gate count: 11492 output cardinality: 338, row width=161
Operator #3 Project ran for 0.061000 ms, gate count: 0 output cardinality: 338, row width=97
Operator #4 SecureSqlInput ran for 2.104000 ms, gate count: 0 output cardinality: 86, row width=65
Operator #5 BasicJoin ran for 152.570000 ms, gate count: 988312 output cardinality: 29068, row width=161
Operator #6 Project ran for 29.084000 ms, gate count: 0 output cardinality: 29068, row width=97
Operator #7 SecureSqlInput ran for 29.516000 ms, gate count: 0 output cardinality: 0, row width=265
Operator #8 BasicJoin ran for 0.151000 ms, gate count: 0 output cardinality: 0, row width=361
unknown file: Failure
C++ exception with description "map::at" thrown in the test body.
[  FAILED  ] BaselineComparisonTest.rewrite_rules_tpch_q5 (401 ms)
[ RUN      ] BaselineComparisonTest.rewrite_rules_tpch_q8
Connecting to 127.0.0.1 on ports 7656, 65484 as 1
connected
EMP mode: sh2pc, storage mode: column store
Code version: 6f573099aa4c9ebaaafa878d9db0f6ac19a07c93
GFlags: --flagfile=	--alice_db=tpch_alice_10	--alice_host=127.0.0.1	--bob_db=tpch_bob_10	--ctrl_port=65485	--cutoff=100	--filter=*	--party=1	--port=7657	--storage=column	--unioned_db=tpch_unioned_10	--validation=true	--log_level=2	--logfile=	

[Linux]Peak resident set size: 3175006208 bytes, current memory size: 19017728 bytes.
#12: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32 orders.o_year, #1 shared-float mkt_share) order by: {<0, ASC> }, cost est: 5607741440, output card: 581360
    #11: Project<Bit> ((<0, P$0(32) shared-int32>, <1, $2 / $1 shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float mkt_share) order by: {<0, ASC> }, cost est: 2214400240, output card: 581360
        #10: SortMergeAggregate<Bit> (group-by: (0) aggs: (SUM($1) null, SUM($2) null)) : (#0 shared-int32 orders.o_year, #1 shared-float null, #2 shared-float null) order by: {<0, ASC> }, cost est: 1337128000, output card: 581360
            #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32 orders.o_year, #1 shared-float volume, #2 shared-float selected_volume) order by: {<0, ASC> }, cost est: 7402218496, output card: 581360
                #9: Project<Bit> ((<0, P$0(32) shared-int32>, <1, P$2(32) shared-float>, <2, CASE($4, $2, SECRET FLOAT) shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-float volume, #2 shared-float selected_volume) order by: {}, cost est: 0, output card: 581360
                    #8: BasicJoin<Bit> ($1 == $3) : (#0 shared-int32 orders.o_year, #1 shared-int32 lineitem.l_suppkey, #2 shared-float volume, #3 shared-int32 supplier.s_suppkey, #4 shared-bool nation_check) order by: {}, cost est: 20347600, output card: 581360
                        #6: Project<Bit> ((<0, P$1(32) shared-int32>, <1, P$3(32) shared-int32>, <2, P$4(32) shared-float>)) : (#0 shared-int32 orders.o_year, #1 shared-int32 lineitem.l_suppkey, #2 shared-float volume) order by: {}, cost est: 0, output card: 58136
                            #5: BasicJoin<Bit> ($0 == $2) : (#0 shared-int32 orders.o_orderkey, #1 shared-int32 orders.o_year, #2 shared-int32 lineitem.l_orderkey, #3 shared-int32 lineitem.l_suppkey, #4 shared-float volume) order by: {}, cost est: 2034760, output card: 58136
                                #3: Project<Bit> ((<0, P$1(32) shared-int32>, <1, P$3(32) shared-int32>)) : (#0 shared-int32 orders.o_orderkey, #1 shared-int32 orders.o_year) order by: {}, cost est: 0, output card: 172
                                    #2: BasicJoin<Bit> ($0 == $2) : (#0 shared-int32 customer.c_custkey, #1 shared-int32 orders.o_orderkey, #2 shared-int32 orders.o_custkey, #3 shared-int32 orders.o_year) order by: {}, cost est: 6020, output card: 172
                                        #0: SecureSqlInput<Bit> ("SELECT c_custkey FROM customer c JOIN nation n1 ON c_nationkey = n_nationkey JOIN region ON r_regionkey = n_regionkey WHERE r_name = 'AFRICA' ORDER BY c_custkey", tuple_count=2) : (#0 shared-int32 customer.c_custkey) order by: {}, cost est: 0, output card: 2
                                        #1: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_orderyear::INT AS o_year, NOT (o_orderdate >= date '1995-01-01' and o_orderdate < date '1996-12-31') dummy_tag FROM orders ORDER BY o_year, o_orderkey", tuple_count=86) : (#0 shared-int32 orders.o_orderkey, #1 shared-int32 orders.o_custkey, #2 shared-int32 orders.o_year) order by: {}, cost est: 0, output card: 86
                                #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_suppkey, l_extendedprice * (1.0 - l_discount) AS volume,        CASE            WHEN p_type = 'LARGE ANODIZED STEEL' AND p_partkey = l_partkey THEN FALSE            ELSE TRUE            END AS dummy_tag FROM lineitem LEFT JOIN part ON p_partkey = l_partkey ORDER BY l_orderkey", tuple_count=338) : (#0 shared-int32 lineitem.l_orderkey, #1 shared-int32 lineitem.l_suppkey, #2 shared-float volume) order by: {}, cost est: 0, output card: 338
                        #7: SecureSqlInput<Bit> ("SELECT s_suppkey, CASE WHEN n_name = 'KENYA' THEN true ELSE false END AS nation_check FROM supplier JOIN nation ON n_nationkey = s_nationkey ORDER BY s_suppkey", tuple_count=10) : (#0 shared-int32 supplier.s_suppkey, #1 shared-bool nation_check) order by: {}, cost est: 0, output card: 10

Operator #0 SecureSqlInput ran for 0.121000 ms, gate count: 0 output cardinality: 2, row width=33
Operator #1 SecureSqlInput ran for 0.369000 ms, gate count: 0 output cardinality: 86, row width=97
Operator #2 BasicJoin ran for 0.551000 ms, gate count: 5848 output cardinality: 172, row width=129
Operator #3 Project ran for 0.019000 ms, gate count: 0 output cardinality: 172, row width=65
Operator #4 SecureSqlInput ran for 2.496000 ms, gate count: 0 output cardinality: 338, row width=97
Operator #5 BasicJoin ran for 312.977000 ms, gate count: 1976624 output cardinality: 58136, row width=161
Operator #6 Project ran for 58.897000 ms, gate count: 0 output cardinality: 58136, row width=97
Operator #7 SecureSqlInput ran for 62.253000 ms, gate count: 0 output cardinality: 10, row width=34
Operator #8 BasicJoin ran for 3150.698000 ms, gate count: 19766240 output cardinality: 581360, row width=130
Operator #9 Project ran for 3653.336000 ms, gate count: 18603520 output cardinality: 581360, row width=97
Operator #-1 Sort ran for 588017.175000 ms, gate count: 7102617600 output cardinality: 581360, row width=97
Operator #10 SortMergeAggregate ran for 95601.936000 ms, gate count: 1260967736 output cardinality: 581360, row width=97
Operator #11 Project ran for 150749.920000 ms, gate count: 2214400240 output cardinality: 581360, row width=65
Operator #12 Sort ran for 464646.554000 ms, gate count: 5354280960 output cardinality: 581360, row width=65
Runtime: 1306.43 sec, CPU Time: 1295.63 sec, CPU clock ticks: 1.29563e+09, CPU clock ticks per second: 1000000
End-to-end estimated gates: 1.65839e+10. observed gates: 15972618768 gates, relative error (%)=3.82691
[Linux]Peak resident set size: 3935715328 bytes, current memory size: 662061056 bytes.
Initial Memory: 3175006208 bytes, Peak Memory After Execution: 3935715328 bytes, Memory Usage: 760709120 bytes
Bandwidth: 3.91238e+08 Bps
[       OK ] BaselineComparisonTest.rewrite_rules_tpch_q8 (1794739 ms)
[ RUN      ] BaselineComparisonTest.rewrite_rules_tpch_q9
Connecting to 127.0.0.1 on ports 7657, 65485 as 1
connected
EMP mode: sh2pc, storage mode: column store
Code version: 6f573099aa4c9ebaaafa878d9db0f6ac19a07c93
GFlags: --flagfile=	--alice_db=tpch_alice_10	--alice_host=127.0.0.1	--bob_db=tpch_bob_10	--ctrl_port=65486	--cutoff=100	--filter=*	--party=1	--port=7658	--storage=column	--unioned_db=tpch_unioned_10	--validation=true	--log_level=2	--logfile=	

[Linux]Peak resident set size: 3935715328 bytes, current memory size: 623222784 bytes.
#11: Sort<Bit> ({<0, ASC> , <1, DESC> }) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 amount, #2 shared-float sum_profit) order by: {<0, ASC> , <1, DESC> }, cost est: 1005999489024, output card: 13661960
    #10: SortMergeAggregate<Bit> (group-by: (0, 1) aggs: (SUM($2) sum_profit)) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 amount, #2 shared-float sum_profit) order by: {<0, ASC> , <1, DESC> }, cost est: 21176038000, output card: 13661960
        #-1: Sort<Bit> ({<0, ASC> , <1, ASC> }) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 amount, #2 shared-float o_year) order by: {<0, ASC> , <1, ASC> }, cost est: 1005999489024, output card: 13661960
            #9: Project<Bit> ((<0, P$0(200) shared-varchar>, <1, P$3(32) shared-int32>, <2, P$2(32) shared-float>)) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 amount, #2 shared-float o_year) order by: {}, cost est: 0, output card: 13661960
                #8: BasicJoin<Bit> ($1 == $4) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 lineitem.l_orderkey, #2 shared-float amount, #3 shared-int32 o_year, #4 shared-int32 orders.o_orderkey) order by: {}, cost est: 478168600, output card: 13661960
                    #6: Project<Bit> ((<0, P$0(200) shared-varchar>, <1, P$4(32) shared-int32>, <2, $8 - ($3 * $7) shared-float>)) : (#0 shared-varchar(25) nation.nation, #1 shared-int32 lineitem.l_orderkey, #2 shared-float amount) order by: {}, cost est: 723925020, output card: 158860
                        #5: BasicJoin<Bit> (($2 == $6) AND ($1 == $5)) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32 partsupp.ps_partkey, #2 shared-int32 partsupp.ps_suppkey, #3 shared-float partsupp.ps_supplycost, #4 shared-int32 lineitem.l_orderkey, #5 shared-int32 lineitem.l_partkey, #6 shared-int32 lineitem.l_suppkey, #7 shared-float l_quantity, #8 shared-float volume) order by: {}, cost est: 20969520, output card: 158860
                            #3: Project<Bit> ((<0, P$1(200) shared-varchar>, <1, P$2(32) shared-int32>, <2, P$3(32) shared-int32>, <3, P$4(32) shared-float>)) : (#0 shared-varchar(25) nation.n_name, #1 shared-int32 partsupp.ps_partkey, #2 shared-int32 partsupp.ps_suppkey, #3 shared-float partsupp.ps_supplycost) order by: {}, cost est: 0, output card: 470
                                #2: BasicJoin<Bit> ($0 == $3) : (#0 shared-int32 supplier.s_suppkey, #1 shared-varchar(25) nation.n_name, #2 shared-int32 partsupp.ps_partkey, #3 shared-int32 partsupp.ps_suppkey, #4 shared-float partsupp.ps_supplycost) order by: {}, cost est: 16450, output card: 470
                                    #0: SecureSqlInput<Bit> ("SELECT s_suppkey, n_name FROM supplier JOIN nation ON s_nationkey = n_nationkey ORDER BY n_name, s_suppkey", tuple_count=10) : (#0 shared-int32 supplier.s_suppkey, #1 shared-varchar(25) nation.n_name) order by: {}, cost est: 0, output card: 10
                                    #1: SecureSqlInput<Bit> ("SELECT ps_partkey, ps_suppkey, ps_supplycost FROM partsupp JOIN part ON ps_partkey = p_partkey WHERE p_name LIKE '%yellow%' ORDER BY ps_suppkey, ps_partkey", tuple_count=47) : (#0 shared-int32 partsupp.ps_partkey, #1 shared-int32 partsupp.ps_suppkey, #2 shared-float partsupp.ps_supplycost) order by: {}, cost est: 0, output card: 47
                            #4: SecureSqlInput<Bit> ("SELECT l_orderkey, l_partkey, l_suppkey, l_quantity::float4, l_extendedprice * (1.0 - l_discount) AS volume FROM lineitem ORDER BY l_orderkey, l_partkey, l_suppkey", tuple_count=338) : (#0 shared-int32 lineitem.l_orderkey, #1 shared-int32 lineitem.l_partkey, #2 shared-int32 lineitem.l_suppkey, #3 shared-float l_quantity, #4 shared-float volume) order by: {}, cost est: 0, output card: 338
                    #7: SecureSqlInput<Bit> ("SELECT EXTRACT('year' FROM o_orderdate)::INT AS o_year, o_orderkey FROM orders ORDER BY o_orderkey", tuple_count=86) : (#0 shared-int32 o_year, #1 shared-int32 orders.o_orderkey) order by: {}, cost est: 0, output card: 86

Operator #0 SecureSqlInput ran for 0.214000 ms, gate count: 0 output cardinality: 10, row width=233
Operator #1 SecureSqlInput ran for 0.286000 ms, gate count: 0 output cardinality: 47, row width=97
Operator #2 BasicJoin ran for 2.900000 ms, gate count: 15980 output cardinality: 470, row width=329
Operator #3 Project ran for 1.457000 ms, gate count: 0 output cardinality: 470, row width=297
Operator #4 SecureSqlInput ran for 5.553000 ms, gate count: 0 output cardinality: 338, row width=161
Operator #5 BasicJoin ran for 2205.575000 ms, gate count: 10643620 output cardinality: 158860, row width=457
Operator #6 Project ran for 54172.906000 ms, gate count: 723925020 output cardinality: 158860, row width=265
Operator #7 SecureSqlInput ran for 38.603000 ms, gate count: 0 output cardinality: 86, row width=65
unknown file: Failure
C++ exception with description "vector::_M_default_append" thrown in the test body.
[  FAILED  ] BaselineComparisonTest.rewrite_rules_tpch_q9 (57613 ms)
[ RUN      ] BaselineComparisonTest.rewrite_rules_tpch_q18
Connecting to 127.0.0.1 on ports 7658, 65486 as 1
connected
EMP mode: sh2pc, storage mode: column store
Code version: 6f573099aa4c9ebaaafa878d9db0f6ac19a07c93
GFlags: --flagfile=	--alice_db=tpch_alice_10	--alice_host=127.0.0.1	--bob_db=tpch_bob_10	--ctrl_port=65487	--cutoff=100	--filter=*	--party=1	--port=7659	--storage=column	--unioned_db=tpch_unioned_10	--validation=true	--log_level=2	--logfile=	

[Linux]Peak resident set size: 3935715328 bytes, current memory size: 1303400448 bytes.
#14: Sort<Bit> ({<-1, ASC> , <4, DESC> , <3, ASC> }) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32 customer.c_custkey, #2 shared-int32 orders.o_orderkey, #3 shared-int64 orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float sum_qty) order by: {<-1, ASC> , <4, DESC> , <3, ASC> }, cost est: 633538, output card: 100
    #13: SortMergeAggregate<Bit> (group-by: (0, 1, 2, 3, 4) aggs: (SUM($5) sum_qty)) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32 customer.c_custkey, #2 shared-int32 orders.o_orderkey, #3 shared-int64 orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float sum_qty) order by: {<0, ASC> , <1, ASC> , <2, ASC> , <3, ASC> , <4, ASC> }, cost est: 177439211040, output card: 98249840
        #-1: Sort<Bit> ({<0, ASC> , <1, ASC> , <2, ASC> , <3, ASC> , <4, ASC> }) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32 customer.c_custkey, #2 shared-int32 orders.o_orderkey, #3 shared-int64 orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float lineitem.l_quantity) order by: {<0, ASC> , <1, ASC> , <2, ASC> , <3, ASC> , <4, ASC> }, cost est: 13798048006144, output card: 98249840
            #12: Project<Bit> ((<0, P$6(200) shared-varchar>, <1, P$5(32) shared-int32>, <2, P$0(32) shared-int32>, <3, P$3(64) shared-int64>, <4, P$2(32) shared-float>, <5, P$4(32) shared-float>)) : (#0 shared-varchar(25) customer.c_name, #1 shared-int32 customer.c_custkey, #2 shared-int32 orders.o_orderkey, #3 shared-int64 orders.o_orderdate, #4 shared-float orders.o_totalprice, #5 shared-float lineitem.l_quantity) order by: {}, cost est: 0, output card: 98249840
                #11: BasicJoin<Bit> ($1 == $5) : (#0 shared-int32 orders.o_orderkey, #1 shared-int32 orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64 orders.o_orderdate, #4 shared-float lineitem.l_quantity, #5 shared-int32 customer.c_custkey, #6 shared-varchar(25) customer.c_name) order by: {}, cost est: 3438744400, output card: 98249840
                    #9: Project<Bit> ((<0, P$2(32) shared-int32>, <1, P$3(32) shared-int32>, <2, P$4(32) shared-float>, <3, P$5(64) shared-int64>, <4, P$1(32) shared-float>)) : (#0 shared-int32 orders.o_orderkey, #1 shared-int32 orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64 orders.o_orderdate, #4 shared-float lineitem.l_quantity) order by: {}, cost est: 0, output card: 9824984
                        #8: BasicJoin<Bit> ($0 == $2) : (#0 shared-int32 lineitem.L2.l_orderkey, #1 shared-float lineitem.L2.l_quantity, #2 shared-int32 orders.o_orderkey, #3 shared-int32 orders.o_custkey, #4 shared-float orders.o_totalprice, #5 shared-int64 orders.o_orderdate) order by: {}, cost est: 343874440, output card: 9824984
                            #6: Project<Bit> ((<0, P$1(32) shared-int32>, <1, P$2(32) shared-float>)) : (#0 shared-int32 lineitem.L2.l_orderkey, #1 shared-float lineitem.L2.l_quantity) order by: {}, cost est: 0, output card: 114244
                                #5: BasicJoin<Bit> ($0 == $1) : (#0 shared-int32 lineitem.l_orderkey, #1 shared-int32 lineitem.l_orderkey, #2 shared-float lineitem.l_quantity) order by: {<0, ASC> }, cost est: 3998540, output card: 114244
                                    #3: Project<Bit> ((<0, P$0(32) shared-int32>)) : (#0 shared-int32 lineitem.l_orderkey) order by: {<0, ASC> }, cost est: 0, output card: 338
                                        #2: Filter<Bit> (P$1(32) > SECRET FLOAT) : (#0 shared-int32 lineitem.l_orderkey, #1 shared-float null) order by: {<0, ASC> }, cost est: 71994, output card: 338
                                            #1: SortMergeAggregate<Bit> (group-by: (0) aggs: (SUM($1) null)) : (#0 shared-int32 lineitem.l_orderkey, #1 shared-float null) order by: {<0, ASC> }, cost est: 388700, output card: 338
                                                #-1: Sort<Bit> ({<0, ASC> }) : (#0 shared-int32 lineitem.l_orderkey, #1 shared-float lineitem.l_quantity) order by: {<0, ASC> }, cost est: 667344, output card: 338
                                                    #0: SecureSqlInput<Bit> ("SELECT l_orderkey, l_quantity FROM lineitem ORDER BY l_orderkey", tuple_count=338) : (#0 shared-int32 lineitem.l_orderkey, #1 shared-float lineitem.l_quantity) order by: {}, cost est: 0, output card: 338
                                    #4: SecureSqlInput<Bit> ("SELECT L2.l_orderkey, L2.l_quantity FROM lineitem L2 ORDER BY L2.l_orderkey", tuple_count=338) : (#0 shared-int32 lineitem.l_orderkey, #1 shared-float lineitem.l_quantity) order by: {}, cost est: 0, output card: 338
                            #7: SecureSqlInput<Bit> ("SELECT o_orderkey, o_custkey, o_totalprice, o_orderdate FROM orders ORDER BY o_orderkey, o_custkey", tuple_count=86) : (#0 shared-int32 orders.o_orderkey, #1 shared-int32 orders.o_custkey, #2 shared-float orders.o_totalprice, #3 shared-int64 orders.o_orderdate) order by: {}, cost est: 0, output card: 86
                    #10: SecureSqlInput<Bit> ("SELECT c_custkey, c_name FROM customer ORDER BY c_custkey", tuple_count=10) : (#0 shared-int32 customer.c_custkey, #1 shared-varchar(25) customer.c_name) order by: {}, cost est: 0, output card: 10

