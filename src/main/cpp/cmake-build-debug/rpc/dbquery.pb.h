// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbquery.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dbquery_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dbquery_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dbquery_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dbquery_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dbquery_2eproto;
namespace dbquery {
class ColumnInfo;
class ColumnInfoDefaultTypeInternal;
extern ColumnInfoDefaultTypeInternal _ColumnInfo_default_instance_;
class ColumnVal;
class ColumnValDefaultTypeInternal;
extern ColumnValDefaultTypeInternal _ColumnVal_default_instance_;
class Row;
class RowDefaultTypeInternal;
extern RowDefaultTypeInternal _Row_default_instance_;
class Row_ColumnEntry_DoNotUse;
class Row_ColumnEntry_DoNotUseDefaultTypeInternal;
extern Row_ColumnEntry_DoNotUseDefaultTypeInternal _Row_ColumnEntry_DoNotUse_default_instance_;
class Schema;
class SchemaDefaultTypeInternal;
extern SchemaDefaultTypeInternal _Schema_default_instance_;
class Schema_ColumnEntry_DoNotUse;
class Schema_ColumnEntry_DoNotUseDefaultTypeInternal;
extern Schema_ColumnEntry_DoNotUseDefaultTypeInternal _Schema_ColumnEntry_DoNotUse_default_instance_;
class Table;
class TableDefaultTypeInternal;
extern TableDefaultTypeInternal _Table_default_instance_;
}  // namespace dbquery
PROTOBUF_NAMESPACE_OPEN
template<> ::dbquery::ColumnInfo* Arena::CreateMaybeMessage<::dbquery::ColumnInfo>(Arena*);
template<> ::dbquery::ColumnVal* Arena::CreateMaybeMessage<::dbquery::ColumnVal>(Arena*);
template<> ::dbquery::Row* Arena::CreateMaybeMessage<::dbquery::Row>(Arena*);
template<> ::dbquery::Row_ColumnEntry_DoNotUse* Arena::CreateMaybeMessage<::dbquery::Row_ColumnEntry_DoNotUse>(Arena*);
template<> ::dbquery::Schema* Arena::CreateMaybeMessage<::dbquery::Schema>(Arena*);
template<> ::dbquery::Schema_ColumnEntry_DoNotUse* Arena::CreateMaybeMessage<::dbquery::Schema_ColumnEntry_DoNotUse>(Arena*);
template<> ::dbquery::Table* Arena::CreateMaybeMessage<::dbquery::Table>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dbquery {

enum OIDType : int {
  UNSUPPORTED = 0,
  INTEGER = 1,
  VARCHAR = 2,
  DOUBLE = 3,
  NUMERIC = 4,
  TIMESTAMP = 5,
  TIME = 6,
  BIGINT = 7,
  ENCRYPTED_INTEGER64 = 8,
  OIDType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OIDType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OIDType_IsValid(int value);
constexpr OIDType OIDType_MIN = UNSUPPORTED;
constexpr OIDType OIDType_MAX = ENCRYPTED_INTEGER64;
constexpr int OIDType_ARRAYSIZE = OIDType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OIDType_descriptor();
template<typename T>
inline const std::string& OIDType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OIDType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OIDType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OIDType_descriptor(), enum_t_value);
}
inline bool OIDType_Parse(
    const std::string& name, OIDType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OIDType>(
    OIDType_descriptor(), name, value);
}
// ===================================================================

class Schema_ColumnEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Schema_ColumnEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::dbquery::ColumnInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Schema_ColumnEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::dbquery::ColumnInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Schema_ColumnEntry_DoNotUse();
  Schema_ColumnEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Schema_ColumnEntry_DoNotUse& other);
  static const Schema_ColumnEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Schema_ColumnEntry_DoNotUse*>(&_Schema_ColumnEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dbquery_2eproto);
    return ::descriptor_table_dbquery_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class Schema :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbquery.Schema) */ {
 public:
  Schema();
  virtual ~Schema();

  Schema(const Schema& from);
  Schema(Schema&& from) noexcept
    : Schema() {
    *this = ::std::move(from);
  }

  inline Schema& operator=(const Schema& from) {
    CopyFrom(from);
    return *this;
  }
  inline Schema& operator=(Schema&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Schema& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Schema* internal_default_instance() {
    return reinterpret_cast<const Schema*>(
               &_Schema_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Schema& a, Schema& b) {
    a.Swap(&b);
  }
  inline void Swap(Schema* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Schema* New() const final {
    return CreateMaybeMessage<Schema>(nullptr);
  }

  Schema* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Schema>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Schema& from);
  void MergeFrom(const Schema& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Schema* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbquery.Schema";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dbquery_2eproto);
    return ::descriptor_table_dbquery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kColumnFieldNumber = 1,
    kNumColumnsFieldNumber = 2,
  };
  // map<int32, .dbquery.ColumnInfo> column = 1;
  int column_size() const;
  private:
  int _internal_column_size() const;
  public:
  void clear_column();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dbquery::ColumnInfo >&
      _internal_column() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dbquery::ColumnInfo >*
      _internal_mutable_column();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dbquery::ColumnInfo >&
      column() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dbquery::ColumnInfo >*
      mutable_column();

  // int32 numColumns = 2;
  void clear_numcolumns();
  ::PROTOBUF_NAMESPACE_ID::int32 numcolumns() const;
  void set_numcolumns(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_numcolumns() const;
  void _internal_set_numcolumns(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:dbquery.Schema)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Schema_ColumnEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::dbquery::ColumnInfo,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > column_;
  ::PROTOBUF_NAMESPACE_ID::int32 numcolumns_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbquery_2eproto;
};
// -------------------------------------------------------------------

class Table :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbquery.Table) */ {
 public:
  Table();
  virtual ~Table();

  Table(const Table& from);
  Table(Table&& from) noexcept
    : Table() {
    *this = ::std::move(from);
  }

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }
  inline Table& operator=(Table&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Table& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Table* internal_default_instance() {
    return reinterpret_cast<const Table*>(
               &_Table_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Table& a, Table& b) {
    a.Swap(&b);
  }
  inline void Swap(Table* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Table* New() const final {
    return CreateMaybeMessage<Table>(nullptr);
  }

  Table* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Table>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Table& from);
  void MergeFrom(const Table& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Table* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbquery.Table";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dbquery_2eproto);
    return ::descriptor_table_dbquery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowFieldNumber = 2,
    kSchemaFieldNumber = 1,
  };
  // repeated .dbquery.Row row = 2;
  int row_size() const;
  private:
  int _internal_row_size() const;
  public:
  void clear_row();
  ::dbquery::Row* mutable_row(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dbquery::Row >*
      mutable_row();
  private:
  const ::dbquery::Row& _internal_row(int index) const;
  ::dbquery::Row* _internal_add_row();
  public:
  const ::dbquery::Row& row(int index) const;
  ::dbquery::Row* add_row();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dbquery::Row >&
      row() const;

  // .dbquery.Schema schema = 1;
  bool has_schema() const;
  private:
  bool _internal_has_schema() const;
  public:
  void clear_schema();
  const ::dbquery::Schema& schema() const;
  ::dbquery::Schema* release_schema();
  ::dbquery::Schema* mutable_schema();
  void set_allocated_schema(::dbquery::Schema* schema);
  private:
  const ::dbquery::Schema& _internal_schema() const;
  ::dbquery::Schema* _internal_mutable_schema();
  public:

  // @@protoc_insertion_point(class_scope:dbquery.Table)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dbquery::Row > row_;
  ::dbquery::Schema* schema_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbquery_2eproto;
};
// -------------------------------------------------------------------

class Row_ColumnEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Row_ColumnEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::dbquery::ColumnVal,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Row_ColumnEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::dbquery::ColumnVal,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Row_ColumnEntry_DoNotUse();
  Row_ColumnEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Row_ColumnEntry_DoNotUse& other);
  static const Row_ColumnEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Row_ColumnEntry_DoNotUse*>(&_Row_ColumnEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dbquery_2eproto);
    return ::descriptor_table_dbquery_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class Row :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbquery.Row) */ {
 public:
  Row();
  virtual ~Row();

  Row(const Row& from);
  Row(Row&& from) noexcept
    : Row() {
    *this = ::std::move(from);
  }

  inline Row& operator=(const Row& from) {
    CopyFrom(from);
    return *this;
  }
  inline Row& operator=(Row&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Row& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Row* internal_default_instance() {
    return reinterpret_cast<const Row*>(
               &_Row_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Row& a, Row& b) {
    a.Swap(&b);
  }
  inline void Swap(Row* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Row* New() const final {
    return CreateMaybeMessage<Row>(nullptr);
  }

  Row* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Row>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Row& from);
  void MergeFrom(const Row& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Row* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbquery.Row";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dbquery_2eproto);
    return ::descriptor_table_dbquery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kColumnFieldNumber = 1,
  };
  // map<int32, .dbquery.ColumnVal> column = 1;
  int column_size() const;
  private:
  int _internal_column_size() const;
  public:
  void clear_column();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dbquery::ColumnVal >&
      _internal_column() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dbquery::ColumnVal >*
      _internal_mutable_column();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dbquery::ColumnVal >&
      column() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dbquery::ColumnVal >*
      mutable_column();

  // @@protoc_insertion_point(class_scope:dbquery.Row)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Row_ColumnEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::dbquery::ColumnVal,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > column_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbquery_2eproto;
};
// -------------------------------------------------------------------

class ColumnVal :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbquery.ColumnVal) */ {
 public:
  ColumnVal();
  virtual ~ColumnVal();

  ColumnVal(const ColumnVal& from);
  ColumnVal(ColumnVal&& from) noexcept
    : ColumnVal() {
    *this = ::std::move(from);
  }

  inline ColumnVal& operator=(const ColumnVal& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnVal& operator=(ColumnVal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ColumnVal& default_instance();

  enum ValueCase {
    kStrField = 1,
    kInt64Field = 2,
    kInt32Field = 3,
    kTimeStampField = 4,
    kDoubleField = 5,
    kXorField = 7,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ColumnVal* internal_default_instance() {
    return reinterpret_cast<const ColumnVal*>(
               &_ColumnVal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ColumnVal& a, ColumnVal& b) {
    a.Swap(&b);
  }
  inline void Swap(ColumnVal* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColumnVal* New() const final {
    return CreateMaybeMessage<ColumnVal>(nullptr);
  }

  ColumnVal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColumnVal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColumnVal& from);
  void MergeFrom(const ColumnVal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColumnVal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbquery.ColumnVal";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dbquery_2eproto);
    return ::descriptor_table_dbquery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 6,
    kStrFieldFieldNumber = 1,
    kInt64FieldFieldNumber = 2,
    kInt32FieldFieldNumber = 3,
    kTimeStampFieldFieldNumber = 4,
    kDoubleFieldFieldNumber = 5,
    kXorFieldFieldNumber = 7,
  };
  // .dbquery.OIDType type = 6;
  void clear_type();
  ::dbquery::OIDType type() const;
  void set_type(::dbquery::OIDType value);
  private:
  ::dbquery::OIDType _internal_type() const;
  void _internal_set_type(::dbquery::OIDType value);
  public:

  // string strField = 1;
  private:
  bool _internal_has_strfield() const;
  public:
  void clear_strfield();
  const std::string& strfield() const;
  void set_strfield(const std::string& value);
  void set_strfield(std::string&& value);
  void set_strfield(const char* value);
  void set_strfield(const char* value, size_t size);
  std::string* mutable_strfield();
  std::string* release_strfield();
  void set_allocated_strfield(std::string* strfield);
  private:
  const std::string& _internal_strfield() const;
  void _internal_set_strfield(const std::string& value);
  std::string* _internal_mutable_strfield();
  public:

  // int64 int64Field = 2;
  private:
  bool _internal_has_int64field() const;
  public:
  void clear_int64field();
  ::PROTOBUF_NAMESPACE_ID::int64 int64field() const;
  void set_int64field(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int64field() const;
  void _internal_set_int64field(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 int32Field = 3;
  private:
  bool _internal_has_int32field() const;
  public:
  void clear_int32field();
  ::PROTOBUF_NAMESPACE_ID::int32 int32field() const;
  void set_int32field(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int32field() const;
  void _internal_set_int32field(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 timeStampField = 4;
  private:
  bool _internal_has_timestampfield() const;
  public:
  void clear_timestampfield();
  ::PROTOBUF_NAMESPACE_ID::int64 timestampfield() const;
  void set_timestampfield(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestampfield() const;
  void _internal_set_timestampfield(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double doubleField = 5;
  private:
  bool _internal_has_doublefield() const;
  public:
  void clear_doublefield();
  double doublefield() const;
  void set_doublefield(double value);
  private:
  double _internal_doublefield() const;
  void _internal_set_doublefield(double value);
  public:

  // string xorField = 7;
  private:
  bool _internal_has_xorfield() const;
  public:
  void clear_xorfield();
  const std::string& xorfield() const;
  void set_xorfield(const std::string& value);
  void set_xorfield(std::string&& value);
  void set_xorfield(const char* value);
  void set_xorfield(const char* value, size_t size);
  std::string* mutable_xorfield();
  std::string* release_xorfield();
  void set_allocated_xorfield(std::string* xorfield);
  private:
  const std::string& _internal_xorfield() const;
  void _internal_set_xorfield(const std::string& value);
  std::string* _internal_mutable_xorfield();
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:dbquery.ColumnVal)
 private:
  class _Internal;
  void set_has_strfield();
  void set_has_int64field();
  void set_has_int32field();
  void set_has_timestampfield();
  void set_has_doublefield();
  void set_has_xorfield();

  inline bool has_value() const;
  inline void clear_has_value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  union ValueUnion {
    ValueUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strfield_;
    ::PROTOBUF_NAMESPACE_ID::int64 int64field_;
    ::PROTOBUF_NAMESPACE_ID::int32 int32field_;
    ::PROTOBUF_NAMESPACE_ID::int64 timestampfield_;
    double doublefield_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xorfield_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_dbquery_2eproto;
};
// -------------------------------------------------------------------

class ColumnInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbquery.ColumnInfo) */ {
 public:
  ColumnInfo();
  virtual ~ColumnInfo();

  ColumnInfo(const ColumnInfo& from);
  ColumnInfo(ColumnInfo&& from) noexcept
    : ColumnInfo() {
    *this = ::std::move(from);
  }

  inline ColumnInfo& operator=(const ColumnInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnInfo& operator=(ColumnInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ColumnInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ColumnInfo* internal_default_instance() {
    return reinterpret_cast<const ColumnInfo*>(
               &_ColumnInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ColumnInfo& a, ColumnInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ColumnInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColumnInfo* New() const final {
    return CreateMaybeMessage<ColumnInfo>(nullptr);
  }

  ColumnInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColumnInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColumnInfo& from);
  void MergeFrom(const ColumnInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColumnInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbquery.ColumnInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dbquery_2eproto);
    return ::descriptor_table_dbquery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTableNameFieldNumber = 4,
    kColumnNumberFieldNumber = 2,
    kTypeFieldNumber = 3,
    kIsPrivateFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string tableName = 4;
  void clear_tablename();
  const std::string& tablename() const;
  void set_tablename(const std::string& value);
  void set_tablename(std::string&& value);
  void set_tablename(const char* value);
  void set_tablename(const char* value, size_t size);
  std::string* mutable_tablename();
  std::string* release_tablename();
  void set_allocated_tablename(std::string* tablename);
  private:
  const std::string& _internal_tablename() const;
  void _internal_set_tablename(const std::string& value);
  std::string* _internal_mutable_tablename();
  public:

  // int32 columnNumber = 2;
  void clear_columnnumber();
  ::PROTOBUF_NAMESPACE_ID::int32 columnnumber() const;
  void set_columnnumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_columnnumber() const;
  void _internal_set_columnnumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .dbquery.OIDType type = 3;
  void clear_type();
  ::dbquery::OIDType type() const;
  void set_type(::dbquery::OIDType value);
  private:
  ::dbquery::OIDType _internal_type() const;
  void _internal_set_type(::dbquery::OIDType value);
  public:

  // bool is_private = 5;
  void clear_is_private();
  bool is_private() const;
  void set_is_private(bool value);
  private:
  bool _internal_is_private() const;
  void _internal_set_is_private(bool value);
  public:

  // @@protoc_insertion_point(class_scope:dbquery.ColumnInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tablename_;
  ::PROTOBUF_NAMESPACE_ID::int32 columnnumber_;
  int type_;
  bool is_private_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbquery_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Schema

// map<int32, .dbquery.ColumnInfo> column = 1;
inline int Schema::_internal_column_size() const {
  return column_.size();
}
inline int Schema::column_size() const {
  return _internal_column_size();
}
inline void Schema::clear_column() {
  column_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dbquery::ColumnInfo >&
Schema::_internal_column() const {
  return column_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dbquery::ColumnInfo >&
Schema::column() const {
  // @@protoc_insertion_point(field_map:dbquery.Schema.column)
  return _internal_column();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dbquery::ColumnInfo >*
Schema::_internal_mutable_column() {
  return column_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dbquery::ColumnInfo >*
Schema::mutable_column() {
  // @@protoc_insertion_point(field_mutable_map:dbquery.Schema.column)
  return _internal_mutable_column();
}

// int32 numColumns = 2;
inline void Schema::clear_numcolumns() {
  numcolumns_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Schema::_internal_numcolumns() const {
  return numcolumns_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Schema::numcolumns() const {
  // @@protoc_insertion_point(field_get:dbquery.Schema.numColumns)
  return _internal_numcolumns();
}
inline void Schema::_internal_set_numcolumns(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  numcolumns_ = value;
}
inline void Schema::set_numcolumns(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_numcolumns(value);
  // @@protoc_insertion_point(field_set:dbquery.Schema.numColumns)
}

// -------------------------------------------------------------------

// Table

// .dbquery.Schema schema = 1;
inline bool Table::_internal_has_schema() const {
  return this != internal_default_instance() && schema_ != nullptr;
}
inline bool Table::has_schema() const {
  return _internal_has_schema();
}
inline void Table::clear_schema() {
  if (GetArenaNoVirtual() == nullptr && schema_ != nullptr) {
    delete schema_;
  }
  schema_ = nullptr;
}
inline const ::dbquery::Schema& Table::_internal_schema() const {
  const ::dbquery::Schema* p = schema_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dbquery::Schema*>(
      &::dbquery::_Schema_default_instance_);
}
inline const ::dbquery::Schema& Table::schema() const {
  // @@protoc_insertion_point(field_get:dbquery.Table.schema)
  return _internal_schema();
}
inline ::dbquery::Schema* Table::release_schema() {
  // @@protoc_insertion_point(field_release:dbquery.Table.schema)
  
  ::dbquery::Schema* temp = schema_;
  schema_ = nullptr;
  return temp;
}
inline ::dbquery::Schema* Table::_internal_mutable_schema() {
  
  if (schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::dbquery::Schema>(GetArenaNoVirtual());
    schema_ = p;
  }
  return schema_;
}
inline ::dbquery::Schema* Table::mutable_schema() {
  // @@protoc_insertion_point(field_mutable:dbquery.Table.schema)
  return _internal_mutable_schema();
}
inline void Table::set_allocated_schema(::dbquery::Schema* schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete schema_;
  }
  if (schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema, submessage_arena);
    }
    
  } else {
    
  }
  schema_ = schema;
  // @@protoc_insertion_point(field_set_allocated:dbquery.Table.schema)
}

// repeated .dbquery.Row row = 2;
inline int Table::_internal_row_size() const {
  return row_.size();
}
inline int Table::row_size() const {
  return _internal_row_size();
}
inline void Table::clear_row() {
  row_.Clear();
}
inline ::dbquery::Row* Table::mutable_row(int index) {
  // @@protoc_insertion_point(field_mutable:dbquery.Table.row)
  return row_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dbquery::Row >*
Table::mutable_row() {
  // @@protoc_insertion_point(field_mutable_list:dbquery.Table.row)
  return &row_;
}
inline const ::dbquery::Row& Table::_internal_row(int index) const {
  return row_.Get(index);
}
inline const ::dbquery::Row& Table::row(int index) const {
  // @@protoc_insertion_point(field_get:dbquery.Table.row)
  return _internal_row(index);
}
inline ::dbquery::Row* Table::_internal_add_row() {
  return row_.Add();
}
inline ::dbquery::Row* Table::add_row() {
  // @@protoc_insertion_point(field_add:dbquery.Table.row)
  return _internal_add_row();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dbquery::Row >&
Table::row() const {
  // @@protoc_insertion_point(field_list:dbquery.Table.row)
  return row_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Row

// map<int32, .dbquery.ColumnVal> column = 1;
inline int Row::_internal_column_size() const {
  return column_.size();
}
inline int Row::column_size() const {
  return _internal_column_size();
}
inline void Row::clear_column() {
  column_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dbquery::ColumnVal >&
Row::_internal_column() const {
  return column_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dbquery::ColumnVal >&
Row::column() const {
  // @@protoc_insertion_point(field_map:dbquery.Row.column)
  return _internal_column();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dbquery::ColumnVal >*
Row::_internal_mutable_column() {
  return column_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::dbquery::ColumnVal >*
Row::mutable_column() {
  // @@protoc_insertion_point(field_mutable_map:dbquery.Row.column)
  return _internal_mutable_column();
}

// -------------------------------------------------------------------

// ColumnVal

// string strField = 1;
inline bool ColumnVal::_internal_has_strfield() const {
  return value_case() == kStrField;
}
inline void ColumnVal::set_has_strfield() {
  _oneof_case_[0] = kStrField;
}
inline void ColumnVal::clear_strfield() {
  if (_internal_has_strfield()) {
    value_.strfield_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const std::string& ColumnVal::strfield() const {
  // @@protoc_insertion_point(field_get:dbquery.ColumnVal.strField)
  return _internal_strfield();
}
inline void ColumnVal::set_strfield(const std::string& value) {
  _internal_set_strfield(value);
  // @@protoc_insertion_point(field_set:dbquery.ColumnVal.strField)
}
inline std::string* ColumnVal::mutable_strfield() {
  // @@protoc_insertion_point(field_mutable:dbquery.ColumnVal.strField)
  return _internal_mutable_strfield();
}
inline const std::string& ColumnVal::_internal_strfield() const {
  if (_internal_has_strfield()) {
    return value_.strfield_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ColumnVal::_internal_set_strfield(const std::string& value) {
  if (!_internal_has_strfield()) {
    clear_value();
    set_has_strfield();
    value_.strfield_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.strfield_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ColumnVal::set_strfield(std::string&& value) {
  // @@protoc_insertion_point(field_set:dbquery.ColumnVal.strField)
  if (!_internal_has_strfield()) {
    clear_value();
    set_has_strfield();
    value_.strfield_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.strfield_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dbquery.ColumnVal.strField)
}
inline void ColumnVal::set_strfield(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_strfield()) {
    clear_value();
    set_has_strfield();
    value_.strfield_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.strfield_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dbquery.ColumnVal.strField)
}
inline void ColumnVal::set_strfield(const char* value, size_t size) {
  if (!_internal_has_strfield()) {
    clear_value();
    set_has_strfield();
    value_.strfield_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.strfield_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dbquery.ColumnVal.strField)
}
inline std::string* ColumnVal::_internal_mutable_strfield() {
  if (!_internal_has_strfield()) {
    clear_value();
    set_has_strfield();
    value_.strfield_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.strfield_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ColumnVal::release_strfield() {
  // @@protoc_insertion_point(field_release:dbquery.ColumnVal.strField)
  if (_internal_has_strfield()) {
    clear_has_value();
    return value_.strfield_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void ColumnVal::set_allocated_strfield(std::string* strfield) {
  if (has_value()) {
    clear_value();
  }
  if (strfield != nullptr) {
    set_has_strfield();
    value_.strfield_.UnsafeSetDefault(strfield);
  }
  // @@protoc_insertion_point(field_set_allocated:dbquery.ColumnVal.strField)
}

// int64 int64Field = 2;
inline bool ColumnVal::_internal_has_int64field() const {
  return value_case() == kInt64Field;
}
inline void ColumnVal::set_has_int64field() {
  _oneof_case_[0] = kInt64Field;
}
inline void ColumnVal::clear_int64field() {
  if (_internal_has_int64field()) {
    value_.int64field_ = PROTOBUF_LONGLONG(0);
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ColumnVal::_internal_int64field() const {
  if (_internal_has_int64field()) {
    return value_.int64field_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void ColumnVal::_internal_set_int64field(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_int64field()) {
    clear_value();
    set_has_int64field();
  }
  value_.int64field_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ColumnVal::int64field() const {
  // @@protoc_insertion_point(field_get:dbquery.ColumnVal.int64Field)
  return _internal_int64field();
}
inline void ColumnVal::set_int64field(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_int64field(value);
  // @@protoc_insertion_point(field_set:dbquery.ColumnVal.int64Field)
}

// int32 int32Field = 3;
inline bool ColumnVal::_internal_has_int32field() const {
  return value_case() == kInt32Field;
}
inline void ColumnVal::set_has_int32field() {
  _oneof_case_[0] = kInt32Field;
}
inline void ColumnVal::clear_int32field() {
  if (_internal_has_int32field()) {
    value_.int32field_ = 0;
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ColumnVal::_internal_int32field() const {
  if (_internal_has_int32field()) {
    return value_.int32field_;
  }
  return 0;
}
inline void ColumnVal::_internal_set_int32field(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_int32field()) {
    clear_value();
    set_has_int32field();
  }
  value_.int32field_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ColumnVal::int32field() const {
  // @@protoc_insertion_point(field_get:dbquery.ColumnVal.int32Field)
  return _internal_int32field();
}
inline void ColumnVal::set_int32field(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int32field(value);
  // @@protoc_insertion_point(field_set:dbquery.ColumnVal.int32Field)
}

// int64 timeStampField = 4;
inline bool ColumnVal::_internal_has_timestampfield() const {
  return value_case() == kTimeStampField;
}
inline void ColumnVal::set_has_timestampfield() {
  _oneof_case_[0] = kTimeStampField;
}
inline void ColumnVal::clear_timestampfield() {
  if (_internal_has_timestampfield()) {
    value_.timestampfield_ = PROTOBUF_LONGLONG(0);
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ColumnVal::_internal_timestampfield() const {
  if (_internal_has_timestampfield()) {
    return value_.timestampfield_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void ColumnVal::_internal_set_timestampfield(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_timestampfield()) {
    clear_value();
    set_has_timestampfield();
  }
  value_.timestampfield_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ColumnVal::timestampfield() const {
  // @@protoc_insertion_point(field_get:dbquery.ColumnVal.timeStampField)
  return _internal_timestampfield();
}
inline void ColumnVal::set_timestampfield(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestampfield(value);
  // @@protoc_insertion_point(field_set:dbquery.ColumnVal.timeStampField)
}

// double doubleField = 5;
inline bool ColumnVal::_internal_has_doublefield() const {
  return value_case() == kDoubleField;
}
inline void ColumnVal::set_has_doublefield() {
  _oneof_case_[0] = kDoubleField;
}
inline void ColumnVal::clear_doublefield() {
  if (_internal_has_doublefield()) {
    value_.doublefield_ = 0;
    clear_has_value();
  }
}
inline double ColumnVal::_internal_doublefield() const {
  if (_internal_has_doublefield()) {
    return value_.doublefield_;
  }
  return 0;
}
inline void ColumnVal::_internal_set_doublefield(double value) {
  if (!_internal_has_doublefield()) {
    clear_value();
    set_has_doublefield();
  }
  value_.doublefield_ = value;
}
inline double ColumnVal::doublefield() const {
  // @@protoc_insertion_point(field_get:dbquery.ColumnVal.doubleField)
  return _internal_doublefield();
}
inline void ColumnVal::set_doublefield(double value) {
  _internal_set_doublefield(value);
  // @@protoc_insertion_point(field_set:dbquery.ColumnVal.doubleField)
}

// string xorField = 7;
inline bool ColumnVal::_internal_has_xorfield() const {
  return value_case() == kXorField;
}
inline void ColumnVal::set_has_xorfield() {
  _oneof_case_[0] = kXorField;
}
inline void ColumnVal::clear_xorfield() {
  if (_internal_has_xorfield()) {
    value_.xorfield_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const std::string& ColumnVal::xorfield() const {
  // @@protoc_insertion_point(field_get:dbquery.ColumnVal.xorField)
  return _internal_xorfield();
}
inline void ColumnVal::set_xorfield(const std::string& value) {
  _internal_set_xorfield(value);
  // @@protoc_insertion_point(field_set:dbquery.ColumnVal.xorField)
}
inline std::string* ColumnVal::mutable_xorfield() {
  // @@protoc_insertion_point(field_mutable:dbquery.ColumnVal.xorField)
  return _internal_mutable_xorfield();
}
inline const std::string& ColumnVal::_internal_xorfield() const {
  if (_internal_has_xorfield()) {
    return value_.xorfield_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ColumnVal::_internal_set_xorfield(const std::string& value) {
  if (!_internal_has_xorfield()) {
    clear_value();
    set_has_xorfield();
    value_.xorfield_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.xorfield_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ColumnVal::set_xorfield(std::string&& value) {
  // @@protoc_insertion_point(field_set:dbquery.ColumnVal.xorField)
  if (!_internal_has_xorfield()) {
    clear_value();
    set_has_xorfield();
    value_.xorfield_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.xorfield_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dbquery.ColumnVal.xorField)
}
inline void ColumnVal::set_xorfield(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_xorfield()) {
    clear_value();
    set_has_xorfield();
    value_.xorfield_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.xorfield_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dbquery.ColumnVal.xorField)
}
inline void ColumnVal::set_xorfield(const char* value, size_t size) {
  if (!_internal_has_xorfield()) {
    clear_value();
    set_has_xorfield();
    value_.xorfield_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.xorfield_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dbquery.ColumnVal.xorField)
}
inline std::string* ColumnVal::_internal_mutable_xorfield() {
  if (!_internal_has_xorfield()) {
    clear_value();
    set_has_xorfield();
    value_.xorfield_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.xorfield_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ColumnVal::release_xorfield() {
  // @@protoc_insertion_point(field_release:dbquery.ColumnVal.xorField)
  if (_internal_has_xorfield()) {
    clear_has_value();
    return value_.xorfield_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void ColumnVal::set_allocated_xorfield(std::string* xorfield) {
  if (has_value()) {
    clear_value();
  }
  if (xorfield != nullptr) {
    set_has_xorfield();
    value_.xorfield_.UnsafeSetDefault(xorfield);
  }
  // @@protoc_insertion_point(field_set_allocated:dbquery.ColumnVal.xorField)
}

// .dbquery.OIDType type = 6;
inline void ColumnVal::clear_type() {
  type_ = 0;
}
inline ::dbquery::OIDType ColumnVal::_internal_type() const {
  return static_cast< ::dbquery::OIDType >(type_);
}
inline ::dbquery::OIDType ColumnVal::type() const {
  // @@protoc_insertion_point(field_get:dbquery.ColumnVal.type)
  return _internal_type();
}
inline void ColumnVal::_internal_set_type(::dbquery::OIDType value) {
  
  type_ = value;
}
inline void ColumnVal::set_type(::dbquery::OIDType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:dbquery.ColumnVal.type)
}

inline bool ColumnVal::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ColumnVal::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ColumnVal::ValueCase ColumnVal::value_case() const {
  return ColumnVal::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ColumnInfo

// int32 columnNumber = 2;
inline void ColumnInfo::clear_columnnumber() {
  columnnumber_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ColumnInfo::_internal_columnnumber() const {
  return columnnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ColumnInfo::columnnumber() const {
  // @@protoc_insertion_point(field_get:dbquery.ColumnInfo.columnNumber)
  return _internal_columnnumber();
}
inline void ColumnInfo::_internal_set_columnnumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  columnnumber_ = value;
}
inline void ColumnInfo::set_columnnumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_columnnumber(value);
  // @@protoc_insertion_point(field_set:dbquery.ColumnInfo.columnNumber)
}

// string name = 1;
inline void ColumnInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ColumnInfo::name() const {
  // @@protoc_insertion_point(field_get:dbquery.ColumnInfo.name)
  return _internal_name();
}
inline void ColumnInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:dbquery.ColumnInfo.name)
}
inline std::string* ColumnInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:dbquery.ColumnInfo.name)
  return _internal_mutable_name();
}
inline const std::string& ColumnInfo::_internal_name() const {
  return name_.GetNoArena();
}
inline void ColumnInfo::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ColumnInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dbquery.ColumnInfo.name)
}
inline void ColumnInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dbquery.ColumnInfo.name)
}
inline void ColumnInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dbquery.ColumnInfo.name)
}
inline std::string* ColumnInfo::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ColumnInfo::release_name() {
  // @@protoc_insertion_point(field_release:dbquery.ColumnInfo.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ColumnInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dbquery.ColumnInfo.name)
}

// .dbquery.OIDType type = 3;
inline void ColumnInfo::clear_type() {
  type_ = 0;
}
inline ::dbquery::OIDType ColumnInfo::_internal_type() const {
  return static_cast< ::dbquery::OIDType >(type_);
}
inline ::dbquery::OIDType ColumnInfo::type() const {
  // @@protoc_insertion_point(field_get:dbquery.ColumnInfo.type)
  return _internal_type();
}
inline void ColumnInfo::_internal_set_type(::dbquery::OIDType value) {
  
  type_ = value;
}
inline void ColumnInfo::set_type(::dbquery::OIDType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:dbquery.ColumnInfo.type)
}

// string tableName = 4;
inline void ColumnInfo::clear_tablename() {
  tablename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ColumnInfo::tablename() const {
  // @@protoc_insertion_point(field_get:dbquery.ColumnInfo.tableName)
  return _internal_tablename();
}
inline void ColumnInfo::set_tablename(const std::string& value) {
  _internal_set_tablename(value);
  // @@protoc_insertion_point(field_set:dbquery.ColumnInfo.tableName)
}
inline std::string* ColumnInfo::mutable_tablename() {
  // @@protoc_insertion_point(field_mutable:dbquery.ColumnInfo.tableName)
  return _internal_mutable_tablename();
}
inline const std::string& ColumnInfo::_internal_tablename() const {
  return tablename_.GetNoArena();
}
inline void ColumnInfo::_internal_set_tablename(const std::string& value) {
  
  tablename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ColumnInfo::set_tablename(std::string&& value) {
  
  tablename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dbquery.ColumnInfo.tableName)
}
inline void ColumnInfo::set_tablename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tablename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dbquery.ColumnInfo.tableName)
}
inline void ColumnInfo::set_tablename(const char* value, size_t size) {
  
  tablename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dbquery.ColumnInfo.tableName)
}
inline std::string* ColumnInfo::_internal_mutable_tablename() {
  
  return tablename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ColumnInfo::release_tablename() {
  // @@protoc_insertion_point(field_release:dbquery.ColumnInfo.tableName)
  
  return tablename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ColumnInfo::set_allocated_tablename(std::string* tablename) {
  if (tablename != nullptr) {
    
  } else {
    
  }
  tablename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tablename);
  // @@protoc_insertion_point(field_set_allocated:dbquery.ColumnInfo.tableName)
}

// bool is_private = 5;
inline void ColumnInfo::clear_is_private() {
  is_private_ = false;
}
inline bool ColumnInfo::_internal_is_private() const {
  return is_private_;
}
inline bool ColumnInfo::is_private() const {
  // @@protoc_insertion_point(field_get:dbquery.ColumnInfo.is_private)
  return _internal_is_private();
}
inline void ColumnInfo::_internal_set_is_private(bool value) {
  
  is_private_ = value;
}
inline void ColumnInfo::set_is_private(bool value) {
  _internal_set_is_private(value);
  // @@protoc_insertion_point(field_set:dbquery.ColumnInfo.is_private)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dbquery

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::dbquery::OIDType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dbquery::OIDType>() {
  return ::dbquery::OIDType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dbquery_2eproto
