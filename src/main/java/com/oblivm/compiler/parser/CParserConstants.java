/* Generated By:JavaCC: Do not edit this line. CParserConstants.java */
/***
 * Copyright (C) 2015 by Chang Liu <liuchang@cs.umd.edu>
 */
package com.oblivm.compiler.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 11;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 12;
  /** RegularExpression Id. */
  int HEX_LITERAL = 13;
  /** RegularExpression Id. */
  int INT_TYPE = 14;
  /** RegularExpression Id. */
  int RND_TYPE = 15;
  /** RegularExpression Id. */
  int FLOAT_TYPE = 16;
  /** RegularExpression Id. */
  int STRING_TYPE = 17;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 18;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 19;
  /** RegularExpression Id. */
  int EXPONENT = 20;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 21;
  /** RegularExpression Id. */
  int STRING_LITERAL = 22;
  /** RegularExpression Id. */
  int WHILE = 23;
  /** RegularExpression Id. */
  int ELSE = 24;
  /** RegularExpression Id. */
  int VOID = 25;
  /** RegularExpression Id. */
  int ALICE = 26;
  /** RegularExpression Id. */
  int BOB = 27;
  /** RegularExpression Id. */
  int SECURE = 28;
  /** RegularExpression Id. */
  int PUBLIC = 29;
  /** RegularExpression Id. */
  int STRUCT = 30;
  /** RegularExpression Id. */
  int NATIVE = 31;
  /** RegularExpression Id. */
  int DUMMY = 32;
  /** RegularExpression Id. */
  int PHANTOM = 33;
  /** RegularExpression Id. */
  int TYPEDEF = 34;
  /** RegularExpression Id. */
  int FOR = 35;
  /** RegularExpression Id. */
  int BFOR = 36;
  /** RegularExpression Id. */
  int BWHILE = 37;
  /** RegularExpression Id. */
  int BOT = 38;
  /** RegularExpression Id. */
  int LOG = 39;
  /** RegularExpression Id. */
  int IF = 40;
  /** RegularExpression Id. */
  int RETURN = 41;
  /** RegularExpression Id. */
  int ONREAL = 42;
  /** RegularExpression Id. */
  int AFFINE = 43;
  /** RegularExpression Id. */
  int ONDUMMY = 44;
  /** RegularExpression Id. */
  int NULL = 45;
  /** RegularExpression Id. */
  int PACKAGE = 46;
  /** RegularExpression Id. */
  int SIZEOF = 47;
  /** RegularExpression Id. */
  int USING = 48;
  /** RegularExpression Id. */
  int DEBUG = 49;
  /** RegularExpression Id. */
  int IDENTIFIER = 50;
  /** RegularExpression Id. */
  int LETTER = 51;
  /** RegularExpression Id. */
  int DIGIT = 52;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int PREPROCESSOR_OUTPUT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "\"\\n\"",
    "\"\\\\\\n\"",
    "\"\\\\\\r\\n\"",
    "<token of kind 10>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<INT_TYPE>",
    "<RND_TYPE>",
    "<FLOAT_TYPE>",
    "\"string\"",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "\"while\"",
    "\"else\"",
    "\"void\"",
    "\"alice\"",
    "\"bob\"",
    "\"secure\"",
    "\"public\"",
    "\"struct\"",
    "\"native\"",
    "\"dummy\"",
    "\"phantom\"",
    "\"typedef\"",
    "\"for\"",
    "\"bfor\"",
    "\"bwhile\"",
    "\"bot\"",
    "\"log\"",
    "\"if\"",
    "\"return\"",
    "\"ONREAL\"",
    "\"affine\"",
    "\"ONDUMMY\"",
    "\"null\"",
    "\"package\"",
    "\"sizeof\"",
    "\"using\"",
    "\"debug\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\".\"",
    "\"[\"",
    "\"]\"",
    "\"@\"",
    "\"=\"",
    "\",\"",
    "\"$\"",
    "\"~\"",
    "\".(\"",
    "\";\"",
    "\"#define\"",
    "\"{\"",
    "\"}\"",
    "\"<\"",
    "\">\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"<<\"",
    "\">>\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"||\"",
    "\"&&\"",
    "\"==\"",
    "\"!=\"",
    "\">=\"",
    "\"<=\"",
  };

}
