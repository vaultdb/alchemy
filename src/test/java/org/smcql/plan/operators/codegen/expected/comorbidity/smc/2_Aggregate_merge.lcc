package org.smcql.generated.comorbidity.Aggregate2.merge;

secure int1 lessThan(int96  lhs, int96 rhs) {
    int1 res = 0;
    if(lhs$0~32$ < rhs$0~32$) {
        res = 1;
    }
    return res;
}




// combine sorted entries from Alice and Bob
int96[m+n] run@m@n(int96[m] a, int96[n] b) {
      secure int aPtr = 0;
      secure int bPtr = 0;
      secure int mPtr;

     public int bound = m+n;

      secure int96[secure m+n] merged; 

 

      bfor(bound)(mPtr = 0; mPtr < bound; mPtr = mPtr + 1) {

	if(bPtr < n && (aPtr == m || lessThan(b[bPtr], a[aPtr]) == 1)) {
	    merged[mPtr] = b[bPtr];
	    bPtr = bPtr + 1;
	    	    
	 }
	 else {
	      merged[mPtr] = a[aPtr];
 	      aPtr = aPtr + 1;
	}


	
	} // end while


	setArrElements(merged, mPtr);
	return merged;
}