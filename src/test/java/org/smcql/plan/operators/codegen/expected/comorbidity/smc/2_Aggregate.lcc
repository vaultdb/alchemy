package org.smcql.generated.comorbidity.Aggregate2;



secure int1 groupByMatch(secure int96 lhs, secure int96 rhs) {       
    int1 ret = 1;

    int32 l1 = lhs$0~32$;
    int32 r1 = rhs$0~32$;
    if(l1 != r1)  {
            ret = 0;
     }

    return ret;

}





//receive partial counts that were computed in plaintext
// each struct contains a groupBy field and a count field
int96[m] run@m@n(int96[m] a, int96[n] b) {
      

      secure int aIdx = 0;
      secure int mIdx = 0;
      int96[secure m] aPrime = a;

      


      secure int96[secure m] merged;            
      merged[mIdx] = a[aIdx];
      

      aIdx = 1;
      int cutoff;
      getArrElements(aPrime, cutoff);

      bwhile(m-1)(aIdx < cutoff) {
          
	  if(groupByMatch(merged[mIdx], aPrime[aIdx]) == 1) {
	    secure int96 deref = merged[mIdx];
secure int96 toAdd = a[aIdx];
deref$32~96$ = deref$32~96$ + toAdd$32~96$;
merged[mIdx] = deref;

          }
          else {
	      mIdx = mIdx + 1;
	      merged[mIdx] = aPrime[aIdx];
	  }
	  aIdx = aIdx + 1;
	}
	   
	setArrElements(merged, mIdx+1);
  	return merged;
}