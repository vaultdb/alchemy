package org.smcql.codegen.smc.compiler.emp.generated;

import java.nio.ByteBuffer;

import org.bytedeco.javacpp.BoolPointer;
import org.bytedeco.javacpp.Loader;
import org.bytedeco.javacpp.Pointer;
import org.bytedeco.javacpp.annotation.ByPtr;
import org.bytedeco.javacpp.annotation.Namespace;
import org.bytedeco.javacpp.annotation.Platform;


import org.smcql.codegen.smc.compiler.emp.EmpProgram;


@Platform(include={"JoinCdiff.h"}, 
			includepath= "/usr/local/include", 
			linkpath="/usr/local/lib", 
			link={"emp-tool","pqxx"},
			compiler = "cpp11")





@Namespace("JoinCdiff")
public class JoinCdiff  extends EmpProgram  {


	
	public JoinCdiff(int aParty, int aPort) {
		super(aParty, aPort);
	}

	public static class JoinCdiffClass extends Pointer {
        static { Loader.load(); }
        public JoinCdiffClass() { 	
        	allocate(); 
        	}
        private native void allocate();

        public native void run(int party, int port); 
        public native @ByPtr BoolPointer getOutput();
        
        
	}
	
	   JoinCdiffClass theQuery;
	   
	   
        @Override
        public  void runProgram() {
        	theQuery = new JoinCdiffClass();
	        theQuery.run(party, port);
	        
        }
        
        public boolean[] getOutput() {
        
            BoolPointer outputPtr = theQuery.getOutput();
	        ByteBuffer buf = outputPtr.asByteBuffer();
	        
	        // copy bytes out of buffer
	        byte[] bytes = new byte[buf.capacity()];    
	        buf.get(bytes, 0, bytes.length);
	        theQuery.close();
	        
	        return byteArray2BitArray(bytes);
	     
        }

        
	
    	
}