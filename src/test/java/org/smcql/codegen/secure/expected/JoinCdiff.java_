package org.smcql.compiler.emp.generated;



import org.bytedeco.javacpp.Loader;
import org.bytedeco.javacpp.Pointer;
import org.bytedeco.javacpp.annotation.Namespace;
import org.bytedeco.javacpp.annotation.Platform;
import org.bytedeco.javacpp.annotation.StdString;

import java.util.Map;
import java.util.HashMap;
import java.util.Iterator;
import java.util.BitSet;


import org.smcql.config.SystemConfiguration;
import org.smcql.db.data.QueryTable;
import org.smcql.executor.plaintext.SqlQueryExecutor;
import org.smcql.type.SecureRelRecordType;
import org.smcql.util.EmpJniUtilities;
import org.smcql.util.Utilities;
import org.smcql.util.EmpJniUtilities;







import org.smcql.compiler.emp.EmpProgram;


@Platform(include={"JoinCdiff.h"}, 
			compiler = "cpp11")





@Namespace("JoinCdiff")
public class JoinCdiff  extends EmpProgram  {

	Map<String, String> inputs = new HashMap<String, String>();
	
	public JoinCdiff(int party, int port) {
		super(party, port);
		inputs.put("SeqScan4Union", "SELECT patient_id, FALSE AS dummy_tag FROM medications ORDER BY dummy_tag, patient_id");
inputs.put("SeqScan0Union", "SELECT patient_id, icd9 = '008.45' AS dummy_tag FROM (SELECT patient_id, icd9 FROM diagnoses) AS t ORDER BY dummy_tag, patient_id");

	}
	

	public static class JoinCdiffClass extends Pointer {
	
        static {         
			Loader.load(); 
	       } 
       
        public JoinCdiffClass() { 	
        	allocate(); 
        	}
        private native void allocate();
        
        // schema always has boolean dummyTag at the end of each tuple - both for input and output
        // 1 = dummy, 0 = real value
        public native void addInput(@StdString String opName,  @StdString String bitString);
        public native void run(int party, int port); 
        public native void setGeneratorHost(@StdString String host);
        public native @StdString String getOutput();
        
        
	}
	
	
	   
	   
	QueryTable getInput(String sql) throws Exception {
    	SecureRelRecordType outSchema = Utilities.getOutSchemaFromSql(sql);
    	String workerId = System.getProperty("workerId");	
    	
					
		// Perform plaintext execution, which does not reduce cardinality, but add dummyTags
    	QueryTable table = SqlQueryExecutor.query(sql, outSchema, workerId);

    	
		return table;

    }
	   	
        @Override
        public void runProgram() throws Exception {
        	JoinCdiffClass theQuery = new JoinCdiffClass();

	        Iterator inputItr = inputs.entrySet().iterator();
	        while(inputItr.hasNext()) {
	        	Map.Entry entry = (Map.Entry) inputItr.next();
	        	String functionName = (String) entry.getKey();

	        	// For all inputs to MPC, get an associated QueryTable
	        	QueryTable table = getInput((String) entry.getValue());

			System.out.println("Input table " + functionName + ": " + table);

                // add the input strings using the addInput function - which is available in main.txtOkay
	        	theQuery.addInput(functionName, table.toBinaryString());
	        }
	        
        	if(generatorHost != null) {
        		theQuery.setGeneratorHost(generatorHost);
        	}
        	
        	
        	theQuery.run(party, port);
        	outputString = theQuery.getOutput();
		outputBits = EmpJniUtilities.stringToBitSet(outputString);
	        theQuery.close();

        }
        



	// for testing on localhost only
	public static void main(String[] args) {
           
		int party = Integer.parseInt(args[0]);
		int port = Integer.parseInt(args[1]);
		String setupFile = Utilities.getSMCQLRoot() + "/conf/setup.global";
		
  	    System.setProperty("smcql.setup", setupFile);
  	    String workerId = (party == 1) ? "alice" : "bob";
  	    
  	    
  	    
  	    System.setProperty("workerId", workerId);
  	    
		JoinCdiff qc = new JoinCdiff(party, port);

		
		try {
			SystemConfiguration.getInstance(); // initialize config
		        qc.runProgram();
		} catch(Exception e) {
			System.err.println("Program execution failed!");
			e.printStackTrace();
			System.exit(-1);
		}

		System.err.print(qc.getOutputString());


	        
    }        
	
    	
}