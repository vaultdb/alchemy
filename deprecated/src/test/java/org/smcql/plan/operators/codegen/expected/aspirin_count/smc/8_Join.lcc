package org.smcql.generated.aspirin_count.Join8;

void sort@l@s(int@s[l] toSort, int1 isAscending) = native sortLib.sort;
void sort@r@s(int@s[r] toSort, int1 isAscending) = native sortLib.sort;

void sortWithPayload@l@s@t(int@s[l] toSort, int@t[l] tuples, int1 isAscending) = native sortLib.sortWithPayload;
void sortWithPayload@r@s@t(int@s[r] toSort, int@t[r] tuples, int1 isAscending) = native sortLib.sortWithPayload;


typedef char = int8;

secure int1 applyFilter(secure int129 lTuple, secure int129 rTuple) {
	secure int1 ret = 0;
	
	if (lTuple$0~64$ == rTuple$0~64$ && lTuple$64~128$ <= rTuple$64~128$ && lTuple$128~129$ == 1 && rTuple$128~129$ == 1) {
		ret = 1;
	}
	
	return ret;
}

int64[l*r] run@l@r(int129[l] lhs, int129[r] rhs) {
	     	
	secure int lTupleCount, rTupleCount;
	getArrElements(lhs, lTupleCount);
	getArrElements(rhs, rTupleCount);
		    
	secure int64[secure l*r] dst;
	int dstIdx = 0;

	secure int129 srcTuple = 0;
	secure int129 t2 = 0;
	secure int1 filter = 0;

	bfor(l) (int i = 0; i < lTupleCount; i = i + 1) {
		srcTuple = lhs[i];
		
		bfor (l*r) (int j = 0; j < rTupleCount; j = j + 1) {
			t2 = rhs[j];
			filter = applyFilter(srcTuple, t2);

			if(filter == 1) {
				int64 dstTuple;
				dstTuple$0~64$ = srcTuple$0~64$;

				dst[dstIdx] = dstTuple;
				dstIdx = dstIdx + 1;
			}
		}
	}

	setArrElements(dst, dstIdx);

	return dst;

}

