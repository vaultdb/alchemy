// TODO: generalize for arbitrary selection criteria
// see ObliVM generator for example of this
// this example is based on aspirin expected code
Data * $functionName(Data *left, Data *right) {
 
    int writeIdx = 0;
    Integer dstTuple, srcTuple, lTuple, rTuple;
    int jointSchemaSize = $lSize + $rSize - 1; // don't double count the dummy tag 
    int outputTupleCount = left->publicSize * right->publicSize;
	int lhsPayloadSize = $lSize - 1; // sans dummy tag
	int rhsPayloadSize = $rSize - 1; // sans dummy tag
	

	Data *result = new Data;
    
	srcTuple = Integer(jointSchemaSize, 0, PUBLIC);
    

    // output tuple count
    result->tuples = new Integer[outputTupleCount];
    result->publicSize = outputTupleCount;
    
    dstTuple = Integer($dSize, 0, PUBLIC);
	
    for (int i=0; i < left->publicSize; i++) {
        lTuple = left->tuples[i];
        memcpy(srcTuple.bits, lTuple.bits, lhsPayloadSize);
        		
        for (int j=0; j < right->publicSize; j++) {
        	rTuple = right->tuples[j];
	        	
        	// concatenate the two inputs into srcTuple, the standard join output schema
        	memcpy(srcTuple.bits + lhsPayloadSize, rTuple.bits, rhsPayloadSize);
        	
        	
        	// TODO: rewire filter flattener to skip the memcopies above
        	Bit cmp = $filterCond;
        	
        	// populate dstTuple with any projections
        	$writeDst;
        	
        	dstTuple[$dSize - 1] = cmp & !EmpUtilities::getDummyTag(lTuple) & !EmpUtilities::getDummyTag(rTuple);
	       
        	
	        result->tuples[writeIdx] = dstTuple;
            writeIdx++;
            
        }
    }
    return result;
}
