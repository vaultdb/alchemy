// TODO: generalize for arbitrary selection criteria
// see ObliVM generator for example of this
// this example is based on aspirin expected code
Data * $functionName(Data *left, Data *right) {
 
 	Integer *output = new Integer[left->publicSize * right->publicSize];
    int writeIdx = 0;
    Integer dstTuple, srcTuple, lTuple, rTuple;
    int jointSchemaSize = $lSize + $rSize;
	
	srcTuple = Integer(jointSchemaSize, 0, PUBLIC);
    
    Integer realCount(INT_LENGTH, 0, PUBLIC);

    
    dstTuple = Integer($dSize, 0, PUBLIC);
	
    for (int i=0; i<left->publicSize; i++) {
        for (int j=0; j<right->publicSize; j++) {
        	lTuple = left->data[i];
        	rTuple = right->data[j];
	        	
        	// concatenate the two inputs into srcTuple, the standard join output schema
        	memcpy(srcTuple.bits, lTuple.bits, $lSize);
        	memcpy(srcTuple.bits + $lSize, rTuple.bits, $rSize);
        	
        	
        	Bit cmp = $filterCond;
        	
        	$writeDst;
        	
        	dstTuple = If(cmp, dstTuple, Integer($dSize, 0, PUBLIC)); 
        	
        	Integer incremented = realCount + Integer(INT_LENGTH, 1, PUBLIC);
        	realCount = If(cmp, incremented, realCount);
        	
        	/*if(cmp.reveal(PUBLIC) == 1) {
        		cout << "Matched at " << i << ", " << j << endl;
        	}*/
        	
	        output[writeIdx] = dstTuple;
            writeIdx++;
            
        }
    }
    Data *result = new Data;
    result->data = output;
    // output tuple count
    result->publicSize = left->publicSize * right->publicSize;
	result->realSize = realCount;
    return result;
}
