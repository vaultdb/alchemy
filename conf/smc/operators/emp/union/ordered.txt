Data* $functionName(int party, NetIO * io) {

    // std::cout << "Testing that this is the correct template" << std::endl;

    int rowLength = $size;


    std::cout << "The rowlength in bits is " << rowLength << std::endl;

	string localBitstring = inputs["$functionName"];
    bool *localData = EmpUtilities::toBool(localBitstring);

    int aliceSize = localBitstring.length() / rowLength;
    int bobSize = aliceSize;

    // communicate with other party to correct sizes ( number of tuples )
    if (party == ALICE) {
        io->send_data(&aliceSize, 4);
        io->flush();
        io->recv_data(&bobSize, 4);
        io->flush();
    } else if (party == BOB) {
        io->recv_data(&aliceSize, 4);
        io->flush();
        io->send_data(&bobSize, 4);
        io->flush();
    }

    // allocating secret share for union data & dummies
    Integer * res = new Integer[aliceSize + bobSize];  // enough space for all inputs
    Bit * tmp = new Bit[rowLength * (aliceSize + bobSize)]; //  bit representation of res



    bool *readPos = localData;

    int writePos = 0;
    int writeTuple = aliceSize; // last tuple

    // reverse Alice's order for correct Bitonic Merge ( Increasing -> Max -> Decreasing )
    for (int i = 0;  i < aliceSize; ++i) {
    	--writeTuple;
    	writePos = writeTuple * rowLength;


        for (int j = 0; j < rowLength; ++j) {
            // updating tmp pointer with alice's
            tmp[writeTuple*rowLength + j] = Bit((ALICE==party) ? *readPos : 0, ALICE);

            ++readPos;
            ++writePos;
         }
	}

	// Initialize Bob's Batcher
    Batcher batcher;



    for (int i = 0; i < bobSize*rowLength; ++i)
        batcher.add<Bit>((BOB==party) ? localData[i]:0);

    batcher.make_semi_honest(BOB); // Secret Share


    // add Bob's encrypted tuples
    for (int i = 0; i < bobSize*rowLength; ++i)
        tmp[i+aliceSize*rowLength] = batcher.next<Bit>();

    // create full Integer representation with both Bob and Alice's information
    for(int i = 0; i < aliceSize + bobSize; ++i) {
           
	   res[i] = Integer(rowLength, tmp + rowLength*i);
	   
	   Integer value = Integer(res[i]);
	   value.bits[rowLength-1] = Bit(0, PUBLIC); // zero out the dummy tag

           
	   cout << "Encoding idx: " << i << " as " << res[i].reveal<int64_t>(PUBLIC) << " or " <<  res[i].bits[rowLength - 1].reveal(PUBLIC) << ", " << value.reveal<uint32_t>(PUBLIC) << endl;
	}

    cout << "$functionName took as input " << aliceSize + bobSize << " tuples from alice and bob." << endl;
    cout << "Tuple length "  << res[0].size() << endl;

    // TODO: make sort more robust.  Handle sort keys that are not adjacent or in the same order in the table
    EmpUtilities::bitonicMergeSql(res, 0, aliceSize + bobSize, Bit(true), $keyPos, $keyLength);

    Data * d = new Data;
    d->tuples = res;
    d->publicSize = aliceSize + bobSize;

    cout << "Tuple length post-merge: "  << res[0].size() << ", output: " <<  endl;
    for(int i = 0; i < aliceSize + bobSize; ++i) { 
	   Integer value = Integer(res[i]);
	   value.bits[rowLength-1] = Bit(0, PUBLIC); // zero out the dummy tag



	  cout << "Outputting " << res[i][rowLength - 1].reveal(PUBLIC) << ", " << value.reveal<int32_t>(PUBLIC) << endl;	  	  
    }
    return d;
}
