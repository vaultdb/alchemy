Data* $functionName(int party, NetIO * io) {
    int rowLength = $size; 
	string localBitstring = inputs["$functionName"];
    bool *localData = toBool(localBitstring);


    int aliceSize = localBitstring.length() / rowLength;
    int bobSize = aliceSize;

    if (party == ALICE) {
        io->send_data(&aliceSize, 4);
        io->flush();
        io->recv_data(&bobSize, 4);
        io->flush();
    } else if (party == BOB) {
        io->recv_data(&aliceSize, 4);
        io->flush();
        io->send_data(&bobSize, 4);
        io->flush();
    }

    Integer * res = new Integer[aliceSize + bobSize];  // enough space for all inputs
   
    Bit * tmp = new Bit[rowLength * (aliceSize + bobSize)]; //  bit array of inputs
    for (int i = 0; i < aliceSize; ++i)
        for (int j = 0; j < rowLength; ++j)
            tmp[i*rowLength + j] = Bit((ALICE==party) ? 
                localData[(aliceSize-i-1)*rowLength + j]:0, ALICE);

    Batcher batcher;
    for (int i = 0; i < bobSize*rowLength; ++i)
        batcher.add<Bit>((BOB==party) ? localData[i]:0);
    batcher.make_semi_honest(BOB);

    for (int i = 0; i < bobSize*rowLength; ++i)
        tmp[i+aliceSize*rowLength] = batcher.next<Bit>();

    for(int i = 0; i < aliceSize + bobSize; ++i)
        res[i] = Integer(rowLength, tmp+rowLength*i);

    cout << "$functionName took as input " << aliceSize + bobSize << " tuples." << endl;

    // TODO: make sort more robust.  Handle sort keys that are not adjacent or in the same order in the table
    bitonic_merge_sql(res, 0, aliceSize + bobSize, Bit(true), $keyPos, $keyLength);
    

    Data * d = new Data;
    d->data = res;
    d->publicSize = aliceSize + bobSize;
    d->realSize = Integer(64, d->publicSize, PUBLIC);
    cout << "Done union!" << endl;   
    return d;
}
