Data* op_merge(string sql, vector<int> input_col_lengths, int party, NetIO * io) {
    std::vector<Row> in = execute_sql(sql, party);
    int bit_length = sum_vals(input_col_lengths);
    bool *local_data = concat(in, bit_length);

    int alice_size = in.size();
    int bob_size = in.size();
    Batcher batcher;
    
    // line up input sizes
    if (party == ALICE) {
        io->send_data(&alice_size, 4);
        io->flush();
        io->recv_data(&bob_size, 4);
        io->flush();
    } else if (party == BOB) {
        io->recv_data(&alice_size, 4);
        io->flush();
        io->send_data(&bob_size, 4);
        io->flush();
    }

    Integer * res = new Integer[alice_size + bob_size];  // enough space for all inputs
    
    Bit * tmp = new Bit[bit_length * (alice_size + bob_size)]; //  bit array of inputs
    
    for (int i = 0; i < alice_size; ++i) {
        for (int j = 0; j < bit_length; ++j) {
        	   // set up bit array, if alice, secret share a local bit, 
        	   // otherwise bob collects his part of the secret share and inputs 0 as a placeholder
	           tmp[i*bit_length + j] = Bit((ALICE==party) ? 
    	            local_data[(alice_size-i-1)*bit_length + j]:0, ALICE);
    	            }
    	        }

    for (int i = 0; i < bob_size*bit_length; ++i)
        batcher.add<Bit>((BOB==party) ? local_data[i]:0);
    batcher.make_semi_honest(BOB);

	// append all of bob's bits to tmp
    for (int i = 0; i < bob_size*bit_length; ++i)
        tmp[i+alice_size*bit_length] = batcher.next<Bit>();

	// create a 2D array of secret-shared bits
	// each index is a tuple
    for(int i = 0; i < alice_size + bob_size; ++i)
        res[i] = Integer(bit_length, tmp+bit_length*i);


    Data * d = new Data;
    d->data = res;
    d->public_size = alice_size + bob_size;
    d->real_size = Integer(64, d->public_size, PUBLIC);
        
    return d;
}