Data * $functionName(Data *data) {

	// sort by 1) dummy tag and 2) group-by column(s)
	// such that all dummies are at the end 
	// and tuples in the same group-by bin are adjacent
	$sortInput

    // Initialize new Data object for end results
    Data *result = new Data;
    result->publicSize = data->publicSize;

    result->tuples = new Integer[data->publicSize];
	int srcDummyTagIdx = data->tuples[0].size() - 1;
	int dstDummyTagIdx = $dSize - 1;
	
	Integer lastTuple, lastGroupBy, groupBy, tuple;

    // set index 0 init
    lastTuple = data->tuples[0];
	Bit lastDummyTag = lastTuple[srcDummyTagIdx];

    $initializeGroupBy


	Bit dummyTag = lastDummyTag;
	groupBy = lastGroupBy;
	
    int cursor = 0;

	Integer output =  Integer($dSize, 0, PUBLIC);
	
	
    output[dstDummyTagIdx] = lastDummyTag;
    
    $initializeAggregate
    
    $writeGroupBy
		
		
	// write output of aggregate computation
	$writeAggregate

  
	 result->tuples[0] = Integer($dSize, output.bits);
	cout << "Done initializing aggregate!" << endl;

    while ( cursor < data->publicSize - 1) {

        ++cursor;
        tuple = data->tuples[cursor];
        dummyTag = tuple[srcDummyTagIdx];
	    $extractGroupBy
	    
	    output =  Integer($dSize, 0, PUBLIC);
        
        output[dstDummyTagIdx] = dummyTag;
		
		Bit eq = (lastGroupBy == groupBy);
	    Bit incremental = !dummyTag & eq;
	    		
		// if !dummyTag & eq, incremental update
		// else restart agg
		// if incremental, set predecessor to dummy so this one replaces it
		cout << "Processing cursor at " << cursor << " group by: " << groupBy.reveal<int32_t>(PUBLIC)
		 << endl;
		 
		
		Bit prevDummyTag = result->tuples[cursor-1][dstDummyTagIdx];		
		prevDummyTag = If(incremental, Bit(1, PUBLIC), prevDummyTag);
		result->tuples[cursor-1][dstDummyTagIdx] = prevDummyTag;
				
		$computeAggregate

		
		// write group by vals if applicable
		$writeGroupBy
		
		cout << "Wrote group by " << Integer(32, output.bits).reveal<int32_t>(PUBLIC) << endl;
		
	    // write output of aggregate computation
	    $writeAggregate

        result->tuples[cursor] = Integer($dSize, output.bits);
	    
	    lastTuple = tuple;
	    lastGroupBy = groupBy;


    }
    
    cout << "Completed aggregate!" << endl;
    return result;

}
