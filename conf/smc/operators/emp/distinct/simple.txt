Data * $functionName(Data *data) {
	// TODO: presort this to put dummies last
	$sortInput
	
	

	int tupleLen = data->tuples[0].size();
	int dummyIdx = 0;
	int tupleBits = tupleLen - 1;
	cout << " Running $functionName with " << data->publicSize << " inputs, tupleLen=" << tupleLen << endl;


    Integer lastPayload = Integer(tupleBits, data->tuples[0].bits + 1);
    Integer payload;
    memcpy(lastPayload.bits, data->tuples[0].bits + 1, tupleBits); // compare tuple value sans dummyTag
    int cursor = 0;



    while ( cursor < data->publicSize - 1) {


        cursor++;
        Bit isDummy = data->tuples[cursor][dummyIdx]; // easier to perform logic checks
	
        payload =  Integer(tupleBits, data->tuples[cursor].bits + 1);
	  
 
        std::cout << "Comparison " << payload.reveal<int32_t>(PUBLIC) << " vs " << lastPayload.reveal<int32_t>(PUBLIC) << " dummy tag: " << (!isDummy).reveal(PUBLIC) << std::endl;
	     
	Bit condition = (!isDummy) & (payload != lastPayload); // set to dummy if it equals its predecessor
	     
        data->tuples[cursor][dummyIdx] = If(condition, Bit(false, PUBLIC), Bit(true, PUBLIC)); 
		
        lastPayload = payload;
    }




    return data;
}

