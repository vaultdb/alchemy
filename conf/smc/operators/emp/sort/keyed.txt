// for sort key
$extractKey

void $functionName_cmp_and_swap(Integer*key, Bit* dummyTags, int i, int j, Bit acc) {
    Integer keyi = extractKey(key[i]);
    Integer keyj = extractKey(key[j]);
    Bit to_swap = ((keyi > keyj) == acc);
    swap(to_swap, key[i], key[j]);
    swap(to_swap, dummyTags[i], dummyTags[j]);
}

// TODO: extend this to multiple columns as a list of key_pos and key_length
void $functionName_merge(Integer* key, Bit* dummyTags, int lo, int n, Bit acc) {
    if (n > 1) {
        int m = greatestPowerOfTwoLessThan(n);
        for (int i = lo; i < lo + n - m; i++)
            $functionName_cmp_and_swap(key, dummyTags, i, i + m, acc);
        $functionName_merge(key, dummyTags, lo, m, acc);
        $functionName_merge(key, dummyTags, lo + m, n - m, acc);
    }
}


void bitonic_$functionName(Integer * key, Bit* dummyTags, int lo, int n, Bit acc) {
    if (n > 1) {
        int m = n / 2;
        bitonic_$functionName(key, dummyTags, lo, m, !acc);
        bitonic_$functionName(key, dummyTags, lo + m, n - m, acc);
        $functionName_merge(key, dummyTags, lo, n, acc);
    }
}

Data* $functionName(Data *data) {
    bitonic_$functionName(data->data, data->dummyTags, 0, data->publicSize, Bit(false));
    return data;
}


